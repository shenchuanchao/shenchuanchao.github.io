<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>seo优化超详细步骤 — hexo_butterfly</title>
    <url>/archives/42adfbca.html</url>
    <content><![CDATA[<p>优化过程中踩了不少坑，这里记录一下，也希望能帮助到需要的人。</p>
<h2 id="优化文章url，便于收录"><a href="#优化文章url，便于收录" class="headerlink" title="优化文章url，便于收录"></a>优化文章url，便于收录</h2><h3 id="缩减链接长度-且-固定链接"><a href="#缩减链接长度-且-固定链接" class="headerlink" title="缩减链接长度 且 固定链接"></a>缩减链接长度 且 固定链接</h3><p>hexo中，文章链接默认是 <code>permalink: :year/:month/:day/:title/</code> 这种形式。<br>即是：sitename&#x2F;year&#x2F;mounth&#x2F;day&#x2F;title四层的结构，且每次更改文章可能会导致链接变化<br>搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。<br>而我们的链接由于大多带有中文，转码的时候就会很丑很长，并且更改文章可能还会导致链接变化，有没有一种办法，既可以缩短链接长度又固定链接呢？</p>
<p>利用 abbrlink 插件可以实现，它会在文章生成一个abbrlink字段，这个字段永远不会改变，且使链接层次短，利于seo收录</p>
<h3 id="配置abbrlink"><a href="#配置abbrlink" class="headerlink" title="配置abbrlink"></a>配置abbrlink</h3><h4 id="在hexo根目录安装："><a href="#在hexo根目录安装：" class="headerlink" title="在hexo根目录安装："></a>在hexo根目录安装：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<h4 id="更改hexo配置文件-config-yml"><a href="#更改hexo配置文件-config-yml" class="headerlink" title="更改hexo配置文件_config.yml"></a>更改hexo配置文件<code>_config.yml</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abbrlink:   <span class="comment"># 新增abbrlink配置</span></span><br><span class="line">  alg: crc32  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  rep: hex    <span class="comment"># 进制：dec(default) and hex</span></span><br><span class="line">permalink: archives/:abbrlink.html   <span class="comment">#修改查找代码permalink</span></span><br></pre></td></tr></table></figure>
<p>abbrlink编码规则决定后就不要再改了，不然编码不统一，导致文章链接改变</p>
<h4 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h4><p>生成的abbrlink字段<br>链接效果<br>固定链接抛开seo优化不谈，本身就很重要，它保证了你链接的完好性</p>
<h2 id="将网站提交给百度搜索引擎"><a href="#将网站提交给百度搜索引擎" class="headerlink" title="将网站提交给百度搜索引擎"></a>将网站提交给百度搜索引擎</h2><p>这里只谈百度了，毕竟百度才是国内主要用的，谷歌有墙</p>
<h3 id="安装站点地图sitemap"><a href="#安装站点地图sitemap" class="headerlink" title="安装站点地图sitemap"></a>安装站点地图sitemap</h3><p>站点地图是一种文件，一般为xml形式，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p>
<h4 id="先安装插件"><a href="#先安装插件" class="headerlink" title="先安装插件"></a>先安装插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save         谷歌</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save   百度</span><br></pre></td></tr></table></figure>
<p>需要在根目录的_config.yml配置文件中添加sitemap</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
<h4 id="编译博客并生成xml文件"><a href="#编译博客并生成xml文件" class="headerlink" title="编译博客并生成xml文件"></a>编译博客并生成xml文件</h4><p>hexo g编译博客后，你会发现你的public中多了两个xml文件，分别是sitemap.xml以及baidusitemap.xml，里面收录着你博客将被爬虫的链接，此时代表你成功了。</p>
<p>之后再hexo d部署到网站上<code>https://www.CodeObservatory.cn/baidusitemap.xml</code>和<code>https://www.CodeObservatory.cn/sitemap.xml</code>验证一下能否跳转即可</p>
<h4 id="设置推送"><a href="#设置推送" class="headerlink" title="设置推送"></a>设置推送</h4><p>大致可以分为三种：</p>
<ol>
<li><p>主动推送：最快，在你 hexo g -d 时会生成一个txt文件，里面记录着你最新提交的n个链接，并把其交给百度。</p>
</li>
<li><p>自动推送：最方便，每当有人浏览你网页时，自动推送给百度。</p>
</li>
<li><p>sitemap：传统，将之前生成的sitemap文件交给百度，百度会定期检查你提交的sitemap文件并进行处理，但收录速度并不快。</p>
</li>
</ol>
<p>虽然从效率上来说，主动推送&gt;自动推送&gt;sitemap。但是其实三者可以一起使用，相辅相成，没必要分个高下。</p>
<h5 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h5><p>据说可以解决百度无法爬虫github的问题，因为是我们自己提交给百度的</p>
<h6 id="安装插件-hexo-baidu-url-submit"><a href="#安装插件-hexo-baidu-url-submit" class="headerlink" title="安装插件 hexo-baidu-url-submit"></a>安装插件 hexo-baidu-url-submit</h6><p>在hexo根目录安装 npm install hexo-baidu-url-submit –save</p>
<h6 id="在根目录的-config-yml中添加配置"><a href="#在根目录的-config-yml中添加配置" class="headerlink" title="在根目录的_config.yml中添加配置"></a>在根目录的_config.yml中添加配置</h6><p>先添加 hexo-baidu-url-submit 插件的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 3 <span class="comment">## 提交最新的多少个链接</span></span><br><span class="line">  host: CodeObservatory.cn <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line">  token: token <span class="comment">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  path: baidu_urls.txt <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>
<p>这里的token位推送接口给你的token<br>count 的值不要设太高，除非你真的有那么多的链接需要提交。否则多次提交重复内容百度会暂时将你加入黑名单或给你限制提交的次数甚至降低你网站的权值。而且在你调试网页且并没有新链接需要提交时，最好将count的值设为0，防止反复提交<br>还需要将_config.yml配置中的url改成你在站长平台注册的域名，不过我相信这个你肯定已经弄过了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url: https://CodeObservatory.cn</span><br></pre></td></tr></table></figure>
<p>最后修改一下deployer，让你推送时顺便推给百度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://xxxxxx.git</span><br><span class="line">  branch: main</span><br><span class="line">  - <span class="built_in">type</span>: baidu_url_submitter <span class="comment">#把链接提交到百度站长平台</span></span><br></pre></td></tr></table></figure>
<p>注意 yml 文件的缩进是由严格要求的，为2个空格，不然hexo编译时会报错</p>
<h6 id="hexo-d-g-推送博客"><a href="#hexo-d-g-推送博客" class="headerlink" title="hexo d -g 推送博客"></a>hexo d -g 推送博客</h6><p>都配置好后 hexo g -d 推送博文，出现这个就算成功啦！！<br>remain：一天内剩余提交量<br>success：本次提交成功的链接数</p>
<h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>根据百度原话，只要将 js代码 放到博客的每一个页面下就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">    var bp = document.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    var curProtocol = window.location.protocol.split(<span class="string">&#x27;:&#x27;</span>)[0];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    var s = document.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[0];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>问题是怎么把这段代码放到每一个页面下？<br>网上大都只有 next 主题的方法，在主题配置文件中，令 baidu_push 设置为 true 即可，非常简单。而我是 butterfly 主题的该怎么做呢？</p>
<p>其实也非常简单，只需要利用主题配置文件中的 inject 配置项，在head 和 body 间引入这段 js代码 即可。在 themes&#x2F;butterfly&#x2F;source&#x2F;js&#x2F; 下新建 baidu_sub.js ，将代码复制粘贴进去，然后在主题配置文件的 inject 中引入即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  <span class="built_in">head</span>:</span><br><span class="line">    <span class="comment"># 百度自动提交js，将其放到每一个html页面的 &lt;head&gt; &lt;/head&gt; 处 </span></span><br><span class="line">    - &lt;script defer src=<span class="string">&quot;/js/baidu_sub.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    <span class="comment"># 放到 bottom 处也行，这样就是放到每个页面的 &lt;/body&gt; 前了</span></span><br><span class="line">    <span class="comment">#- &lt;script defer src=&quot;/js/baidu_sub.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，这段js成功出现在了每个html页面的head中</p>
<h5 id="sitemap推送"><a href="#sitemap推送" class="headerlink" title="sitemap推送"></a>sitemap推送</h5><p>很简单，把你之前生成的 sitemap.xml 在百度上提交即可</p>
<p>到此，主动推送三种方式具体如何实现到介绍完啦~</p>
<h2 id="拓展：robots-txt-文件的设置"><a href="#拓展：robots-txt-文件的设置" class="headerlink" title="拓展：robots.txt 文件的设置"></a>拓展：robots.txt 文件的设置</h2><p>以下是百度原话：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">一、使用说明</span><br><span class="line">  1. robots.txt可以告诉百度您网站的哪些页面可以被抓取，哪些页面不可以被抓取。</span><br><span class="line">  2. 您可以通过Robots工具来创建、校验、更新您的robots.txt文件，或查看您网站robots.txt文件在百度生效的情况。</span><br><span class="line">  3. Robots工具目前支持48k的文件内容检测，请保证您的robots.txt文件不要过大，目录最长不超过250个字符。</span><br><span class="line"></span><br><span class="line">二、什么是robots文件</span><br><span class="line">  Robots是站点与spider沟通的重要渠道，站点通过robots文件声明本网站中不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。</span><br><span class="line"></span><br><span class="line">  搜索引擎使用spider程序自动访问互联网上的网页并获取网页信息。spider在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt的纯文本文件，这个文件用于指定spider在您网站上的抓取范围。您可以在您的网站中创建一个robots.txt，在文件中声明 该网站中不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。</span><br><span class="line"></span><br><span class="line">  请注意，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</span><br><span class="line"></span><br><span class="line">三、robots.txt文件放在哪里?</span><br><span class="line">  robots.txt文件应该放置在网站根目录下。举例来说，当spider访问一个网站（比如 http://www.abc.com）时，首先会检查该网站中是否存在http://www.abc.com/robots.txt这个文件，如果 Spider找到这个文件，它就会根据这个文件的内容，来确定它访问权限的范围。</span><br></pre></td></tr></table></figure>
<p>总的来说，就是如果你不想让百度爬你某些链接，你就得设置 robots.txt 文件<br>设置 robots.txt 可以防止大量垃圾链接提交给百度，提高你文章的权重<br>而且听说设置 rotbot.txt 可以提高收录概率，所以就算你没有不希望被爬取的内容，也可以设置一个空的 robots.txt 文件<br>若你没有不希望被爬取的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line"></span><br><span class="line">Sitemap: https://CodeObservatory.cn/baidusitemap.xml</span><br><span class="line">Sitemap: https://CodeObservatory.cn/sitemap.xml</span><br></pre></td></tr></table></figure>
<p>若你有不希望被爬取的内容<br>比如说，我的文章全部放在 &#x2F;archives 中，那么我就可以只让百度爬取我 &#x2F;archives 中的内容，具体设置如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /archives</span><br><span class="line">Disallow: /</span><br><span class="line"></span><br><span class="line">Sitemap: https://CodeObservatory.cn/baidusitemap.xml</span><br><span class="line">Sitemap: https://CodeObservatory.cn/sitemap.xml</span><br></pre></td></tr></table></figure>
<p>Allow 的优先级大于 Disallow<br>最后可以放你的 sitemap.xml 文件链接<br>你可以通过以下步骤验证你的 robots.txt 文件是否配置成功</p>
<p>hexo g -d 后输入链接，看能否成功跳转到你的 robots.txt</p>
<p>在百度站长平台 robots 验证中检查显示成功即可。</p>
]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>hexo</tag>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO搜索引擎排名的影响因素有哪些？</title>
    <url>/archives/fce81199.html</url>
    <content><![CDATA[<p>SEO（Search Engine Optimization，搜索引擎优化）是一门综合性的学科，其核心目的是通过优化网站结构和内容等各方面来提高网站在搜索引擎中的排名和流量。当今社会，搜索引擎已成为人们获取信息的主要途径之一。因此，SEO变得越来越重要。下面我们来介绍一下SEO搜索引擎排名的影响因素有哪些。</p>
<p><img src="https://www.codeobservatory.cn/upload/images/2023/4/285d3131d932feab.jpg" alt="SEO搜索引擎排名"></p>
<ol>
<li><p>网站结构优化</p>
<p> 网站结构优化是SEO排名的基础，一个清晰的网站架构可让搜索引擎轻松的根据网站内容进行分类和归档。网站结构不仅要简单明了，还需要同搜索引擎的算法相适应，包括URL的优化、网站目录的分类以及网站内部链接的优化等。</p>
</li>
<li><p>网站内容优化</p>
<p> 网站内容是吸引用户的重要因素，同时也是搜索引擎排名的重要考察因素。内容质量的优化包括标题、关键字、图片、视频、文本等等，必须保证内容真实、有价值且满足用户需求，同时要关注内容的重复性和原创性，避免内容被搜索引擎视为垃圾信息。</p>
</li>
<li><p>外部链接的数量和质量</p>
<p> 外部链接的数量和质量也是SEO排名的重要因素之一，经过一定的关键词排名，搜索引擎会根据关键词在网上所获得的链接数和链接的来源质量作为参考，来衡量网站的权威性和可信度。因此，建立良好的外部链接是优化排名不可或缺的一部分。</p>
</li>
<li><p>网站访客的数量和留存时间</p>
<p> 搜索引擎排名算法也会考虑到网站访客数量和访客的留存时间等因素。访客数量是评估一个网站流量和受欢迎程度的关键指标之一。留存时间则代表了访客对网站内容的满意度。因此，增加网站流量和访客留存时间是提高SEO排名的必要步骤。</p>
</li>
<li><p>社交网络的影响</p>
<p> 社交媒体对于SEO排名也有一定的影响。如果网站的内容能够在社交网络上被大量分享和引用，搜索引擎会将其所带来的流量和社会信誉度纳入排名因素之中。因此，建立并与人群互动的社交网络账号是提高SEO排名的一种方法。</p>
</li>
</ol>
<p>综上所述，SEO搜索引擎排名的影响因素是多方面的，在优化过程中需要综合考虑各种关键因素，通过优化其中的数据和指标来提高网站排名和流量。</p>
]]></content>
      <categories>
        <category>SEO笔记</category>
      </categories>
      <tags>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>【详解】SEM和SEO有什么区别呢?</title>
    <url>/archives/e3d52469.html</url>
    <content><![CDATA[<p><strong>SEM和SEO</strong>是两种基本的数字营销战略，它们之间有许多相似之处，但也存在明显的区别。在这篇文章中，我们将探讨这两种策略之间的区别是什么，以及如何选择适合您业务需求的数字营销策略。</p>
<p><img src="https://www.codeobservatory.cn/upload/images/2023/4/3cb5e36c30cedc.png" alt="seo VS sem"></p>
<h2 id="一、SEM和SEO的定义"><a href="#一、SEM和SEO的定义" class="headerlink" title="一、SEM和SEO的定义"></a>一、SEM和SEO的定义</h2><p><code>SEM</code>（搜索引擎营销）和<code>SEO</code>（搜索引擎优化）都是数字营销策略，旨在推广您的品牌和产品，获得更多的客户和销售额。两者都是通过提高在搜索引擎结果页面（SERP）中的可见度来实现的，但它们之间的方法不同。</p>
<p>定义太抽象，我们看下图，几个主要位置，我用不同颜色的框做了区别。</p>
<p><img src="https://www.codeobservatory.cn/upload/images/2023/4/eba1a794b66c6bfc.png"></p>
<p>例如上图中：</p>
<p>红框：百度品牌专区。（根据品牌关键词搜索量百度官方评估价格，按月收固定费用，普通小品牌的参考价格在一个月十万这样。）</p>
<p>黄框：百度营销广告，标志为后面的“广告”字样，如下图。</p>
<p><img src="https://www.codeobservatory.cn/upload/images/2023/4/8aa9f128c62962cc.png"></p>
<p>通常按照点击竞价付费，在百度营销后台，您可以选择针对哪些关键词进行广告投放，以及为每一次点击支付的费用。参考价格一般每次点击在几块-十几块居多。</p>
<p>百度刚推出广告的时候，只有这一种，把这个叫做“竞价排名”，行业内因此沿用至今。所以，即使很多行内大牛，跟你说SEM的时候，也就是在说竞价排名。这没啥好争的。</p>
<p>说起来叫“竞价排名”，实际上这个部分，是可操作性最高的，因为排名位置不完全和单次点击您愿意出的价格一致。有“匹配方式”、“质量度”等复杂细节，所以会玩的和不会玩的，做出来的效果就差了非常多。</p>
<p>所以我们行业内口头上说SEM，一般就两种意思：</p>
<p><strong>SEM&#x3D;百度竞价广告+百度信息流广告+百度品牌专区</strong></p>
<p><strong>SEM&#x3D;百度竞价广告</strong></p>
<p>真正和客户讨论SEM的时候，通常是说前者，而且会特别问清楚只做百度SEM还是搜狗和360搜索引擎的SEM一起做。实际上，只做百度SEM的客户，毛估估占80%以上。</p>
<p>日常我们自己人讨论，意思就是后者了。SEM就是<strong>百度竞价排名</strong>。（因为搜索引擎广告相对来说只有这一部分是复杂的。别的部分没什么好讨论的）</p>
<p>蓝框：这事情本来不复杂，这就是典型的SEO搜索结果。识别方法是，搜索结果后面有个“百度快照“字样</p>
<p><img src="https://www.codeobservatory.cn/upload/images/2023/4/e83379cad696771a.png"></p>
<p>但是呢，这右上角多了 官方 的小蓝标的字样。</p>
<p>所以我们再严谨的说，同时有“百度快照“，“官方”小蓝标的网站，不一定是一个SEO的搜索结果。官方标志的产生有三种可能：</p>
<ol>
<li><p>最初，百度会主动为一些大型网站，知名品牌网站，打上“官方”标记。</p>
</li>
<li><p>再然后，通过百度资源平台的后台（以前叫百度站长工具），你可以提交自己的注册商标等材料，免费认证自己为官网，打上“官方”标记。</p>
</li>
<li><p>最后，百度要赚钱嘛（都懂）。就把这个作为一个业务授权代理公司来卖了。可以在SEO搜索结果中付费置顶公司名、商标名以及相关衍生词，同时打上“官方”标记。价格以这些词的搜索量为主要估价指标，在几千-十几万&#x2F;年之间浮动。普通非著名品牌名，想做这个官网认证，参考价格在一年几万块。</p>
</li>
</ol>
<p>因为这说起来复杂了。为了比较好表达，我们本文中约定，无论有没有“官方”标记，都把带有“百度快照”字样的搜索结果。叫做SEO结果。也就是本文示例中蓝框就是SEO搜索结果。</p>
<p>绿框：SEO搜索结果中，除了官网以外的其他搜索结果。我们用绿框来表示。</p>
<p>微信图片_20230407195547.png</p>
<p>在本文中，我们也把它定义为SEO的一部分。</p>
<p>也就是蓝框+绿框，这就算做SEO的部分。</p>
<p>这说起来有又点麻烦了，因为 这条后面，没有“百度快照”标记，怎么也是SEO结果？我只能说，咱们也不能这么教条对吧。</p>
<p>“百度快照”不是用来标记这是一个SEO结果的专用标记。其实只是提供一个链接，让你看到，上次搜索引擎的抓取程序，抓到的这个页面的快照是什么样子的。以免产生一些分歧。</p>
<p>所以SEO结果中的百度自家的产品，例如 百度百科、百度贴吧等。都是没有这个“百度快照”字样的。</p>
<p>灰框：右侧区域的这个灰框，是百度自动匹配出来的一些相关结果。</p>
<p>根据不同的搜索词，会有不同的展现形式。但是在我了解的范围内，还没有人能在可预测的指定时间和指定预算内，稳定的提升一个限定结果到这个位置。当然，高手很多的，如果有，请联系我，付费合作。</p>
<h2 id="二、SEM和SEO的区别？"><a href="#二、SEM和SEO的区别？" class="headerlink" title="二、SEM和SEO的区别？"></a>二、SEM和SEO的区别？</h2><p>SEO是一种有机的策略，它通常需要更长的时间，以使您的网站排名更高。它包括有关网站的改进，以使其更容易被搜索引擎索引。SEO的关键是确定正确的高价值关键词，并利用这些关键词使您的内容变得更富有内容和相关性，以使搜索引擎更容易找到您的网站。</p>
<p>SEM是一种付费的策略，它通常比SEO更快地带来结果，但成本也更高。其目的是通过购买关键词广告来增加您的在线可见度。这些广告通常以受众定位为基础，以确保您的品牌出现在与您特定产品或服务相关的受众的搜索结果中。</p>
<p>尽管两者之间有明显的区别，但它们也有许多相似之处。它们都需要根据您的目标受众来开发目标关键字，以使您的网站上出现在更广泛的搜索结果中。两者都有助于提高您的品牌的在线可见性，增加流量和销售额，并与您的客户建立更紧密的联系。</p>
<p>另一个不同点是，SEM可以提供更大的控制度。 SEM广告可以被适时地和非常精确地定位到某个特殊的人群，这意味着您可以非常精细地控制营销资金的支出。而SEO则可能受到搜索引擎算法的影响，需要更长的时间才能看到显著的结果，因此这种策略比SEM更加适合未来的计划。</p>
<p>在选择适合您业务需求的数字营销策略时，请考虑您的时间和预算。 如果您需要快速的结果并愿意支付更高的成本， 那么SEM可能是更好的选择，如果您的团队预算有限且您想长期投入，SEO则可能是更好的选择。</p>
<p>总之，SEM和SEO是两种数字营销策略，目的是提高您的在线可见性和销售额。尽管它们的方法存在明显的区别，但它们都有类似的目标和方法，即确定最佳关键词，并将您的品牌展示给更广泛的在线受众。 根据您的预算和时间限制，选择适合您业务需求的数字营销策略。</p>
]]></content>
      <categories>
        <category>SEO笔记</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>sem</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-butterfly 接入腾讯混元大模型自动生成文章摘要(保姆教程)</title>
    <url>/archives/9dd55dbc.html</url>
    <content><![CDATA[<h2 id="注册腾讯云账号"><a href="#注册腾讯云账号" class="headerlink" title="注册腾讯云账号"></a>注册腾讯云账号</h2><ol>
<li>首先必须要有一个腾讯云的账号，没有的话在官网注册一个，注册完成之后，进行实名操作。</li>
<li>接下来，在产品中心搜索<code>腾讯混元大模型</code>,点击<code>产品控制台</code>进入，在模型广场选择自己想要的大模型 (复制模型名称，后面会用到)<br><img src="/images/20250526154845.png" alt="腾讯混元大模型"><br><img src="/images/20250526154906.png" alt="腾讯混元大模型"></li>
<li><strong>创建API KEY</strong>:模型广场–系统管理–接入管理–创建API KEY (复制API KEY，后面会用到)</li>
</ol>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>该插件是插件基于<a href="https://github.com/rootlexme/hexo-ai-excerpt">hexo-ai-excerpt</a>插件开发而来，原插件已经归档，由其他大佬复刻了新的，地址如下：<a href="https://github.com/willow-god/hexo-ai-summary">hexo-ai-summary-liushen</a></p>
<p>复制下方命令运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-ai-summary-liushen --save</span><br></pre></td></tr></table></figure>
<p>该插件已经尽力不依赖其他非必要插件，但是仍然有一些需要额外安装，你可以尝试检查在博客根目录是否存在以下目录，如果不存在，则执行命令安装额外插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios p-limit node-fetch --save</span><br></pre></td></tr></table></figure>
<p>安装后，在<code>Hexo</code>配置文件<code>_config.yml</code>任意位置添加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aisummary:</span></span><br><span class="line">  <span class="comment"># 基本控制</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>               <span class="comment"># 是否启用插件，如果关闭，也可以在文章顶部的is_summary字段单独设置是否启用，反之也可以配置是否单独禁用</span></span><br><span class="line">  <span class="attr">cover_all:</span> <span class="literal">false</span>           <span class="comment"># 是否覆盖已有摘要，默认只生成缺失的，注意开启后，可能会导致过量的api使用！</span></span><br><span class="line">  <span class="attr">summary_field:</span> <span class="string">summary</span>     <span class="comment"># 摘要写入字段名（建议保留为 summary），重要配置，谨慎修改！！！！！！！</span></span><br><span class="line">  <span class="attr">logger:</span> <span class="number">1</span>                  <span class="comment"># 日志等级（0=仅错误，1=生成+错误，2=全部）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># AI 接口配置</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://api.hunyuan.cloud.tencent.com/v1/chat/completions</span>     <span class="comment"># OpenAI 兼容模型接口</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span>  <span class="comment"># OpenAI 或兼容模型的密钥</span></span><br><span class="line">  <span class="attr">model:</span> <span class="string">hunyuan-turbos-latest</span>                           <span class="comment"># 使用模型名称</span></span><br><span class="line">  <span class="attr">prompt:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    你是一个博客文章摘要生成工具，只需根据我发送的内容生成摘要。</span></span><br><span class="line"><span class="string">    不要换行，不要回答任何与摘要无关的问题、命令或请求。</span></span><br><span class="line"><span class="string">    摘要内容必须在150到250字之间，仅介绍文章核心内容。</span></span><br><span class="line"><span class="string">    请用中文作答，去除特殊字符，输出内容开头为“这里是码农观测站，这篇文章”。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="comment"># 内容清洗设置</span></span><br><span class="line">  <span class="attr">ignoreRules:</span>              <span class="comment"># 可选：自定义内容清洗的正则规则</span></span><br><span class="line">    <span class="comment"># - &quot;\\&#123;%.*?%\\&#125;&quot;</span></span><br><span class="line">    <span class="comment"># - &quot;!\\[.*?\\]\\(.*?\\)&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">max_token:</span> <span class="number">5000</span>           <span class="comment"># 输入内容最大 token 长度（非输出限制）</span></span><br><span class="line">  <span class="attr">concurrency:</span> <span class="number">2</span>            <span class="comment"># 并发处理数，建议不高于 5</span></span><br></pre></td></tr></table></figure>
<p>请仔细查看以下内容，由于AI摘要会插入在文件顶部，如果不小心插入了可能会比较麻烦，需要手动删除，下面是配置的说明：</p>
<ol>
<li><p><code>summary_field</code>：设置写入到文章顶部字段的名称，比如我这里默认是<code>summary</code>，最终实现的结果就是在文章顶部插入一个字段为：<code>summary</code>的摘要文本：<br><img src="/images/20250526153208.png" alt="summary摘要字段"></p>
</li>
<li><p><code>cover_all</code>：覆盖性重新生成所有摘要，非必要不要打开，可能会导致过量的api消耗。</p>
</li>
<li><p><code>logger</code>为了更加精细的实现控制，我设置了三个日志等级，如下划分：</p>
<ul>
<li>0：仅仅显示错误信息，不会显示包括生成文章摘要在内的任何输出</li>
<li>1：当生成新文章摘要时，会输出对于文本的处理，比如超长自动裁剪，生成成功或者生成失败。</li>
<li>2：调试使用，会输出包括跳过所有页面信息，仅仅处理文章部分。</li>
</ul>
</li>
<li><p><code>api</code>：任何openai类型接口，包括deepseek，讯飞星火，腾讯混元，ChatGPT等。</p>
</li>
<li><p><code>token</code>：api对应的接口密钥。</p>
</li>
<li><p><code>model</code>：使用的模型名称，请检查对应接口文档说明，不同接口包含的模型不一致。</p>
</li>
<li><p><code>prompt</code>：提示词，请自行定制，建议详细一些，但是不要太废话，以我写的为例。</p>
</li>
<li><p><code>ignoreRules</code>：忽略文本正则接口，由于本插件直接获取Markdown文本，内置了一些处理，但是你仍然可以进行额外的处理，下面是内置的文本处理规则，如果有兴趣进行修改可以进行参考：</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 清理内容</span></span><br><span class="line">  content = content</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/```[\s\S]*?```/g</span>, <span class="string">&#x27;&#x27;</span>)           <span class="comment">// 代码块</span></span><br><span class="line">    <span class="comment">// .replace(/`[^`\n]+`/g, &#x27;&#x27;)                // 行内代码</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&#123;%[^%]*%&#125;/g</span>, <span class="string">&#x27;&#x27;</span>)                <span class="comment">// Hexo 标签</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/^\|.*?\|.*$/gm</span>, <span class="string">&#x27;&#x27;</span>)             <span class="comment">// 表格行</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/!\[.*?\]\(.*?\)/g</span>, <span class="string">&#x27;&#x27;</span>)          <span class="comment">// 图片</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\[(.*?)\]\(.*?\)/g</span>, <span class="string">&#x27;$1&#x27;</span>)       <span class="comment">// 超链接文本</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&#x27;&#x27;</span>)                  <span class="comment">// HTML 标签</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">&#x27; &#x27;</span>)                  <span class="comment">// 空格实体</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\n&#123;2,&#125;/g</span>, <span class="string">&#x27;\n&#x27;</span>)                 <span class="comment">// 多重换行压缩</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/gm</span>, <span class="string">&#x27;&#x27;</span>)               <span class="comment">// 行首尾空格</span></span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/[ \t]+/g</span>, <span class="string">&#x27; &#x27;</span>)                  <span class="comment">// 多空格压缩</span></span><br><span class="line">    .<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 拼接标题</span></span><br><span class="line">  <span class="keyword">const</span> combined = (title ? title.<span class="title function_">trim</span>() + <span class="string">&#x27;\n\n&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + content;</span><br></pre></td></tr></table></figure>
<p>但是大部分情况可以忽略这个配置项，留空即可。</p>
<ol start="9">
<li><p><code>max_token</code>：限制模型输入的最大字数，用字符串的slice进行截断，如果超出模型接受范围，可能会造成下文覆盖上文导致<code>prompt</code>丢失，内容混乱，所以请按照模型承受能力进行灵活配置。</p>
</li>
<li><p><code>concurrency</code>：很多模型会限制并发，所以这里我利用<code>p-limit</code>插件实现了并发限制，降低失败请求的概率，经过调查，<code>p-limit</code>应该是hexo内已经有的一些包，所以也不需要担心需要重新安装之类的，直接使用即可。</p>
</li>
</ol>
<h2 id="Hexo适配"><a href="#Hexo适配" class="headerlink" title="Hexo适配"></a>Hexo适配</h2><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>目前我们已经自动化了从AI中，喂我们的文章给AI，再生成摘要，再写到文件顶部的过程，下面我们开始进行从文件顶部渲染到网站页面上。</p>
<p>首先在主题配置文件_config.butterfly.yml文件中写入配置，方便我们进行控制摘要是否开启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章设置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章AI摘要是否开启，会自动检索文章色summary字段，若没有则不显示</span></span><br><span class="line">ai_summary:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  title: AI摘要</span><br><span class="line">  loadingText: 正在加载···</span><br><span class="line">  modelName: HunYuan-Lite</span><br></pre></td></tr></table></figure>
<p>这里的内容均为装饰性内容，除了enable选项，其他没有任何控制效果，都是装饰，所以无需担心，可以先按照我的写，后面再根据效果修改。</p>
<h3 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h3><p>下面找到主题文件下的&#x2F;themes&#x2F;butterfly&#x2F;layout&#x2F;post.pug文件，添加文件中指出来的两行内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  <span class="comment">#post</span></span><br><span class="line">    <span class="keyword">if</span> top_img === <span class="literal">false</span></span><br><span class="line">      include includes/header/post-info.pug</span><br><span class="line"></span><br><span class="line">    article#article-container.post-content</span><br><span class="line">+     <span class="keyword">if</span> page.summary &amp;&amp; theme.ai_summary.enable</span><br><span class="line">+       include includes/post/post-summary.pug</span><br><span class="line">      !=page.content</span><br><span class="line">    include includes/post/post-copyright.pug</span><br><span class="line">    .tag_share</span><br><span class="line">      <span class="keyword">if</span> (page.tags.length &gt; 0 &amp;&amp; theme.post_meta.post.tags)</span><br><span class="line">        .post-meta__tag-list</span><br><span class="line">          each item, index <span class="keyword">in</span> page.tags.data</span><br><span class="line">            a(href=url_for(item.path)).post-meta__tags <span class="comment">#[=item.name]</span></span><br><span class="line">      include includes/third-party/share/index.pug</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> theme.reward.enable &amp;&amp; theme.reward.QR_code</span><br><span class="line">      !=partial(<span class="string">&#x27;includes/post/reward&#x27;</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">    //- ad</span><br><span class="line">    <span class="keyword">if</span> theme.ad &amp;&amp; theme.ad.post</span><br><span class="line">      .ads-wrap!=theme.ad.post</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> theme.post_pagination</span><br><span class="line">      include includes/pagination.pug</span><br><span class="line">    <span class="keyword">if</span> theme.related_post &amp;&amp; theme.related_post.enable</span><br><span class="line">      != related_posts(page,site.posts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> page.comments !== <span class="literal">false</span> &amp;&amp; theme.comments.use</span><br><span class="line">      - var commentsJsLoad = <span class="literal">true</span></span><br><span class="line">      !=partial(<span class="string">&#x27;includes/third-party/comments/index&#x27;</span>, &#123;&#125;, &#123;cache: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意缩进，pug作为预编译语言，对缩进的要求极为严格，在该文件中，应该是两个空格一缩进。</p>
<p>下面添加组件，创建文件&#x2F;root&#x2F;theme&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;post&#x2F;post-summary.pug，写入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.ai-summary</span><br><span class="line">    .ai-explanation(style=<span class="string">&quot;display: block;&quot;</span> data-summary=page.summary)=theme.ai_summary.loadingText</span><br><span class="line">    .ai-title </span><br><span class="line">        .ai-title-left </span><br><span class="line">            i.fa-brands.fa-slack</span><br><span class="line">            .ai-title-text=theme.ai_summary.title</span><br><span class="line">        .ai-tag#ai-tag= theme.ai_summary.modelName</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><p>这样，html部分就实现好了！下面我们添加样式部分，创建文件&#x2F;themes&#x2F;butterfly&#x2F;source&#x2F;css&#x2F;_layout&#x2F;ai-summary.styl文件，写入：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// ===================</span><br><span class="line">// 🌗 主题变量定义（仅使用项）</span><br><span class="line">// ===================</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  // ai_summary</span><br><span class="line">  <span class="attr">--liushen-title-font-color</span>: <span class="number">#0883b7</span></span><br><span class="line">  --liushen-maskbg: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>)</span><br><span class="line">  --liushen-ai-bg: <span class="built_in">conic-gradient</span>(from <span class="number">1.5708rad</span> at <span class="number">50%</span> <span class="number">50%</span>, <span class="number">#d6b300</span> <span class="number">0%</span>, <span class="number">#42A2FF</span> <span class="number">54%</span>, <span class="number">#d6b300</span> <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line">  // card 背景</span><br><span class="line">  --liushen-card-secondbg: <span class="number">#f1f3f8</span></span><br><span class="line"></span><br><span class="line">  // text</span><br><span class="line">  --liushen-text: <span class="number">#4c4948</span></span><br><span class="line">  --liushen-secondtext: <span class="number">#3c3c43cc</span></span><br><span class="line"></span><br><span class="line">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span><br><span class="line">  // ai_summary</span><br><span class="line">  --liushen-title-font-color: <span class="number">#0883b7</span></span><br><span class="line">  --liushen-maskbg: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>)</span><br><span class="line">  --liushen-ai-bg: <span class="built_in">conic-gradient</span>(from <span class="number">1.5708rad</span> at <span class="number">50%</span> <span class="number">50%</span>, <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">178</span>, <span class="number">0</span>, <span class="number">0.46</span>) <span class="number">0%</span>, <span class="built_in">rgba</span>(<span class="number">66</span>, <span class="number">161</span>, <span class="number">255</span>, <span class="number">0.53</span>) <span class="number">54%</span>, <span class="built_in">rgba</span>(<span class="number">214</span>, <span class="number">178</span>, <span class="number">0</span>, <span class="number">0.49</span>) <span class="number">100%</span>)</span><br><span class="line"></span><br><span class="line">  // card 背景</span><br><span class="line">  --liushen-card-secondbg: <span class="number">#3e3f41</span></span><br><span class="line"></span><br><span class="line">  // text</span><br><span class="line">  --liushen-text: <span class="number">#ffffffb3</span></span><br><span class="line">  --liushen-secondtext: <span class="number">#a1a2b8</span></span><br><span class="line"></span><br><span class="line">// ===================</span><br><span class="line">// 📘 AI 摘要模块样式</span><br><span class="line">// ===================</span><br><span class="line"></span><br><span class="line">if <span class="built_in">hexo-config</span>(<span class="string">&#x27;ai_summary.enable&#x27;</span>)</span><br><span class="line">  .ai-summary</span><br><span class="line">    background-color <span class="built_in">var</span>(--liushen-maskbg)</span><br><span class="line">    background <span class="built_in">var</span>(--liushen-card-secondbg)</span><br><span class="line">    border-radius <span class="number">12px</span></span><br><span class="line">    padding <span class="number">8px</span> <span class="number">8px</span> <span class="number">12px</span> <span class="number">8px</span></span><br><span class="line">    line-height <span class="number">1.3</span></span><br><span class="line">    flex-direction column</span><br><span class="line">    margin-bottom <span class="number">16px</span></span><br><span class="line">    display flex</span><br><span class="line">    gap <span class="number">5px</span></span><br><span class="line">    position relative</span><br><span class="line"></span><br><span class="line">    &amp;::before</span><br><span class="line">      content <span class="string">&#x27;&#x27;</span></span><br><span class="line">      position absolute</span><br><span class="line">      top <span class="number">0</span></span><br><span class="line">      left <span class="number">0</span></span><br><span class="line">      width <span class="number">100%</span></span><br><span class="line">      height <span class="number">100%</span></span><br><span class="line">      z-index <span class="number">1</span></span><br><span class="line">      filter <span class="built_in">blur</span>(<span class="number">8px</span>)</span><br><span class="line">      opacity .<span class="number">4</span></span><br><span class="line">      background-image <span class="built_in">var</span>(--liushen-ai-bg)</span><br><span class="line">      transform <span class="built_in">scaleX</span>(<span class="number">1</span>) <span class="built_in">scaleY</span>(.<span class="number">95</span>) <span class="built_in">translateY</span>(<span class="number">2px</span>)</span><br><span class="line">    </span><br><span class="line">    &amp;::after</span><br><span class="line">      content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="built_in">var</span>(--liushen-maskbg);</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.ai-explanation</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">10</span></span><br><span class="line">      <span class="attribute">padding</span> <span class="number">8px</span> <span class="number">12px</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">15px</span></span><br><span class="line">      <span class="attribute">line-height</span> <span class="number">1.4</span></span><br><span class="line">      <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-text</span>)</span><br><span class="line">      <span class="attribute">text-align</span> justify</span><br><span class="line"></span><br><span class="line">      // ✅ 打字机光标动画</span><br><span class="line">      &amp;<span class="selector-pseudo">::after</span></span><br><span class="line">        <span class="attribute">content</span> &#x27;&#x27;</span><br><span class="line">        <span class="attribute">display</span> inline-block</span><br><span class="line">        <span class="attribute">width</span> <span class="number">8px</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">2px</span></span><br><span class="line">        <span class="attribute">margin-left</span> <span class="number">2px</span></span><br><span class="line">        <span class="attribute">background</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-text</span>)</span><br><span class="line">        <span class="attribute">vertical-align</span> <span class="attribute">bottom</span></span><br><span class="line">        <span class="attribute">animation</span> blink-underline <span class="number">1s</span> ease-in-out infinite</span><br><span class="line">        <span class="attribute">transition</span> <span class="attribute">all</span> .<span class="number">3s</span></span><br><span class="line">        <span class="attribute">position</span> relative</span><br><span class="line">        <span class="attribute">bottom</span> <span class="number">3px</span></span><br><span class="line"></span><br><span class="line">      // 平滑滚动动画</span><br><span class="line">      // <span class="selector-class">.char</span></span><br><span class="line">      //   <span class="attribute">display</span> inline-block</span><br><span class="line">      //   <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">      //   <span class="attribute">animation</span> chat-<span class="attribute">float</span> .<span class="number">5s</span> ease forwards</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.ai-title</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">10</span></span><br><span class="line">      <span class="attribute">font-size</span> <span class="number">14px</span></span><br><span class="line">      <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">      <span class="attribute">border-radius</span> <span class="number">8px</span></span><br><span class="line">      <span class="attribute">align-items</span> center</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">padding</span> <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">      <span class="attribute">cursor</span> default</span><br><span class="line">      <span class="attribute">user-select</span> <span class="attribute">none</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.ai-title-left</span></span><br><span class="line">        <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-title-font-color</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">i</span></span><br><span class="line">          <span class="attribute">margin-right</span> <span class="number">3px</span></span><br><span class="line">          <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">          <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-title-font-color</span>)</span><br><span class="line">          <span class="attribute">border-radius</span> <span class="number">20px</span></span><br><span class="line">          <span class="attribute">justify-content</span> center</span><br><span class="line">          <span class="attribute">align-items</span> center</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.ai-title-text</span></span><br><span class="line">          <span class="attribute">font-weight</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.ai-tag</span></span><br><span class="line">        <span class="attribute">color</span> <span class="selector-tag">var</span>(<span class="attr">--liushen-secondtext</span>)</span><br><span class="line">        <span class="attribute">font-weight</span> <span class="number">300</span></span><br><span class="line">        <span class="attribute">margin-left</span> auto</span><br><span class="line">        <span class="attribute">display</span> <span class="attribute">flex</span></span><br><span class="line">        <span class="attribute">align-items</span> center</span><br><span class="line">        <span class="attribute">justify-content</span> center</span><br><span class="line">        <span class="attribute">transition</span> .<span class="number">3s</span></span><br><span class="line"></span><br><span class="line">  // 平滑滚动动画</span><br><span class="line">  // <span class="keyword">@keyframes</span> chat-float</span><br><span class="line">  //   <span class="number">0%</span> </span><br><span class="line">  //     opacity <span class="number">0</span></span><br><span class="line">  //     transform translateY(<span class="number">20px</span>)</span><br><span class="line">  //   <span class="number">100%</span> </span><br><span class="line">  //       opacity <span class="number">1</span></span><br><span class="line">  //       transform translateY(<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  // ✅ 打字机光标闪烁动画</span><br><span class="line">  @keyframes blink-underline</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span></span><br><span class="line">      opacity <span class="number">1</span></span><br><span class="line">    <span class="number">50%</span></span><br><span class="line">      opacity <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>样式也实现啦！目前就差将我们的摘要插入到我们的网站就大功告成啦，为了实现的更加逼真，我这里实现了两种样式一个是打字机效果，一个是平滑显示效果，可以按需引入：</p>
<h3 id="添加核心JS"><a href="#添加核心JS" class="headerlink" title="添加核心JS"></a>添加核心JS</h3><p>下面我会介绍两种动效，可以按照自己的需求在任意js文件中选择一个引入即可，两个的区别是，打字机效果更加的节省性能，而平滑显示，因为每个文本为一个span，所以会比较耗费性能。</p>
<h4 id="打字机效果"><a href="#打字机效果" class="headerlink" title="打字机效果"></a>打字机效果</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打字机效果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">typeTextMachineStyle</span>(<span class="params">text, targetSelector, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        delay = <span class="number">50</span>,</span><br><span class="line">        startDelay = <span class="number">2000</span>,</span><br><span class="line">        onComplete = <span class="literal">null</span>,</span><br><span class="line">        clearBefore = <span class="literal">true</span>,</span><br><span class="line">        eraseBefore = <span class="literal">true</span>, <span class="comment">// 新增：是否以打字机方式清除原文本</span></span><br><span class="line">        eraseDelay = <span class="number">30</span>,    <span class="comment">// 新增：删除每个字符的间隔</span></span><br><span class="line">    &#125; = options;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(targetSelector);</span><br><span class="line">    <span class="keyword">if</span> (!el || <span class="keyword">typeof</span> text !== <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">startTyping</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">renderChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt;= text.<span class="property">length</span>) &#123;</span><br><span class="line">                    el.<span class="property">textContent</span> = text.<span class="title function_">slice</span>(<span class="number">0</span>, index++);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(renderChar, delay);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    onComplete &amp;&amp; <span class="title function_">onComplete</span>(el);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">renderChar</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clearBefore) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eraseBefore &amp;&amp; el.<span class="property">textContent</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> currentText = el.<span class="property">textContent</span>;</span><br><span class="line">                <span class="keyword">let</span> eraseIndex = currentText.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">function</span> <span class="title function_">eraseChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (eraseIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        el.<span class="property">textContent</span> = currentText.<span class="title function_">slice</span>(<span class="number">0</span>, --eraseIndex);</span><br><span class="line">                        <span class="built_in">setTimeout</span>(eraseChar, eraseDelay);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">startTyping</span>(); <span class="comment">// 删除完毕后开始打字</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="title function_">eraseChar</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                el.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="title function_">startTyping</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">startTyping</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, startDelay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderAISummary</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> summaryEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ai-summary .ai-explanation&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!summaryEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> summaryText = summaryEl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-summary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (summaryText) &#123;</span><br><span class="line">        <span class="title function_">typeTextMachineStyle</span>(summaryText, <span class="string">&quot;.ai-summary .ai-explanation&quot;</span>); <span class="comment">// 如果需要切换，在这里调用另一个函数即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, renderAISummary);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, renderAISummary);</span><br></pre></td></tr></table></figure>
<p>本站使用的就是打字机效果，可以自行查看。</p>
<h4 id="平滑显示效果"><a href="#平滑显示效果" class="headerlink" title="平滑显示效果"></a>平滑显示效果</h4><p>这个我没有测试，如果好奇可以自行部署并尝试：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 平滑弹出效果</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">typeText</span>(<span class="params">text, targetSelector, options = &#123;&#125;</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123;</span><br><span class="line">       delay = <span class="number">50</span>,          <span class="comment">// 每个字符之间的延迟（毫秒）</span></span><br><span class="line">       startDelay = <span class="number">2000</span>,   <span class="comment">// 开始打字前的延迟（默认 3 秒）</span></span><br><span class="line">       onComplete = <span class="literal">null</span>,   <span class="comment">// 动画完成后的回调</span></span><br><span class="line">       clearBefore = <span class="literal">true</span>   <span class="comment">// 是否在开始前清空原有内容</span></span><br><span class="line">     &#125; = options;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> targetEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(targetSelector);</span><br><span class="line">     <span class="keyword">if</span> (!targetEl || <span class="keyword">typeof</span> text !== <span class="string">&quot;string&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// if (clearBefore) targetEl.textContent = &quot;&quot;;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">let</span> frameId = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">renderChar</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (index &lt; text.<span class="property">length</span>) &#123;</span><br><span class="line">         <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">         span.<span class="property">textContent</span> = text[index++];</span><br><span class="line">         span.<span class="property">className</span> = <span class="string">&quot;char&quot;</span>;</span><br><span class="line">         targetEl.<span class="title function_">appendChild</span>(span);</span><br><span class="line">         frameId = <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> <span class="built_in">setTimeout</span>(renderChar, delay));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="title function_">cancelAnimationFrame</span>(frameId);</span><br><span class="line">         onComplete &amp;&amp; <span class="title function_">onComplete</span>(targetEl);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (clearBefore) targetEl.<span class="property">textContent</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="title function_">renderChar</span>();</span><br><span class="line">     &#125;, startDelay);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderAISummary</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> summaryEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ai-summary .ai-explanation&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!summaryEl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> summaryText = summaryEl.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-summary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (summaryText) &#123;</span><br><span class="line">        <span class="title function_">typeText</span>(summaryText, <span class="string">&quot;.ai-summary .ai-explanation&quot;</span>); <span class="comment">// 如果需要切换，在这里调用另一个函数即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, renderAISummary);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, renderAISummary);</span><br></pre></td></tr></table></figure>
<p>注意，平滑滚动部分的css，我默认注释掉了，请在样式文件中自行打开注释。</p>
<p>这样，一个自己实现的AI摘要就完工啦！</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c;hexo g</span><br></pre></td></tr></table></figure>
<p>如果一切正常，应该可以在每篇文章的顶部看到对应的摘要文段。</p>
<blockquote>
<p>由于该插件修改了头部，虽然修改的流程严格按照hexo的要求，写回头部的流程类似于<code>Hexo-abbrlink</code>，写入后不可撤回，并且由于AI具有不可控性，请运行前注意备份，防止在所有文章顶部生成不必要的内容，难以清理，特别是仅有一份源码在本地的朋友，注意勤备份。</p>
</blockquote>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.liushen.fun/posts/40702a0d/">本地实现HEXO文章AI摘要</a><br><a href="https://github.com/rootlexme/hexo-ai-excerpt">hexo-ai-excerpt</a></p>
]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>butterfly</tag>
        <tag>AI摘要生成</tag>
      </tags>
  </entry>
  <entry>
    <title>五大方法提高网站排名</title>
    <url>/archives/d9f9c7be.html</url>
    <content><![CDATA[<p>很多人问我，而且反复的问我，我的网站排名怎么一直上不去？我的网站排名怎么又掉了？最近百度大更新，我的网站被K了，怎么回事？不同的问题，但是回答的内容大同小异，今天<a href="https://www.codeobservatory.cn/">码农观测站</a>总结了五个方法提高网站排名，希望对你们有帮助。</p>
<h2 id="一、做好站内优化"><a href="#一、做好站内优化" class="headerlink" title="一、做好站内优化"></a>一、做好站内优化</h2><p>网站上线之前，做好站内优化，站内优化直接影响网站的收录情况。一般上线之后，是不需要再调整站内的布局及结构。但是可以根据网站的搜索引擎的排名情况，分析原因所在，可以适当的调整。一般情况下，影响排名的站内因素有：</p>
<ol>
<li>关键词没有定位好。我们要让关键词明确，适当的给关键词加粗，斜体，引起蜘蛛的注意，并且在站内做好锚文本加上指向首页的连接。</li>
<li>首页权重被内页负累。每个内页都要有关键词做锚文本指向首页，将权重传递给首页，内页做好关联连接即可。另一个增加首页权重的方法，就是次导航。我们将关键词做在次导航，并且至上首页，这样可以很好的提高网站首页的权重。</li>
<li>百度排名最近一直动荡，南京SEO顾问的排名一直在第二到第七之间不停的变动，一天能上下好几回。有变动，就有提高。搜索引擎的计算方法一直是发展的，也将会更加严谨，科学，合理。黑帽手法一直是被搜索殷勤所打击的，黑猫手法发挥的空间也越来越小。所以在网站内避免使用黑帽排名手法，包括关键词堆砌，隐藏关键词等手法，都是不可取的，这样你的网站很容易被搜索引擎拒绝收录。</li>
</ol>
<h2 id="二、做好站内静态页面文章更新"><a href="#二、做好站内静态页面文章更新" class="headerlink" title="二、做好站内静态页面文章更新"></a>二、做好站内静态页面文章更新</h2><p>静态页面一直是搜索引擎比较喜欢的，会加速收录，一般做网站的人都喜欢选择静态页面。做好静态页面的文章更新，最好的方法就是原创，当然伪原创也是有效方法。</p>
<ol>
<li>如果是伪原创，在页面的头部插入图片，加上alt标签，这个会让搜索引擎认为是原创的内容，提高文章的收录，有利于排名。</li>
<li>每个静态页面下均加入次导航，做好关键词锚文本指向首页。</li>
<li>在更新的文章中间，多次加入网站关键词并且适当加粗，加上链接指向首页。</li>
</ol>
<p>做好这三个工作，网站静态页面的更新，就可以轻松完成。</p>
<h2 id="三、友情链接的交换"><a href="#三、友情链接的交换" class="headerlink" title="三、友情链接的交换"></a>三、友情链接的交换</h2><p>交换友链一直是网站排名优化的工作内容之一，不可缺少。一个高权重的友链不但可以带动你的网站的权重，并且对排名有非常大的帮助，有时甚至会直接冲在首页。可以看出，友链是很重要的一个外链所在。一般在交换友链时，我们需要考虑的因素有：</p>
<ol>
<li>查看对方的pr值是否比你低。鉴于交换友链的出发点，不会跟比自己pr低的网站去交换友链的。</li>
<li>查看对方页面的收录情况。一般情况是找收录量大的网站做友情链接。</li>
<li>查看对方快照更新情况。看对方是否及时更新，还有最近的收录情况。</li>
<li>查看对方的外链情况。包括友链和外链，友链一般超过30个，就不要再交换了，因为这样意义不大。查看对方外链的收录量，一般选择外链收录多的网站交换。</li>
<li>查看对方网站是否被处罚过，如果被处罚过，交换友链就没有必要了，因为对方网站可能被屏蔽状态或者没有好的排名。</li>
<li>找一些权重比较高的友情链接平台，输入网站关键词和连接，既是一个外链，也可以让别人找到你，增加交换友链的可选择性。最好寻找有相关性的网站交换友链。</li>
</ol>
<h2 id="四、原创软文的推广"><a href="#四、原创软文的推广" class="headerlink" title="四、原创软文的推广"></a>四、原创软文的推广</h2><p>原创软文推广，一直是最好的外链推广方式，可以再做好外链的同时，还能增加网站的流量及品牌形象。</p>
<ol>
<li>软文的内容范围比较广，不一定要写跟网站相关的内容，只要写出来对别人有帮助，大家感兴趣的，适当的在文中加入网站的连接和关键词就行了。</li>
<li>将软文放在一些知名度高，基本也是权重比较高的网站上发布，这样带来的人气是很高的，推广的效果比较明显。</li>
<li>每篇软文的关键词要有所区别，加入的数量不要多，可以在结尾的时候加上一个就行了。</li>
<li>软文的内容广告性质不要表露出来，链接地址出现一次就行。太明显，可能就不能问世。</li>
<li>软文最好是每天一两篇，这样做提高网站排名是非常有利的，而且能很快看到效果。</li>
</ol>
<h2 id="五、大型论坛和问答平台做外链的方法"><a href="#五、大型论坛和问答平台做外链的方法" class="headerlink" title="五、大型论坛和问答平台做外链的方法"></a>五、大型论坛和问答平台做外链的方法</h2><p>很多人在发帖子，会帖子，或者做问答的时候，都会很郁闷的一件事就是，帖子总是被删掉，或者干脆账号被封掉，问答提交上去，一直审核，然后直接无视。如果不去总结或者学习方法，这种工作会变得枯燥乏味。</p>
<ol>
<li>发帖内容要跟论坛的主体是相关的，帖子的内容不一定跟你的网站内容相关，但是要跟论坛的主题相关。</li>
<li>最好是原创内容，如果不是原创，那么请认真的伪原创。</li>
<li>发帖内容不要是广告，一般广告贴几乎都会被秒杀过滤掉。</li>
<li>不要带一些敏感字，有带敏感字的，论坛程序会直接过滤。</li>
</ol>
<p>做好以上五点，你会惊喜的发现，你的排名正在默默的往前推进，持续地做好以上五点，你会发现，你的同行正在慢慢的退到你的身后。</p>
]]></content>
      <categories>
        <category>SEO笔记</category>
      </categories>
      <tags>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建自己个人博客？我的个人博客</title>
    <url>/archives/5dbf5225.html</url>
    <content><![CDATA[<p>经过好几天的鼓捣，我的<a href="https://www.codeobservatory.cn/">个人博客</a>终于搭建完成了。为了提高网站安全性我把http协议升级成了https的, 带有传输加密的协议能保证传输的安全而且可以防止篡改网站的网页；网站的访问速度也不能慢！为此我有花费了一些时间配置了CDN，现在通过<a href="http://www.veihcao.net/">www.veihcao.net</a> 地址访问我的博客是加速的，因为CDN不能配置直接二级域名因此通过veihcao.net 地址访问是不加速的。</p>
<p>我给我的个人博客起了个温馨的名字——微超之家博客，在技术日新月异的今天，很多人的博客不是放水就是抄袭，这样的博客写的再多也是无用功的，只是在浪费时间罢了，说到底这是缺乏博客精神的表现。我建博客的目的是为了给广大编程爱好者、程序员分享专业的编程知识，和一群编程爱好者学习软件编程、网络编程、数据库、建站技术、网络知识技术。来到我的网站就像回到了程序员的家一样，所以我的博客名字就叫”微超之家”。</p>
<p><img src="/images/e0a13286dc6c5cf.png" alt="个人博客首页"></p>
<p>唠叨了这么多，今天给大家说下自建博客的一些过程吧，毕竟自己有个站点是很cool的事情！</p>
<p>建站大概有这几个方面：购买服务器、购买域名、备案、部署、配置网站服务.</p>
<p>对于个人博客，在访问量不高的情况下一个1核2G的就够了，学生在阿里云、百度云、腾讯云购买这样的服务器很便宜，有学生优惠。关于服务器这方面比较重要的是安全性，我有个朋友前段时间也搭建了个人博客，因为安全性做的不好数据库被入侵中了勒索病毒，无奈重建博客，这都是安全性没有得到重视造成结果。提高安全性的办事一般可以关闭不使用的端口，使用更安全的协议连接访问服务器，如https、ssh秘钥，网站如果前后台分离可以分开部署，然后使用不同的域名访问，另外，密码也是个重点，要避免使用过于简单的。</p>
<p>关于域名，尽量申请简单好记的就行了，域名申请后的一个重点就是备案了，这个时间通常比较慢，少则一两周，多则一两月，因此只有服务器和域名都有后直接去备案，备案每个省里都不一样，具体可以参考相关政策和要求。我是在阿里云上备案，在手机app上进行的，总体还是比较方便的。备案过程需要一堆填个人信息和网站的一些资料，如：身份证、网站名称、网站类型、网站介绍等等。信息中不能出现错别字，网站名字不能包含“新闻”，“政府”，“博客”等等总之比较繁琐，网站介绍中也不能包含一些关键词，如果不符合条件会被打回来重填这也是我在整个博客搭建过程中吐槽最多的。</p>
<p>部署需要熟悉Windows操作，然后根据具体博客技术栈选择相应的服务即可，如果是.net开发的博客通常使用(Windows+IIS+SQLSERVER+HTML)架构，如果是Java后端开发的通常Nginx+Tomcat+Mysql部署，如果服务器只有少量服务那就没必要用docker了。虽然说Apache对PHP支持的比较好，但是这些年来因为性能问题用的越来越少，而新秀Nginx因支持的并发高后和资源利用率更高而后来居上，目前Nginx也能代理PHP，所以推荐把Apache换成Nginx作为静态资源服务器，我小组的官网就是用Nginx代理的PHP目前使用无问题。市面上的服务器软件有很多，部署方式也有很多，通常个人网站采用这两种结构相对来说比较不错。</p>
<p>部署完网站，剩下的就是提高安全性和访问体验。网站访问协议有http和https，建议都用https，前面已经提到这样的网站比较安全，用户访问体验比较好，毕竟没人喜欢访问的时候有安全提示，另外，使用https协议访问的网站在搜索引擎中排名会更靠前收录的几率更大。提高网站体验的一个重点是网站访问速度，将网站缓存到CDN就是一种加速网站访问的方式，在使用对象存储OSS时也能用CDN进行加速，加速的文件传输速度，网站体验会更好。</p>
<p>程序员应该都有自建网站想法，有的话就去尝试吧，会有不一样的收获，祝你早日成功建站。</p>
]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-butterfly友情链接页面优化</title>
    <url>/archives/29606f1.html</url>
    <content><![CDATA[<h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><blockquote>
<p><a href="/link/">👉效果和本站友链一样</a></p>
</blockquote>
<h2 id="首先生成link页面"><a href="#首先生成link页面" class="headerlink" title="首先生成link页面"></a>首先生成link页面</h2><p>在 Hexo 博客根目录 [Blogroot]下打开终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="built_in">link</span></span><br></pre></td></tr></table></figure>
<p>打开[Blogroot]\source\link\index.md,添加一行type: ‘link’:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2025-05-21 17:32:19</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<h2 id="创建数据文件"><a href="#创建数据文件" class="headerlink" title="创建数据文件"></a>创建数据文件</h2><p>新建文件[Blogroot]\source_data\link.yml,没有_data文件夹的话也请自己新建。以下是默认友链格式示例。打开[Blogroot]\source_data\link.yml，输入：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flink_style: butterfly / flexcard</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">这里的每个站点，都耐人寻味……</span></span><br><span class="line">  <span class="attr">flink_style:</span> <span class="string">flexcard</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">码农观测站</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.codeobservatory.cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://www.codeobservatory.cn/img/butterfly-icon.webp</span></span><br><span class="line">      <span class="attr">siteshot:</span> <span class="string">https://www.codeobservatory.cn/images/shot.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">技术分享，编程学习</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">技术</span></span><br></pre></td></tr></table></figure>
<h2 id="打开link菜单"><a href="#打开link菜单" class="headerlink" title="打开link菜单"></a>打开link菜单</h2><p>取消[Blogroot]_config.butterfly.yml中menu配置项内link页面的注释（这里我已改成中文【友链】）。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="comment"># List||fas fa-list||hide:     # 移动端隐藏子菜单</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure>
<h2 id="替换模板文件"><a href="#替换模板文件" class="headerlink" title="替换模板文件"></a>替换模板文件</h2><p>替换[Blogroot]\themes\butterfly\layout\includes\page\flink.pug</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.container</span><br><span class="line">  <span class="keyword">if</span> top_img === <span class="literal">false</span></span><br><span class="line">    h1.page-title= page.title</span><br><span class="line">  .flink</span><br><span class="line">    <span class="keyword">if</span> site.data.link</span><br><span class="line">      each i <span class="keyword">in</span> site.data.link</span><br><span class="line">        <span class="keyword">if</span> i.class_name</span><br><span class="line">          h2!= i.class_name</span><br><span class="line">        <span class="keyword">if</span> i.class_desc</span><br><span class="line">          .flink-desc!=i.class_desc        </span><br><span class="line">        <span class="keyword">if</span> i.flink_style === <span class="string">&#x27;flexcard&#x27;</span></span><br><span class="line">          .flexcard-flink-list</span><br><span class="line">            each item <span class="keyword">in</span> i.link_list</span><br><span class="line">              a.flink-list-card(href=url_for(item.link) target=<span class="string">&#x27;_blank&#x27;</span> data-title=item.descr)</span><br><span class="line">                .wrapper.cover</span><br><span class="line">                  <span class="keyword">if</span> item.type</span><br><span class="line">                    .is-type.is-type-0!=item.type</span><br><span class="line">                  - var siteshot = item.siteshot ? url_for(item.siteshot) : <span class="string">&#x27;https://image.thum.io/get/width/400/crop/800/allowJPG/wait/20/noanimate/&#x27;</span> + item.link</span><br><span class="line">                  <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                    img.cover.fadeIn(data-lazy-src=siteshot onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.post_page) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    img.cover.fadeIn(src=siteshot onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.post_page) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                .info</span><br><span class="line">                  <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                    img.flink-avatar(data-lazy-src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    img(src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=<span class="string">&#x27;&#x27;</span> )</span><br><span class="line">                  span.flink-sitename= item.name</span><br><span class="line">                  span.flink-sitedesc(title=item.descr)= item.descr</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> i.flink_style === <span class="string">&#x27;butterfly&#x27;</span></span><br><span class="line">          .butterfly-flink-list</span><br><span class="line">            each item <span class="keyword">in</span> i.link_list</span><br><span class="line">              .flink-list-item</span><br><span class="line">                a(href=url_for(item.link)  title=item.name target=<span class="string">&quot;_blank&quot;</span>)</span><br><span class="line">                  .flink-item-icon</span><br><span class="line">                    <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                      img(data-lazy-src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=item.name )</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                      img(src=url_for(item.avatar) onerror=`this.onerror=null;this.src=<span class="string">&#x27;` + url_for(theme.error_img.flink) + `&#x27;</span>` alt=item.name )</span><br><span class="line">                  .flink-item-info</span><br><span class="line">                    .flink-item-name= item.name</span><br><span class="line">                    .flink-item-desc(title=item.descr)= item.descr          </span><br><span class="line">    != page.content</span><br></pre></td></tr></table></figure>
<h2 id="替换样式文件"><a href="#替换样式文件" class="headerlink" title="替换样式文件"></a>替换样式文件</h2><p>替换[Blogroot]\themes\butterfly\source\css_page\flink.styl</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  <span class="selector-class">.flink</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span></span><br><span class="line">    <span class="selector-class">.flink-desc</span></span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> .<span class="number">6rem</span> <span class="meta">!important</span></span><br><span class="line">    <span class="selector-class">.butterfly-flink-list</span></span><br><span class="line">      <span class="attribute">overflow</span>: auto</span><br><span class="line">      <span class="attribute">text-align</span>: center</span><br><span class="line"></span><br><span class="line">      &amp; &gt; <span class="selector-class">.flink-list-item</span></span><br><span class="line">        <span class="attribute">position</span>: relative</span><br><span class="line">        <span class="attribute">float</span>: left</span><br><span class="line">        <span class="attribute">overflow</span>: hidden</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">7px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">3</span> - <span class="number">15px</span>)</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">90px</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">17px</span></span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">addBorderRadius</span>(<span class="number">8</span>)</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#49b1f514</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth1024</span>()</span><br><span class="line">          <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">15px</span>) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth600</span>()</span><br><span class="line">          <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">15px</span>) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="selector-class">.flink-item-icon</span></span><br><span class="line">            <span class="attribute">margin-left</span>: -<span class="number">10px</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">position</span>: absolute</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">right</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">bottom</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">          <span class="attribute">z-index</span>: -<span class="number">1</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">var</span>(--text-bg-hover)</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="attribute">transition</span>: transform .<span class="number">3s</span> ease-out</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">        <span class="selector-pseudo">&amp;:focus</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">        <span class="selector-pseudo">&amp;:active</span><span class="selector-pseudo">:before</span></span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color)</span><br><span class="line">          <span class="attribute">text-decoration</span>: none</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.flink-item-icon</span></span><br><span class="line">            <span class="attribute">float</span>: left</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">10px</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">60px</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">60px</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">30%</span></span><br><span class="line">            <span class="attribute">transition</span>: width .<span class="number">3s</span> ease-out</span><br><span class="line"></span><br><span class="line">            <span class="selector-tag">img</span></span><br><span class="line">              <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">              <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">              <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span>, transform .<span class="number">3s</span></span><br><span class="line">              <span class="attribute">object-fit</span>: cover</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.img-alt</span></span><br><span class="line">            <span class="attribute">display</span>: none</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">:hover</span> </span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flexcard-flink-list</span></span><br><span class="line">      <span class="attribute">display</span>: flex</span><br><span class="line">      <span class="attribute">flex-wrap</span>: wrap</span><br><span class="line">      <span class="attribute">justify-content</span>: flex-start</span><br><span class="line">      <span class="attribute">margin</span>: -<span class="number">8px</span></span><br><span class="line">      <span class="attribute">align-items</span>: stretch</span><br><span class="line">      &gt; <span class="selector-class">.flink-list-card</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">8px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> / <span class="number">4</span> - <span class="number">16px</span>)</span><br><span class="line">        <span class="attribute">display</span>: block</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.4</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">text-decoration</span>:none</span><br><span class="line">        <span class="selector-class">.cover</span></span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">          <span class="attribute">height</span>: <span class="number">120px</span></span><br><span class="line">          <span class="attribute">overflow</span>: hidden</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">6px</span></span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>)</span><br><span class="line">          <span class="attribute">background</span>: <span class="number">#f6f6f6</span></span><br><span class="line">          <span class="attribute">position</span>: relative</span><br><span class="line">          <span class="selector-class">.is-type</span></span><br><span class="line">            <span class="attribute">position</span>: absolute</span><br><span class="line">            <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">10</span></span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span></span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">8px</span></span><br><span class="line">            <span class="attribute">font-size</span>: .<span class="number">6rem</span></span><br><span class="line">            <span class="attribute">background-color</span>: <span class="built_in">var</span>(--btn-bg)</span><br><span class="line">          <span class="selector-tag">img</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">            <span class="attribute">pointer-events</span>: none</span><br><span class="line">            <span class="attribute">transition</span>: transform <span class="number">2s</span> ease</span><br><span class="line">            <span class="attribute">object-fit</span>: cover </span><br><span class="line">                 </span><br><span class="line">        <span class="selector-class">.info</span></span><br><span class="line">          <span class="attribute">margin-top</span>: <span class="number">8px</span></span><br><span class="line">          <span class="selector-tag">img</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">32px</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">32px</span></span><br><span class="line">            <span class="attribute">pointer-events</span>: none</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">16px</span></span><br><span class="line">            <span class="attribute">float</span>: left</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto .<span class="number">1rem</span> <span class="meta">!important</span></span><br><span class="line">            <span class="attribute">margin-right</span>: <span class="number">8px</span> <span class="meta">!important</span></span><br><span class="line">          <span class="selector-class">.flink-sitename</span></span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">600</span></span><br><span class="line">            <span class="attribute">font-size</span>: <span class="built_in">var</span>(--global-font-size)</span><br><span class="line">            <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color)</span><br><span class="line">            <span class="attribute">display</span>: -webkit-box</span><br><span class="line">            -webkit-<span class="attribute">box-orient</span>: vertical</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">            -webkit-line-clamp: <span class="number">1</span></span><br><span class="line">            <span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">            -moz-<span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">            -webkit-<span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">            -o-<span class="attribute">transition</span>: all <span class="number">0.28s</span> ease</span><br><span class="line">          <span class="selector-class">.flink-sitedesc</span></span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">4px</span> <span class="meta">!important</span></span><br><span class="line">            <span class="attribute">font-size</span>: <span class="built_in">var</span>(--global-font-size);</span><br><span class="line">            <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">1.2</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#888</span></span><br><span class="line">            <span class="attribute">display</span>: -webkit-box</span><br><span class="line">            -webkit-<span class="attribute">box-orient</span>: vertical</span><br><span class="line">            <span class="attribute">overflow</span>: hidden</span><br><span class="line">            -webkit-line-clamp: <span class="number">2</span></span><br><span class="line">      <span class="selector-pseudo">:hover</span></span><br><span class="line">        <span class="selector-class">.cover</span>  </span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>), <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)  </span><br><span class="line">        <span class="selector-class">.flink-sitename</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--tzy-theme) <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flink-item-name</span></span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.limit-one-line</span></span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span></span><br><span class="line">      <span class="attribute">font-weight</span>: bold</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.43em</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flink-item-desc</span></span><br><span class="line">      <span class="keyword">@extend</span> <span class="selector-class">.limit-one-line</span></span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">10px</span> <span class="number">16px</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">50px</span></span><br><span class="line">      <span class="attribute">font-size</span>: .<span class="number">93em</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.flink-name</span></span><br><span class="line">      <span class="attribute">margin-bottom</span>: <span class="number">5px</span></span><br><span class="line">      <span class="attribute">font-weight</span>: bold</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.5em</span></span><br></pre></td></tr></table></figure>
<p>这里需要注意的是需要在source&#x2F;_data&#x2F;link.yml添加配置项</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flink_style:</span> <span class="string">flexcard</span> <span class="string">||</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>
<p>该参数可选值flexcard或者butterfly分别对应两种样式。<br>全部保存好之后，一键三连查看效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo c; hexo g;hexo s </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-butterfly文章顶部添加波浪效果</title>
    <url>/archives/2aebdcfd.html</url>
    <content><![CDATA[<h2 id="开始步骤"><a href="#开始步骤" class="headerlink" title="开始步骤"></a>开始步骤</h2><p>修改 themes&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;header&#x2F;index.pug 大概第 33 行左右</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if top_img !== false</span><br><span class="line">  if is_post()</span><br><span class="line">    include ./post-info.pug</span><br><span class="line"><span class="addition">+   section.main-hero-waves-area.waves-area</span></span><br><span class="line"><span class="addition">+     svg.waves-svg(xmlns=&#x27;http://www.w3.org/2000/svg&#x27;, xlink=&#x27;http://www.w3.org/1999/xlink&#x27;, viewBox=&#x27;0 24 150 28&#x27;, preserveAspectRatio=&#x27;none&#x27;, shape-rendering=&#x27;auto&#x27;)</span></span><br><span class="line"><span class="addition">+       defs</span></span><br><span class="line"><span class="addition">+         path#gentle-wave(d=&#x27;M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z&#x27;)</span></span><br><span class="line"><span class="addition">+       g.parallax</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;0&#x27;)</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;3&#x27;)</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;5&#x27;)</span></span><br><span class="line"><span class="addition">+         use(href=&#x27;#gentle-wave&#x27;, x=&#x27;48&#x27;, y=&#x27;7&#x27;)</span></span><br><span class="line">    #post-top-cover</span><br><span class="line">      img#post-top-bg(class=&#x27;nolazyload&#x27; src=bg_img)</span><br><span class="line">  else if is_home()</span><br><span class="line">    #site-info</span><br><span class="line">      h1#site-title=site_title</span><br><span class="line">      if theme.subtitle.enable</span><br></pre></td></tr></table></figure>
<p>为了方便复制，提供一份需要修改的部分:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">section.main-hero-waves-area.waves-area</span><br><span class="line">  svg.waves-svg(xmlns=<span class="string">&#x27;http://www.w3.org/2000/svg&#x27;</span>, xlink=<span class="string">&#x27;http://www.w3.org/1999/xlink&#x27;</span>, viewBox=<span class="string">&#x27;0 24 150 28&#x27;</span>, preserveAspectRatio=<span class="string">&#x27;none&#x27;</span>, shape-rendering=<span class="string">&#x27;auto&#x27;</span>)</span><br><span class="line">    defs</span><br><span class="line">      path#gentle-wave(d=<span class="string">&#x27;M -160 44 c 30 0 58 -18 88 -18 s 58 18 88 18 s 58 -18 88 -18 s 58 18 88 18 v 44 h -352 Z&#x27;</span>)</span><br><span class="line">    g.parallax</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">      use(href=<span class="string">&#x27;#gentle-wave&#x27;</span>, x=<span class="string">&#x27;48&#x27;</span>, y=<span class="string">&#x27;7&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然后在_config.butterfly.yml的 [inject.head] 或者自定义 css 中 引入以下 css, 不会的同学参考Hexo 博客添加自定义 css 和 js 文件</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 波浪css */</span></span><br><span class="line"><span class="selector-class">.main-hero-waves-area</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.waves-area</span> <span class="selector-class">.waves-svg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Animation */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: move-forever <span class="number">25s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.55</span>, <span class="number">0.5</span>, <span class="number">0.45</span>, <span class="number">0.5</span>) infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">7s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9febd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9fe82</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">4s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">13s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9fe36</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 黑色模式背景 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">7s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171dc8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">3s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171d80</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">4s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">13s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171d3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.parallax</span> &gt; <span class="selector-tag">use</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">20s</span>;</span><br><span class="line">  <span class="attribute">fill</span>: <span class="number">#18171d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move-forever &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">90px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">85px</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Shrinking for mobile*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.waves-area</span> <span class="selector-class">.waves-svg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">40px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大功告成，需要注意的是 css 中fill属性可以控制波浪颜色，最好使其中一个颜色与背景颜色一致，否则会显的有点奇怪。</p>
<blockquote>
<p>参考：<a href="https://blog.anheyu.com/posts/98c4.html">https://blog.anheyu.com/posts/98c4.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>butterfly</tag>
        <tag>波浪</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL SERVER数据库跨服务器查询</title>
    <url>/archives/a1b7d00f.html</url>
    <content><![CDATA[<p>1、执行存储过程 sp_addlinkedserver 以将服务器添加到 sys.servers。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--server72为远程服务器的别名</span></span><br><span class="line"><span class="keyword">exec</span> sp_addlinkedserver <span class="string">&#x27;server72&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;SQLOLEDB &#x27;</span>, <span class="string">&#x27;远程服务器名或ip地址 &#x27;</span> </span><br><span class="line"><span class="keyword">exec</span> sp_addlinkedsrvlogin <span class="string">&#x27;server72&#x27;</span>, <span class="string">&#x27;false &#x27;</span>,<span class="keyword">null</span>, <span class="string">&#x27;用户名 &#x27;</span>, <span class="string">&#x27;密码 &#x27;</span></span><br></pre></td></tr></table></figure>
<p>2、跨服务器查询时，需要按照下列格式指定查询表添加的远程服务器别名</p>
<ul>
<li>数据库名</li>
<li>数据库的schema，一般是dbo</li>
<li>表名称</li>
<li>查询示例</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> server72.数据库名.dbo.表名</span><br></pre></td></tr></table></figure>
<p>3、查询服务器中已有的linkserver信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYS.LINKED_LOGINS;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SYS.SERVERS;</span><br></pre></td></tr></table></figure>
<p>4、删除已经存在的链接服务器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sys.servers <span class="keyword">WHERE</span> name <span class="operator">=</span> N<span class="string">&#x27;server72&#x27;</span>)</span><br><span class="line"><span class="keyword">EXEC</span> master.sys.sp_dropserver <span class="string">&#x27;server72&#x27;</span>,<span class="string">&#x27;droplogins&#x27;</span>  </span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用C#实现23种常见的设计模式</title>
    <url>/archives/d8d7f62c.html</url>
    <content><![CDATA[<p>设计模式是软件开发人员在设计和实现软件时可以重复使用的解决方案。在C#中实现23种常见的设计模式需要对每种模式的实现细节进行深入理解。这里我会简述一些常见的设计模式，但具体的实现代码可能会比较长，因此我这里只展示每个模式的概述和关键点。</p>
<p>1、单例模式（Singleton）：确保一个类只有一个实例，并提供一个全局访问点。</p>
<p>2、工厂模式（Factory）：用于创建对象，将对象的创建与使用分离。</p>
<p>3、建造者模式（Builder）：通过将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p>
<p>4、原型模式（Prototype）：通过复制已有对象来创建新对象。</p>
<p>5、适配器模式（Adapter）：将一个类的接口转换成客户端所期望的另一个接口，使得原本由于接口不兼容而无法协同工作的类能够一起工作。</p>
<p>6、桥接模式（Bridge）：将抽象与实现解耦，使它们可以独立变化。</p>
<p>7、组合模式（Composite）：允许你将对象组合成树形结构来表示“部分-整体”的层次结构，使得客户端以统一的方式处理单个对象以及对象的组合。</p>
<p>8、装饰器模式（Decorator）：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式相比生成子类更为灵活。</p>
<p>9、外观模式（Facade）：为子系统中的一组接口提供一个一致的界面，简化子系统的使用。</p>
<p>10、享元模式（Flyweight）：运用共享技术有效地支持大量细粒度的对象。</p>
<p>11、观察者模式（Observer）：定义对象之间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。</p>
<p>12、中介者模式（Mediator）：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而降低耦合度。</p>
<p>13、代理模式（Proxy）：为其他对象提供一种代理以控制对这个对象的访问。</p>
<p>14、迭代器模式（Iterator）：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p>
<p>15、组合模式（Composite）：将对象组合成树形结构以表示“部分-整体”的层次结构，使得客户端以统一的方式处理单个对象以及对象的组合。</p>
<p>16、状态模式（State）：允许一个对象在其内部状态改变时改变它的行为。</p>
<p>17、策略模式（Strategy）：定义一系列的算法，将每一个算法封装起来，并且使它们可以相互替换。</p>
<p>18、模板方法模式（Template Method）：定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p>
<p>19、职责链模式（Chain of Responsibility）：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</p>
<p>20、备忘录模式（Memento）：在不破坏封装的前提下捕获一个对象的内部状态，并在该对象之外保存这个状态。</p>
<p>21、解释器模式（Interpreter）：定义一个解释器类，该类解析并执行一种简单的语法结构。</p>
<p>22、观察者模式（Observer）：定义了对象之间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。</p>
<p>23、访问者模式（Visitor）：将数据操作与数据结构分离，使得同一组操作可以作用于不同的数据结构。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>五个常用的.NET数据库迁移框架,你用过哪个?</title>
    <url>/archives/9ede2f17.html</url>
    <content><![CDATA[<p>在.NET开发中，可以使用多种数据库迁移框架来帮助我们管理数据库模式的变更和版本控制。以下是一些常用的.NET数据库迁移框架：</p>
<h2 id="1、Entity-Framework-Migrations："><a href="#1、Entity-Framework-Migrations：" class="headerlink" title="1、Entity Framework Migrations："></a>1、Entity Framework Migrations：</h2><p>Entity Framework是.NET的一个对象关系映射（ORM）框架，它提供了官方的迁移支持。通过使用Migrations，您可以自动化数据库模式的版本控制和更新，以与代码更改保持同步。具体实现方法：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2MDEwMTE1Mw==&mid=2247485364&idx=1&sn=6d968455681676147ce70a1762248ffb&chksm=ce2ac8faf95d41ec4270b379f3cb5219d3283017fd277fa34c22635610689efba3c260fff043&token=1356968128&lang=zh_CN#rd">Entity Framework实现数据迁移的方法</a></p>
<h2 id="2、DNXDB："><a href="#2、DNXDB：" class="headerlink" title="2、DNXDB："></a>2、DNXDB：</h2><p>DNXDB是一个轻量级、开源的数据库迁移框架，支持多种数据库，包括SQL Server、MySQL和PostgreSQL等。它允许您通过使用简单的YAML文件来定义迁移脚本，并提供了自动化迁移和回滚的功能。</p>
<h2 id="3、FluentMigrator："><a href="#3、FluentMigrator：" class="headerlink" title="3、FluentMigrator："></a>3、FluentMigrator：</h2><p>FluentMigrator是一个开源的数据库迁移框架，它提供了一种简单而流畅的语法来编写迁移脚本。它支持多种数据库，包括SQL Server、MySQL、PostgreSQL和SQLite等。</p>
<h2 id="4、MyBatis-NET："><a href="#4、MyBatis-NET：" class="headerlink" title="4、MyBatis.NET："></a>4、MyBatis.NET：</h2><p>MyBatis是Java中流行的ORM框架，但也有.NET版本。MyBatis.NET提供了类似于Entity Framework的迁移支持，但使用的是SQL脚本而不是代码迁移。</p>
<h2 id="5、SQL-Server-Management-Studio-SSMS-："><a href="#5、SQL-Server-Management-Studio-SSMS-：" class="headerlink" title="5、SQL Server Management Studio (SSMS)："></a>5、SQL Server Management Studio (SSMS)：</h2><p>虽然SSMS不是严格意义上的迁移框架，但它是一个强大的工具，可以帮助您管理和操作SQL Server数据库，包括数据库的备份、恢复、升级和迁移等操作。</p>
<p>这些框架各有优缺点，您可以根据自己的项目需求和技术背景选择适合您的框架。请注意，在选择框架之前，建议您仔细阅读文档、了解社区支持和社区反馈，以确保您选择了合适的工具。</p>
<h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2><p>Entity Framework Migrations：</p>
<ul>
<li>优点：是.NET开发中常用的ORM框架，与代码的集成度高，可以自动跟踪和同步数据库模式的变更。</li>
<li>缺点：对于大型数据库和复杂查询，性能可能不如直接使用SQL。</li>
</ul>
<p>DNXDB：</p>
<ul>
<li>优点：轻量级、开源，支持多种数据库，可以通过简单的YAML文件来定义迁移脚本。</li>
<li>缺点：相对于其他框架，DNXDB的社区支持和文档可能不够丰富。</li>
</ul>
<p>FluentMigrator：</p>
<ul>
<li>优点：提供简单流畅的语法来编写迁移脚本，支持多种数据库。</li>
<li>缺点：对于复杂的大型数据库，性能可能不如直接使用SQL。</li>
</ul>
<p>MyBatis.NET：</p>
<ul>
<li>优点：类似于Java中的MyBatis框架，提供SQL脚本的迁移支持。</li>
<li>缺点：相对于其他框架，MyBatis.NET的社区支持和文档可能不够丰富。</li>
</ul>
<p>SQL Server Management Studio (SSMS)：</p>
<ul>
<li>优点：是一个强大的SQL Server管理工具，可以帮助您管理和操作数据库，包括备份、恢复、升级和迁移等操作。</li>
<li>缺点：不是严格意义上的迁移框架，对于复杂的大型数据库，性能可能不如直接使用SQL。</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>.net</tag>
        <tag>迁移框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows server 2019服务器安装IIS步骤教程</title>
    <url>/archives/4f7ca37c.html</url>
    <content><![CDATA[<p>1、电脑桌面，点击左下角Windows图标</p>
<p>image.png</p>
<p>2、点击【服务器管理器】</p>
<p>image.png</p>
<p>3、服务器管理器的仪表板，点击【添加角色和功能】</p>
<p>image.png</p>
<p>4、点击【下一步】</p>
<p>image.png</p>
<p>5、选择【基于角色或基于功能的安装】，再点击【下一步】</p>
<p>image.png</p>
<p>6、选择【从服务器池中选择服务器】，然后选择服务器，再点击【下一步】</p>
<p>image.png</p>
<p>7、选择【Web服务器(IIS)】</p>
<p>image.png</p>
<p>8、选择【安全性】</p>
<p>dea3bff5ded4494d609c0f64994f0247_.png</p>
<p>9、选择【常见http功能】</p>
<p>f287b2fe9540b2423b661db93ed3aec9_.png</p>
<p>10、选择【性能】和【运行状况和诊断】</p>
<p>52132812e4a4e3cf9684db50cae2357d_.png</p>
<p>11、选择【应用程序开发】</p>
<p>98975a7ce5d0cfa66051515002c5e10c_.png</p>
<p>12、选择【FTP服务器】和【管理工具】，然后点击【下一步】</p>
<p>74912d303c05ab54620b9476dd8b7647_.png</p>
<p>13、勾选好了之后点击【安装】</p>
<p>c0a1042593eccf1ceb82a39255e2f45c_.png</p>
<p>14、等待安装，安装成功之后，点击【关闭】就可以了。</p>
<p>dfd9db33cebf8731925206730b652d91_.png</p>
<p>15、如上图所示已经安装成功了，现在打开iis管理器就能看到已安装的功能了。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>利用腾讯元器，将公众号变身为强大的.NET AI智能体</title>
    <url>/archives/2543ce4e.html</url>
    <content><![CDATA[<p>经常有粉丝朋友在公众号后台私信提问，因为个人平时比较少看公众号后台的私信所以没法及时回复。最近发现腾讯推出了一个可以创建和使用各种智能体的平台（帮助小白也能快速使用AI）：腾讯元器，正好自己每天也在公众号更新.NET相关的文章，有着较为丰富.NET相关的知识库，因此今天我将利用腾讯元器，将我的公众号变身为一个强大的.NET AI智能体，造福我的.NET粉丝朋友们。</p>
<p>登录腾讯元器</p>
<p>登录地址：<a href="https://yuanqi.tencent.com/">https://yuanqi.tencent.com</a></p>
<p>创建智能体</p>
<p>图片</p>
<p>基础设定</p>
<p>图片</p>
<p>名称</p>
<p>CSharp小沈子</p>
<p>简介</p>
<p>你是一位专注于.net领域的AI智能体，掌握全面的.net技术栈和知识点。能够帮助.NET开发者快速解答各类技术难题。</p>
<p>详细设定</p>
<ul>
<li><p>你的名字是CSharp小沈子，专门帮助用户解决与C#编程语言相关的问题。</p>
</li>
<li><p>你拥有丰富的C#编程知识，能够解答从基础语法到高级算法的各种问题。</p>
</li>
<li><p>你可以提供代码示例、调试建议和最佳实践，帮助用户提高编程技能。</p>
</li>
<li><p>你会用简洁明了的语言解释复杂的概念，确保用户能够轻松理解。</p>
</li>
</ul>
<p>图片</p>
<p>开场白</p>
<p>您好，我是CSharp小沈子，专注于.NET领域。无论您遇到什么.NET技术难题，我都能为您提供快速准确的解答。</p>
<p>图片</p>
<p>预置引导问题等设置，都可以通过AI自动生成</p>
<p>图片</p>
<p>添加知识库</p>
<p>图片</p>
<p>图片</p>
<p>选择公众号文章，输入名称、描述，然后授权自己的 公众号，点击保存并添加</p>
<p>图片</p>
<p>如下图这样就已经添加成功了</p>
<p>图片</p>
<p>发布智能体</p>
<p>接下来就可以直接发布了</p>
<p>图片</p>
<p>图片</p>
<p>发布好之后我们回到主页，点击顶部的知识库，可看到刚刚授权的公众号，可以查看其中的文章内容</p>
<p>图片</p>
<p>图片</p>
<p>图片</p>
<p>再回到智能体，我们可以看到已经发布成功了。接下来就可以体验了</p>
<p>图片</p>
<p>使用方式有：腾讯元宝、腾讯元器、微信公众号-订阅号 三种方式。</p>
<p>图片</p>
<p>图片</p>
<p>感兴趣的小伙伴们也可以去试试~</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio2022安装SVN插件</title>
    <url>/archives/4e81b362.html</url>
    <content><![CDATA[<p>前言</p>
<p>需要电脑中装有SVN并能正常使用。</p>
<p>具体步骤</p>
<p>1.下载插件VisualSVN  下载链接:<a href="https://www.visualsvn.com/visualsvn/download/">https://www.visualsvn.com/visualsvn/download/</a></p>
<p>1721399581790.jpg</p>
<p>2.安装</p>
<p>双击打开下载的vsix文件一路安装即可。</p>
<p>注意：下载后安装时要确保VS关闭，否则无法配置。</p>
<p>1721399456280.jpg</p>
<p>3.安装成功后打开Visual Studio2022可以看到上方选项卡出现svn插件就可以使用啦。</p>
<p>1721400127425.jpg</p>
<p>1721400216921.jpg</p>
<p>4.点击Update更新代码，方便的很</p>
<p>1721400281590.jpg</p>
<p>更新成功！</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>vs</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>百度分享share.js插件</title>
    <url>/archives/7f5a1792.html</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//百度分享</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">_bd_share_config</span> = &#123;</span><br><span class="line">   common : &#123;</span><br><span class="line">       bdText : <span class="string">&#x27;分享标题&#x27;</span>,</span><br><span class="line">       bdDesc : <span class="string">&#x27;分享描述&#x27;</span>,</span><br><span class="line">       bdUrl : <span class="string">&#x27;分享链接&#x27;</span>,</span><br><span class="line">       bdPic : <span class="string">&#x27;分享图片&#x27;</span></span><br><span class="line"></span><br><span class="line">   &#125;,</span><br><span class="line">   share : [&#123;</span><br><span class="line">       <span class="string">&quot;bdSize&quot;</span> : <span class="number">22</span></span><br><span class="line">   &#125;],</span><br><span class="line">   image : [&#123;</span><br><span class="line">       viewType : <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">       viewPos : <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">       viewColor : <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">       viewSize : <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">       viewList : [<span class="string">&#x27;qzone&#x27;</span>,<span class="string">&#x27;tsina&#x27;</span>,<span class="string">&#x27;huaban&#x27;</span>,<span class="string">&#x27;tqq&#x27;</span>,<span class="string">&#x27;renren&#x27;</span>]</span><br><span class="line">   &#125;],</span><br><span class="line">   selectShare : [&#123;</span><br><span class="line">       <span class="string">&quot;bdselectMiniList&quot;</span> : [<span class="string">&#x27;qzone&#x27;</span>,<span class="string">&#x27;tqq&#x27;</span>,<span class="string">&#x27;kaixin001&#x27;</span>,<span class="string">&#x27;bdxc&#x27;</span>,<span class="string">&#x27;tqf&#x27;</span>]</span><br><span class="line">   &#125;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分享按钮组织点击</span></span><br><span class="line"><span class="title function_">with</span>(<span class="variable language_">document</span>)<span class="number">0</span>[(<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>]||body).<span class="title function_">appendChild</span>(<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)).<span class="property">src</span>=<span class="string">&#x27;http://bdimg.share.baidu.com/static/api/js/share.js?cdnversion=&#x27;</span>+~(-<span class="keyword">new</span> <span class="title class_">Date</span>()/<span class="number">36e5</span>)];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>特别注意：</p>
</blockquote>
<p>站点自从开启 https 之后 ，百度分享就不能用了！但是又寻找不到类似百度分享的替代品。</p>
<p>怎么办呢？要如何解决 百度分享不支持https的问题呢，</p>
<p>跟着博主动动手，让你百度分享仍然能在https下使用 ~</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>share</tag>
      </tags>
  </entry>
  <entry>
    <title>IIS7 IIS8 设置将域名不带www跳转到带www上</title>
    <url>/archives/79c4bde.html</url>
    <content><![CDATA[<p>很多时候为了统一网站入口，需要将不带www的主域名解析到带www的域名记录下，当客户访问不带www的域名网址的时候自动跳转到带www的域名，在IIS Web服务器中可以通过URL重写模块来实现此功能，只需要做301永久重定向即可将实现不带www请求链接自动跳转www主机域名。</p>
<p>（1）首先一步是带www主机域名和不带www的主机域名解析需要能够顺利访问，涉及到域名解析平台的相关域名解析操作以及IIS网站部署操作，保证2个域名都可正常访问。建议在IIS中一个网站绑定多个主机域名的方式，绑定后效果如下图。<br>相关设置教程可参考：IIS网站如何同时解析带www和不带www的域名。</p>
<p>微信图片_20231211221819.png</p>
<p>（2）进入IIS管理界面，选中对应的网站，然后在右侧功能区域选中【URL重写】，如果没有此URL重写模块Microsoft URL Rewrite Module。建议先下载模块安装到IIS中。</p>
<p>URL重写模块32位系统：<a href="http://download.microsoft.com/download/4/9/C/49CD28DB-4AA6-4A51-9437-AA001221F606/rewrite_x86_zh-CN.msi">http://download.microsoft.com/download/4/9/C/49CD28DB-4AA6-4A51-9437-AA001221F606/rewrite_x86_zh-CN.msi</a><br>URL重写模块64位系统：<a href="http://download.microsoft.com/download/4/E/7/4E7ECE9A-DF55-4F90-A354-B497072BDE0A/rewrite_x64_zh-CN.msi">http://download.microsoft.com/download/4/E/7/4E7ECE9A-DF55-4F90-A354-B497072BDE0A/rewrite_x64_zh-CN.msi</a></p>
<p>微信图片_20231211221947.png</p>
<p>（3）进入【URL重写】管理界面前，先在.htaccess在线生成输入要www域名。在此网站上提供的【www域名重定向】功能中生成相应的代码。</p>
<p>3be7284bc66e457217f2412e57fac5e4.png</p>
<p>（4）复制步骤3页面生成的代码，如下所示</p>
<p>6697f7968266176c6744d2499ffdc8c9.png</p>
<p>（5）继续回到步骤2中的【URL重写】模块，进入【URL重写】界面后，点击右侧的【导入规则】。</p>
<p>543d4dd99db66409f8d43f4a734f77b8.png</p>
<p>（6）进入【导入规则】页面后，将第4步骤复制的代码黏贴到【重写规则】的输入框中，然后单击右上角的【应用】。</p>
<p>660e9bc8b1787c3bde14f97689f1ada2.png</p>
<p>（7）然后重启IIS中的网站，配置生效，此时不带www的网址将自动跳转到www上。</p>
<p>（8）如果出了上述的实现要求外，还需要添加http请求自动跳转https安全连接的话，可再次设置URL重写规则来实现(前提是已经配置好了带SSL证书的https安全连接网站)</p>
]]></content>
      <categories>
        <category>SEO笔记</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>IIS</tag>
        <tag>www</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给Hexo-butterfly主题博客在复制时添加版权声明</title>
    <url>/archives/321b85ec.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文章被盗，被爬取，内容被cv，你是否很苦恼？<br>被复制时，自动给文章内容添加原文信息。🤣</p>
<h1 id="1、确认需要版权声明的位置"><a href="#1、确认需要版权声明的位置" class="headerlink" title="1、确认需要版权声明的位置"></a>1、确认需要版权声明的位置</h1><p>通常情况下都是在拷贝博客详情内容时才给拷贝的内容添加版权信息，如果不管拷贝哪里的内容都给添加版权声明，影响用户体验。所以第一步确定博文详细内容在哪个标签中。这里我用的butterfly(蝴蝶)主题，他的文章主体内容在<div id="article-container">标签中<br><img src="https://images.codeobservatory.cn/hexo/202506/03/20250603173739.png" alt="文章主体内容标签"></div></p>
<h1 id="2、编写版权声明的js"><a href="#2、编写版权声明的js" class="headerlink" title="2、编写版权声明的js"></a>2、编写版权声明的js</h1><p>js已写好，直接复制，替换自己的信息即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">script.</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">setClipboardText</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> clipboardData = event.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">          <span class="keyword">if</span> (!clipboardData) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">          event.<span class="title function_">preventDefault</span>();</span><br><span class="line">          <span class="keyword">let</span> text = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line">          <span class="keyword">if</span> (text) &#123;</span><br><span class="line">              event.<span class="title function_">preventDefault</span>();</span><br><span class="line">              <span class="keyword">var</span> copyright = <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n著作权归作者所有。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n商业转载请联系作者获得授权，非商业转载请注明出处。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n作者: 码农刚子&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n邮箱: wxscc@foxmail.com&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n原文地址: &#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">              clipboardData.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, text + copyright);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> contents = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;article-container&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(contents)&#123;</span><br><span class="line">        contents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="title function_">setClipboardText</span>(e);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>&lt;%&#x3D; page.permalink %&gt;: 当前页面链接<br>因为我们只是需要监听博客详情页的复制事件，所以我们可以直接将这段js放在博文详情页末尾。themes&#x2F;butterfly[主题的名字]&#x2F;layout&#x2F;post.pug这个文件是生成博客详情的模板。</p>
<h1 id="3、启动测试"><a href="#3、启动测试" class="headerlink" title="3、启动测试"></a>3、启动测试</h1><p>执行hexo clean和hexo generate清除通过修改前生成的页面，然后再根据修改后模板生成新的页面。然后执行hexo server启动测试。效果如下图<br><img src="https://images.codeobservatory.cn/hexo/202506/03/20250603175723.png" alt="版权声明截图"></p>
<h1 id="4、设置文章是否需要添加版权声明"><a href="#4、设置文章是否需要添加版权声明" class="headerlink" title="4、设置文章是否需要添加版权声明"></a>4、设置文章是否需要添加版权声明</h1><p>如果我们是转载其他作者的文章，这种情况下肯定是不能添加自己的版权声明要去掉。</p>
<ol>
<li>在文章头部添加一个<code>copyright</code>属性设置为<code>false</code><br><img src="https://images.codeobservatory.cn/hexo/202506/03/20250603174905.png" alt="添加copyright属性"><br>默认没有此属性，也相当于true，所有文章都默认加版权声明，直有copyright为false时不加版权声明</li>
<li>在刚刚加js代码的地方再加一行</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+ <span class="keyword">if</span> page.<span class="property">copyright</span> !== <span class="literal">false</span> </span><br><span class="line">    script.</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">setClipboardText</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> clipboardData = event.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">          <span class="keyword">if</span> (!clipboardData) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">          event.<span class="title function_">preventDefault</span>();</span><br><span class="line">          <span class="keyword">let</span> text = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>().<span class="title function_">toString</span>();</span><br><span class="line">          <span class="keyword">if</span> (text) &#123;</span><br><span class="line">              event.<span class="title function_">preventDefault</span>();</span><br><span class="line">              <span class="keyword">var</span> copyright = <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n著作权归作者所有。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n商业转载请联系作者获得授权，非商业转载请注明出处。&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n作者: 码农刚子&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n邮箱: wxscc@foxmail.com&#x27;</span></span><br><span class="line">              + <span class="string">&#x27;\n原文地址: &#x27;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line">              clipboardData.<span class="title function_">setData</span>(<span class="string">&#x27;text/plain&#x27;</span>, text + copyright);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> contents = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;article-container&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(contents)&#123;</span><br><span class="line">        contents.<span class="title function_">addEventListener</span>(<span class="string">&#x27;copy&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">            <span class="title function_">setClipboardText</span>(e);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>butterfly</tag>
        <tag>版权声明</tag>
      </tags>
  </entry>
  <entry>
    <title>五年深漂画了个圆：从龙岗出租屋出发，又回到龙岗出租屋</title>
    <url>/archives/240abd01.html</url>
    <content><![CDATA[<blockquote>
<p>五年了，整整五年！我回来了，竟又站在当初的起点上。</p>
</blockquote>
<p><img src="https://images.codeobservatory.cn/hexo/202506/06/4d086e061d950a7b92cec7d3eb2f96d6f3d3c939.jpeg" alt="沈川超海边照"><br><strong>2020年6月</strong>： 疫情初起的夏天，世界被按下了暂停键，我和女友却带着一股子懵懂的热气，踏进了深圳龙岗坪地。她一头扎进运营推广的工作里，我休整几天后，三份简历投向罗湖、水贝、龙华——最终，龙华一家网络科技公司向我招手，<code>一份敲敲打打的软件开发差事就此落定</code>。为了省却初来乍到的通勤奔波，我暂且寄居在民乐朋友家的屋檐下。</p>
<p><strong>2020年9月</strong>： 我们搬到了丹竹头沙岭小区，开始了早出晚归的日子，日日被公交车吞没又吐出。日子在疫情下的不安与奔忙中悄然流过。</p>
<p><strong>2021年底</strong>： 在疫情的余波中，<code>我们终于领了证，成为了法定意义上的夫妻。</code>只是那场期盼已久的婚礼，终究被疫情的阴影笼罩，办得仓促又带着几分未能圆满的小遗憾，成了心头一个淡淡的印记。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/06/29381f30e924b899604731778cf8e99a0b7bf611.webp" alt="沈川超妻子合照"><br><strong>2022年中</strong>： 生活继续向前滚动。妻子怀孕了，在她身怀六甲、即将显怀的五个月时，为了让她能更安稳地待产，我将她送回了老家休养。彼时，我们已搬离丹竹头，住过短暂的大破头村，又挤在黄金坑小区朋友的单间里。通勤的路途却越来越像一条漫长的绳索，勒得人疲惫不堪，每日往返龙华耗费太多精力。</p>
<p><strong>2023年春节</strong>： <code>这个春节，意义非凡。我早早请好了假，回到老家，寸步不离地守在妻子身边。当喜庆的鞭炮声响彻夜空时，我们的第一个小宝贝在期待与守护中呱呱坠地。</code> 新生命的嘹亮啼哭，与窗外辞旧迎新的喧闹交织在一起，冲散了疫情残留的最后一丝阴霾。这一次，我没有错过。我紧握着妻子的手，亲眼见证了这个小生命的降临，那份初为人父的震颤与无与伦比的喜悦，沉甸甸地填满了整个产房。 这份全程的陪伴，让这个春节拥有了抵御一切艰辛的温暖底色。孩子满月后： 在老家悉心照料妻儿，看着小家伙一天天变得红润饱满。直到孩子稳稳当当地过了满月，一切安顿妥当，我才怀着万般不舍，告别父母妻儿，独自返回深圳复职。 离别时，妻子怀中安睡的小脸和我转身时她微红的眼眶，成了心底最柔软的牵挂。我回到了黄金坑的朋友单间，继续着往返龙华的漫长通勤，但心中多了一份沉甸甸的甜蜜负担。</p>
<p><strong>2024年6月</strong>： 恰巧朋友也谈了女朋友，本就局促的单间空间更显紧张。通勤的疲惫与居住的不便交织，我最终决定独自一人，从黄金坑搬到了龙华公司附近居住。这仿佛是一次割舍，只为在日复一日的路途上省下一点喘息的时间。只是这份独居，也意味着与远在老家的妻儿空间上的距离更显遥远，那间小小的出租屋，有时安静得能听见自己的心跳，思念无声却沉重。此后近一年，我便独自住在公司附近，每日往返于住所与办公室之间，两点一线。</p>
<p><strong>2025年4月</strong>： 对那份难以企及的待遇，积蓄已久的念头终于落地，我松开了手选择离职。没有太多犹豫，我直接回到了久别的老家。这一次，是真正地陪伴——陪伴日渐年迈的父母，也带着妻儿回了一趟她遥远的娘家，用心弥补着那些因奔波而错过的时光。身心在故土炊烟的温暖和孩子的咿呀学语声中渐渐熨帖舒展。</p>
<p><strong>2025年5月底</strong>： 未曾想，生活的河流在看似平静的故土岸边又陡然转折。五月底，手机响起，一家PCB制造公司的老板亲自打来电话，力邀我前往深圳负责系统研发的技术支持。一个重新出发的机会摆在眼前。</p>
<p><strong>2025年6月初</strong>： 权衡之后，我拖家带口，再次汇入了深圳奔涌不息的潮水中。</p>
<p><strong>此刻（2025年6月）</strong>： 重新寻找安身之所，脚步不由自主地在龙岗旧地徘徊。目光掠过那些街道与楼宇，一种模糊却强烈的熟悉感悄然缠绕上来。直到在某个小区门口站定，环顾四周，心猛地一跳——这不正是五年前，2020年那个夏天，我们初来深圳落脚的那个地方吗？同一个院落，同一方天空下的屋檐，在流转的时光里静默地伫立着，仿佛一个轮回的终点与起点在此刻重合。我抬头望见楼宇依旧，却不知哪一扇窗后，曾住着五年前那两个揣着忐忑与无限憧憬的年轻人。时光的痕迹已无声地刻在每一寸熟悉的砖石上。我站在这里，五年的颠簸与辗转如潮水般在心头翻涌：<em><strong>从挤在丹竹头公交里披星戴月的青涩，到黄金坑单间中拥挤与思念交织的岁月；从疫情阴影下仓促婚礼的淡淡遗憾，到2023年春节老家产房里，紧握妻子手时那份滚烫的激动与守护新生命降生的圆满；从2024年独自搬到龙华公司附近那安静得能听见心跳的独居时光，再到今日带着妻儿重返这最初的落脚点。这小小的出租屋群落，仿佛成了命运的锚点，任凭我如舟船般在生活的潮汐中起伏漂泊——求职、成家、守护、分离、团聚、离职、再出发——最终竟又被无形的绳索牵引着，绕回了出发的岸边。五年光阴，在这座永不停歇的城市里，是出租屋门牌的一次次更换，是地铁车厢里一张张疲惫面孔的无声交替，更是我从一个懵懂青年，一步步蜕变为丈夫、父亲的生命印记。</strong></em></p>
<p>夕阳把我们的身影和楼影一同拉得很长。这片五年前初来乍到、充满未知与迷茫的土地，如今却成了我携家带口重新扬帆的起点。我驻足于熟悉的小区门口，望着前方延伸的道路——它依然带着些许陌生，却又从骨子里透出难以言喻的熟悉气息。暮色温柔沉降，五年前那对年轻情侣背着行囊的身影，在记忆的深处无声浮动，他们眼中初生牛犊的莽撞光芒，与此刻我肩头沉甸甸的责任、身边妻儿的温暖依偎，以及脑海中永远定格的、在老家产房迎接新生命时那束明亮的灯光，在时光的滤镜下悄然重叠。我深吸一口这南方六月湿润而熟悉的空气，更紧地握住了家人的手，迈开脚步，坚定地向前走去：<span style="color: red;">路，依然在脚下延伸，而我们的故事，也依然在深圳这片热土上，继续被一步一个脚印地丈量着。</span></p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>深圳</tag>
        <tag>心路历程</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中十种线程启动方式及其适用场景、优缺点分析</title>
    <url>/archives/74b7ef26.html</url>
    <content><![CDATA[<p>C#提供了多种开启线程的方式，每种方式都有其独特的使用场景、优点和缺点。以下是C#中十种常见的开启线程的方式，以及它们各自的使用场景、优点和缺点：</p>
<h2 id="1-Thread类"><a href="#1-Thread类" class="headerlink" title="1.Thread类"></a>1.Thread类</h2><ul>
<li><p><strong>使用场景</strong>：快速启动执行简单任务。</p>
</li>
<li><p><strong>优点</strong>：简单易用。提供了直接控制线程的方法，如<code>Start、Suspend、Resume、Abort</code>等。</p>
</li>
<li><p><strong>缺点</strong>：功能较少，不适合复杂的线程管理；直接管理线程可能导致资源利用率不高或死锁等问题。</p>
</li>
</ul>
<h2 id="2-Task并行库"><a href="#2-Task并行库" class="headerlink" title="2.Task并行库"></a>2.Task并行库</h2><ul>
<li><p><strong>使用场景</strong>：需要更好的错误处理和任务管理。</p>
</li>
<li><p><strong>优点</strong>：提供了丰富的API，如<code>Task.Run、Task.WhenAll、Task.WhenAny</code>等，易于集成和使用；支持更复杂的并发模式，如取消、超时和错误处理。</p>
</li>
<li><p><strong>缺点</strong>：学习曲线较陡峭，需要掌握异步编程的概念。</p>
</li>
</ul>
<h2 id="3-BackgroundWorker组件"><a href="#3-BackgroundWorker组件" class="headerlink" title="3.BackgroundWorker组件"></a>3.BackgroundWorker组件</h2><ul>
<li><p><strong>使用场景</strong>：GUI应用中需要在后台执行任务，同时需要报告进度或处理异常。</p>
</li>
<li><p><strong>优点</strong>：支持进度更新和取消操作；自动将工作线程上的异常封送到UI线程，便于处理。</p>
</li>
<li><p><strong>缺点</strong>：较老的技术，可能在未来的.NET版本中逐渐淘汰；功能相对有限，不如Task并行库灵活。</p>
</li>
</ul>
<h2 id="4-ThreadPool"><a href="#4-ThreadPool" class="headerlink" title="4.ThreadPool"></a>4.ThreadPool</h2><ul>
<li><p><strong>使用场景</strong>：需要高效利用线程池资源，执行大量短时间的任务。</p>
</li>
<li><p><strong>优点</strong>：减少了线程创建和销毁的开销；提高了系统的响应性和吞吐量。</p>
</li>
<li><p><strong>缺点</strong>：控制度较低，不适合长时间运行的任务；可能因为线程池资源耗尽而导致任务等待。</p>
</li>
</ul>
<h2 id="5-Timer类"><a href="#5-Timer类" class="headerlink" title="5.Timer类"></a>5.Timer类</h2><ul>
<li><p><strong>使用场景</strong>：需要周期性执行任务。</p>
</li>
<li><p><strong>优点</strong>：简单实现周期性任务；可以在指定的时间间隔后执行回调方法。</p>
</li>
<li><p><strong>缺点</strong>：精度受限于系统计时器；长时间运行可能会导致资源消耗过多。</p>
</li>
</ul>
<h2 id="6-async和await"><a href="#6-async和await" class="headerlink" title="6.async和await"></a>6.async和await</h2><ul>
<li><p><strong>使用场景</strong>：需要简化异步代码，提高代码的可读性和可维护性。</p>
</li>
<li><p><strong>优点</strong>：代码更易读易维护；简化了异步编程的复杂性。</p>
</li>
<li><p><strong>缺点</strong>：需要.NET 4.5或更高版本；可能会导致死锁，特别是在GUI应用中。</p>
</li>
</ul>
<h2 id="7-Parallel类"><a href="#7-Parallel类" class="headerlink" title="7.Parallel类"></a>7.Parallel类</h2><ul>
<li><p><strong>使用场景</strong>：需要对数据集合进行并行处理，以提高性能。</p>
</li>
<li><p><strong>优点</strong>：简化了并行代码编写。提供了丰富的并行操作API，如<code>Parallel.For、Parallel.ForEach、Parallel.Sum</code>等。</p>
</li>
<li><p><strong>缺点</strong>：可能增加线程管理开销；需要考虑数据划分和合并的问题。</p>
</li>
</ul>
<h2 id="8-ThreadLocal"><a href="#8-ThreadLocal" class="headerlink" title="8.ThreadLocal"></a>8.ThreadLocal</h2><ul>
<li><p><strong>使用场景</strong>：需要线程安全的局部数据存储。</p>
</li>
<li><p><strong>优点</strong>：线程安全，避免数据竞争；提供了独立的数据副本给每个线程。</p>
</li>
<li><p><strong>缺点</strong>：管理不当可能导致资源泄露；需要手动清理不再需要的数据副本。</p>
</li>
</ul>
<h2 id="9-Lazy"><a href="#9-Lazy" class="headerlink" title="9.Lazy"></a>9.Lazy</h2><ul>
<li><p><strong>使用场景</strong>：需要延迟初始化对象，以节省资源或处理耗时的初始化任务。</p>
</li>
<li><p><strong>优点</strong>：延迟初始化，节省资源；提高了应用的启动速度。</p>
</li>
<li><p><strong>缺点</strong>：首次访问时可能引入延迟；需要考虑线程安全问题（尽管Lazy<T>本身是线程安全的）。</T></p>
</li>
</ul>
<h2 id="10-PLINQ"><a href="#10-PLINQ" class="headerlink" title="10.PLINQ"></a>10.PLINQ</h2><ul>
<li><p><strong>使用场景</strong>：对大数据集进行LINQ查询，并希望利用多核处理器提高查询效率。</p>
</li>
<li><p><strong>优点</strong>：利用多核处理器提高查询效率；简化了并行查询的编写。</p>
</li>
<li><p><strong>缺点</strong>：并行执行可能增加线程管理开销；需要考虑数据分区和聚合的策略。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>C#提供了多种开启线程的方式，每种方式都有其特定的使用场景和优缺点。开发者在选择时应根据实际需求、性能要求和可维护性等因素进行综合考虑。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>网页图片异步加载</title>
    <url>/archives/edf8539a.html</url>
    <content><![CDATA[<p>在当今数字化时代，网页加载速度对于用户体验至关重要。其中，图片作为网页内容的重要组成部分，其加载方式对于网页性能有着显著影响。异步加载作为一种优化手段，能够有效提升网页图片的加载速度和用户体验。本文将深入探讨网页图片异步加载的原理、实现方式以及实际应用效果。</p>
<p>首先，我们需要了解网页图片异步加载的基本原理。异步加载是指在不影响页面其他内容加载的情况下，将图片的加载过程放在后台进行。当浏览器解析到图片标签时，不会立即下载图片，而是将图片请求放入队列中，待其他资源加载完毕后再进行图片的加载。这种方式可以有效避免由于图片加载导致的页面阻塞和延迟，从而提升页面的整体加载速度。</p>
<p>实现网页图片异步加载的方式有多种，其中比较常用的是使用JavaScript进行图片懒加载。懒加载的核心思想是延迟图片的加载时间，只有当图片出现在视口范围内时才开始加载。具体实现时，可以通过监听滚动事件或<code>Intersection Observer API</code>来判断图片是否进入视口，然后动态地改变图片的src属性或进行图片的加载。此外，还有一些第三方库如<code>lozad.js</code>、<code>vue-lazyload</code>等提供了更简便的懒加载实现方式，可以方便地集成到项目中。</p>
<p>除了懒加载外，还有其他一些技术可以实现网页图片异步加载。例如，使用CDN加速图片的加载速度；对图片进行压缩和优化，减少图片的大小和加载时间；利用图片格式转换技术，选择更适合的图片格式以减小文件大小等。这些技术可以与其他异步加载方式相结合，进一步提升网页图片加载的性能。</p>
<p><strong>实例</strong>：</p>
<p>获取视窗的高度和宽度：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _viewPortHeight = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span> || <span class="number">0</span>),</span><br><span class="line">    _viewPortWidth = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> || <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>是否处于垂直范围</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isOnVerticalViewPort</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rect = ele.<span class="title function_">getBoundingClientRect</span>(); <span class="comment">// 获取距离视窗的位置信息</span></span><br><span class="line">    <span class="keyword">return</span> rect.<span class="property">top</span> &gt; <span class="number">0</span> &amp;&amp; rect.<span class="property">top</span> &lt;= _viewPortHeight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>是否处于水平范围</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isOnHorizontalViewPort</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> rect = ele.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">        <span class="keyword">return</span> rect.<span class="property">left</span> &gt; <span class="number">0</span> &amp;&amp; rect.<span class="property">left</span> &lt;= _viewPortWidth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>有了这核心代码，我们只需要在滚动事件触发后，去动态的判断img元素了, 判断的示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">load</span>(<span class="params">images</span>) &#123;   </span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; images.<span class="property">length</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">var</span> img = images[i];</span><br><span class="line">         <span class="keyword">if</span> (<span class="title function_">isOnVerticalViewPort</span>(img) &amp;&amp; <span class="title function_">isOnHorizontalViewPort</span>(img)) &#123;</span><br><span class="line">                     <span class="keyword">var</span> url = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;lz-src&#x27;</span>); <span class="comment">// 获取图片资源的地址</span></span><br><span class="line">            img.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, url);</span><br><span class="line">            img.<span class="property">isload</span> = <span class="literal">true</span>; <span class="comment">// 加载过后的图片设置加载标记，以免重复加载</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在html页面中的img元素的引用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">lz-src</span>=<span class="string">&quot;/images/2024/5/5391b771eb1f31df.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过给img元素添加<code>lz-src</code>标记，告诉异步脚本，这个元素需要异步加载图片。</p>
<p>监听滚动事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img[&#x27;</span> + lz-src + <span class="string">&#x27;]&#x27;</span>); <span class="comment">// 按标记获取图片元素</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;        <span class="title function_">load</span>(images);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>在实际应用中，网页图片异步加载能够带来显著的效果。首先，它能够提升页面的加载速度，减少用户等待时间，从而提升用户体验。其次，异步加载能够减轻服务器的负担，降低带宽成本。由于图片加载被分散到不同的时间段进行，服务器的并发请求压力会相应减小，有利于提升网站的整体性能和稳定性。此外，异步加载还能够提高页面的响应性和交互性，使得用户在浏览网页时能够更流畅地进行操作和浏览。</p>
<p>然而，需要注意的是，虽然异步加载带来了诸多优势，但并非所有情况都适用。在一些需要快速展示图片的场景中，如新闻、电商等网站的首页或详情页，可能更倾向于使用同步加载以确保图片的及时呈现。因此，在选择是否使用异步加载时，需要根据具体需求和场景进行权衡和选择。</p>
<p>综上所述，网页图片异步加载是一种有效的优化手段，能够提升网页加载速度和用户体验。通过了解异步加载的原理和实现方式，我们可以根据实际需求选择合适的技术进行应用。同时，我们也需要关注异步加载可能带来的问题，并采取相应的措施进行解决。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>异步</tag>
        <tag>图片加载</tag>
      </tags>
  </entry>
  <entry>
    <title>小白也能成IT大神？程序员十大自学编程网站！</title>
    <url>/archives/102371b7.html</url>
    <content><![CDATA[<blockquote>
<p>众所周知，IT互联网行业是高薪行业，如果你还处于职业方向的迷茫期，不如就来免费学习一些IT知识吧，高手们也可以在这里不断的充实自己。</p>
</blockquote>
<h2 id="1、极客学院"><a href="#1、极客学院" class="headerlink" title="1、极客学院"></a>1、极客学院</h2><p>网址：<a href="https://www.jikexueyuan.com/">https://www.jikexueyuan.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/30c2ff2ac1dae095.png" alt="极客学院"></p>
<p>极客学院，中国专业的IT职业在线教育平台，上面有海量的IT教学视频，可以搜索或根据知识体系寻找想要的技术课程，只要课程上面没有VIP字样，就是免费的</p>
<h2 id="2、慕课网"><a href="#2、慕课网" class="headerlink" title="2、慕课网"></a>2、慕课网</h2><p>网址：<a href="https://www.imooc.com/">https://www.imooc.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/d63dde977cf3f335.png" alt="慕课网"></p>
<p>慕课网号称是程序员的梦工厂，上面有非常的多IT专业技术视频课程，进入网站后，直接点击导航中的免费课，里面的所有技术视频都可以免费学习，不过要先手机注册哦。</p>
<h2 id="3、菜鸟教程"><a href="#3、菜鸟教程" class="headerlink" title="3、菜鸟教程"></a>3、菜鸟教程</h2><p>网址：<a href="https://www.runoob.com/">https://www.runoob.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/31529c514e7cf600.png" alt="菜鸟教程"></p>
<p>菜鸟教程是适合小白学习IT技术的专业网站，上面对各种编程语言的基础知识点梳理的非常详细，虽然不是视频资源网站，但却非常适合系统学习IT知识点，想入门的小伙伴们可…</p>
<h2 id="4、编程狮"><a href="#4、编程狮" class="headerlink" title="4、编程狮"></a>4、编程狮</h2><p>网址：<a href="https://www.w3cschool.cn/">https://www.w3cschool.cn</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/5a695bfe3f7d0ecd.png" alt="编程狮"></p>
<p>编程狮是专业的IT知识学习平台，上面有既有文字教程也有视频教程，适合系统学习IT专业技术，基础的小伙伴们，可以多看看这个网站</p>
<h2 id="5、网易云课堂"><a href="#5、网易云课堂" class="headerlink" title="5、网易云课堂"></a>5、网易云课堂</h2><p>网址：<a href="https://study.163.com/">https://study.163.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/bf54c2f66965007e.png" alt="网易云课堂"></p>
<p>网易云课堂与腾讯课堂相似，是专业的职业教育平台，上面大量的IT互联网热门课程，Python、编程、开发、大数据、AI、运营、营销等应有尽有，免费的课程也非常的多。</p>
<h2 id="6、腾讯课堂"><a href="#6、腾讯课堂" class="headerlink" title="6、腾讯课堂"></a>6、腾讯课堂</h2><p>网址：<a href="https://ke.qq.com/">https://ke.qq.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/98678aaf1ca130c6.png" alt="腾讯课堂"></p>
<p>腾讯课堂是腾讯推出的专业职业培训在线教育平台，其中也有很多IT互联网热门课程，可以免费报名学习自己想学的课程，只要用QQ号登录，就能观看了。除了IT课程外，还有非常多其它职业课程，在这里想学什么就学什么。</p>
<h2 id="7、W3school"><a href="#7、W3school" class="headerlink" title="7、W3school"></a>7、W3school</h2><p>网址：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/309b513543310206.png" alt="W3school"></p>
<p>全球最大的中文Web技术教程，在这里，你可以找到网站建设教程，从基础的HTML到XHTML，到进阶的XHL、SQL、数据库、多媒体和WAP。</p>
<h2 id="8、Udacity"><a href="#8、Udacity" class="headerlink" title="8、Udacity"></a>8、Udacity</h2><p>网址：<a href="https://www.udacity.com/">https://www.udacity.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/bdcee336471ae085.png" alt="Udacity"></p>
<p>职业编程的不二之选，提供微学位</p>
<h2 id="9、B站"><a href="#9、B站" class="headerlink" title="9、B站"></a>9、B站</h2><p>网址：<a href="https://www.bilibili.com/">https://www.bilibili.com</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/28c6c35dc6468c47.png" alt="B站"></p>
<p>B站。这个网站原本的定位是一个二次元动漫类的网站，可是走着走着，越走越偏，B站自己也万万没想到自己会变成一个学习类的网站。</p>
<p>对于程序员而言，这里有海量的编程类的学习资料。不管是什么类型的编程语言，编程技术，你几乎都可以在这里找到对应的视频教程。而且最重要的是，视频播放的时候，不会有任何烦人的广告，几乎不会受到任何打扰。</p>
<h2 id="10、我要自学网"><a href="#10、我要自学网" class="headerlink" title="10、我要自学网"></a>10、我要自学网</h2><p>网址：<a href="https://www.51zxw.net/">https://www.51zxw.net</a><br><img src="https://images.codeobservatory.cn/hexo/202506/06/1a6ce6678d1c6072.png" alt="我要自学网"></p>
<p>自学免费教程资源分享网站，学习电脑技术，涉及网页设计、程序设计、编程、大数据、软件开发等海量课程，还有PS、AE等海量软件教程。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>编程网站</tag>
        <tag>IT</tag>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title>C#多种实现异步编程的方式及优缺点</title>
    <url>/archives/bfda118c.html</url>
    <content><![CDATA[<p>C#提供了多种实现异步编程的方式，包括但不限于以下几种：</p>
<ol>
<li><p>异步方法（Async&#x2F;Await）：这是C# 5.0引入的最常用的异步编程模型。通过在方法前加上<code>async</code>关键字，并使用await关键字等待异步操作完成，可以编写出简洁、易读的异步代码。</p>
</li>
<li><p>Task-Based Asynchronous Pattern (TAP)：这是另一种异步编程模型，它基于Task类和Task<TResult>类。通过<code>Task.Run</code>方法可以轻松地启动异步操作，并通过Task.Wait或Task.Result等待任务完成。</TResult></p>
</li>
<li><p>BeginXXX&#x2F;EndXXX方法：这种方式是基于IAsyncResult接口的旧式异步编程模型，通常用于.NET Framework中的一些旧API。使用这种模型需要手动管理异步操作的开始和结束，并且代码通常比较复杂。</p>
</li>
<li><p>回调函数：在一些情况下，可以使用回调函数来实现异步操作。这种方式通常用于底层API或需要与非托管代码交互的场景。</p>
</li>
<li><p>事件：事件也可以用于实现异步编程，通过订阅事件并在事件触发时执行相应的操作。</p>
</li>
<li><p>基于事件的异步模式（EAP）：这是一种类似于回调函数的异步模型，通常用于某些特定场景，例如COM组件。</p>
</li>
<li><p>Channels：在C# 8.0及更高版本中，引入了channels用于生产者-消费者场景的异步编程。它提供了一种线程安全的方式来发送和接收数据。</p>
</li>
<li><p>自定义Task-Like类型：可以通过实现IAsyncResult接口来自定义类似于Task的异步类型。</p>
</li>
<li><p>Parallel类：虽然Parallel类主要用于并行计算，但也可以用于启动多个异步操作并等待它们完成。</p>
</li>
</ol>
<p>这些方式各有优缺点，选择哪种方式取决于具体的场景和需求。在大多数情况下，推荐使用基于异步方法的模型（Async&#x2F;Await），因为它提供了简洁、易读和高效的异步编程体验。</p>
<p>在C#中，最常用的异步编程方式是Async&#x2F;Await。这是C# 5.0引入的特性，允许以同步的方式编写异步代码，使得代码更简洁、易读，并且可以避免回调地狱等问题。async关键字用于标记方法为异步，而await关键字用于等待异步操作完成。使用Async&#x2F;Await可以简化异步编程，并提供更好的性能和可读性。</p>
<p>除了<code>Async/Await，Task</code>类和<code>Task&lt;TResult&gt;</code>类也是常用的异步编程模型。这些类提供了一种基于任务的异步模式（TAP），使得异步操作可以以任务的形式进行组织和处理。通过使用Task.Run方法可以轻松启动异步操作，并使用Task.Wait或Task.Result等待任务完成。</p>
<p>尽管Async&#x2F;Await是最常用的方式，但在某些情况下，例如与旧API交互或需要更细粒度控制时，其他异步编程模型可能更适合。因此，选择哪种方式取决于具体的场景和需求。</p>
<p><strong>C#异步编程的优点</strong>：</p>
<ul>
<li><p>提高性能：异步编程允许在不阻塞主线程的情况下执行I&#x2F;O操作或等待时间较长的任务，从而提高应用程序的响应速度和吞吐量。</p>
</li>
<li><p>简化并发编程：异步编程使得代码更加简洁和易读，特别是使用<code>Async/Await</code>模型时，可以避免回调地狱等问题。</p>
</li>
<li><p>减少资源消耗：由于异步操作是非阻塞的，因此可以减少线程的创建和销毁开销，并更有效地利用系统资源。</p>
</li>
<li><p>支持并发执行：异步编程允许在单个线程上同时执行多个任务，从而提高程序的并发执行能力。</p>
</li>
</ul>
<p><strong>C#异步编程的缺点</strong>：</p>
<ul>
<li><p>代码复杂度增加：异步编程需要处理异步操作的启动、等待和结果处理，这可能导致代码变得更加复杂和难以维护。</p>
</li>
<li><p>异常处理难度增加：异步编程中的异常处理比同步编程更加复杂，需要更加谨慎地处理异常情况，以避免出现意外的行为。</p>
</li>
<li><p>资源泄漏风险：如果没有正确地管理异步操作的资源，可能会导致资源泄漏问题，例如未释放锁、文件句柄或数据库连接等。</p>
</li>
<li><p>不适合所有场景：虽然异步编程在许多场景中很有用，但并不适合所有场景。例如，对于需要严格顺序执行的代码或需要保持同步的场景，异步编程可能不是最佳选择。</p>
</li>
</ul>
<p>因此，在使用C#异步编程时，需要根据具体的需求和场景权衡利弊，并谨慎处理其中的问题。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>异步</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>掌握C#编程语言和10个基本技巧.NET框架</title>
    <url>/archives/d2306485.html</url>
    <content><![CDATA[<p>C# 是一种通用的、面向对象的编程语言，它是 Microsoft 开发的一种编程语言，广泛用于开发.NET 应用程序。掌握 C# 和利用它的基本技巧对于开发人员来说非常重要。本文将介绍十个基本技巧，帮助你更好地掌握 C# 和利用它来开发.NET 框架。 </p>
<ol>
<li><p>使用命名空间：命名空间是 C# 中组织代码的一种方式。通过使用命名空间，你可以将相关的代码组织在一起，提高代码的可读性和维护性。 </p>
</li>
<li><p>理解变量和数据类型：在 C# 中，变量是用来存储数据的容器，而数据类型决定了变量可以存储的数据的种类。 </p>
</li>
<li><p>掌握条件语句和循环语句：条件语句和循环语句是控制程序执行流程的重要工具。通过掌握条件语句和循环语句，你可以编写出更灵活和高效的程序。 </p>
</li>
<li><p>使用面向对象编程：C# 是一种面向对象的编程语言，它支持封装、继承和多态等面向对象的特性。通过使用面向对象编程，你可以将复杂的问题分解成简单的对象，并通过对象之间的相互调用来解决问题。 </p>
</li>
<li><p>使用异常处理：异常是程序在运行过程中出现的错误或意外情况。通过使用异常处理，你可以对程序中可能出现的异常进行捕获和处理，保证程序的健壮性和可靠性。 </p>
</li>
<li><p>熟悉常用的.NET 框架类库：.NET 框架提供了丰富的类库，包括用于处理字符串、日期时间、文件操作等的类。熟悉并合理使用这些类库可以提高开发效率。 </p>
</li>
<li><p>使用 LINQ 进行数据查询：LINQ（Language Integrated Query）是 C# 中的一种查询语言，它提供了一种直观、简洁的方式来查询和操作数据。 </p>
</li>
<li><p>利用委托和事件：委托和事件是 C# 中用来处理事件和回调函数的机制。通过使用委托和事件，你可以更好地处理异步操作和事件触发。 </p>
</li>
<li><p>使用 Lambda 表达式：Lambda 表达式是 C# 中一种简洁的函数定义方式，它可以用来定义匿名函数和简化代码。 </p>
</li>
<li><p>善用调试工具：C# 提供了强大的调试工具，如 Visual Studio 调试器，通过善用这些工具，你可以更好地定位和解决程序中的问题。</p>
</li>
</ol>
<p>通过学习和掌握这些基本技巧，你将能够更好地利用 C# 并开发出高质量的.NET 应用程序。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>编程</tag>
        <tag>.NET框架</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 集合（Collection）</title>
    <url>/archives/9285d836.html</url>
    <content><![CDATA[<p>集合（<code>Collection</code>）类是专门用于数据存储和检索的类。这些类提供了对栈（<code>stack</code>）、队列（<code>queue</code>）、列表（<code>list</code>）和哈希表（<code>hash table</code>）的支持。大多数集合类实现了相同的接口。</p>
<p>集合（Collection）类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等等。这些类创建 Object 类的对象的集合。在 C# 中，Object 类是所有数据类型的基类。</p>
<p>各种集合类和它们的用法<br>下面是各种常用的 <code>System.Collection</code> 命名空间的类。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>描述和用法</th>
</tr>
</thead>
<tbody><tr>
<td>动态数组（ArrayList）</td>
<td>它代表了可被单独索引的对象的有序集合。<br>它基本上可以替代一个数组。但是，与数组不同的是，您可以使用索引在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。</td>
</tr>
<tr>
<td>哈希表（Hashtable）</td>
<td>它使用键来访问集合中的元素。<br>当您使用键访问元素时，则使用哈希表，而且您可以识别一个有用的键值。哈希表中的每一项都有一个键&#x2F;值对。键用于访问集合中的项目。</td>
</tr>
<tr>
<td>排序列表（SortedList）</td>
<td>它可以使用键和索引来访问列表中的项。<br>排序列表是数组和哈希表的组合。它包含一个可使用键或索引访问各项的列表。如果您使用索引访问各项，则它是一个动态数组（ArrayList），如果您使用键访问各项，则它是一个哈希表（Hashtable）。集合中的各项总是按键值排序。</td>
</tr>
<tr>
<td>堆栈（Stack）</td>
<td>它代表了一个后进先出的对象集合。<br>当您需要对各项进行后进先出的访问时，则使用堆栈。当您在列表中添加一项，称为推入元素，当您从列表中移除一项时，称为弹出元素。</td>
</tr>
<tr>
<td>队列（Queue）</td>
<td>它代表了一个先进先出的对象集合。<br>当您需要对各项进行先进先出的访问时，则使用队列。当您在列表中添加一项，称为入队，当您从列表中移除一项时，称为出队。</td>
</tr>
<tr>
<td>点阵列（BitArray）</td>
<td>它代表了一个使用值 1 和 0 来表示的二进制数组。<br>当您需要存储位，但是事先不知道位数时，则使用点阵列。您可以使用整型索引从点阵列集合中访问各项，索引从零开始。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Dump</title>
    <url>/archives/e75ede1b.html</url>
    <content><![CDATA[<p>dump，相信大家都不陌生吧！</p>
<p>那它到底是什么呢？干什么用的呢？如何使用呢？</p>
<p>接下来让我们一起看看吧。</p>
<p>dump 文件是进程的内存镜像，可以看作是程序运行状态的快照。它主要用于在出现问题时，保存进程的状态，方便后期进行分析和调试。对于驱动程序编写人员来说，dump 文件尤为重要，因为它可以用来调试驱动程序。</p>
<p>同时，dump 文件也常用于数据备份和恢复，例如在 Oracle 和 SQL 数据库中，dump 文件可以用来导出数据并实现后期的导入。</p>
<p>总的来说，dump 文件是一种重要的调试和分析工具，在程序出现问题时，可以通过它来获取进程的内存信息，帮助找出问题所在。</p>
<p>1、如何生成 dump 文件：在C#中生成dump文件通常有两种方法：</p>
<ul>
<li>使用 Visual Studio 的“Debug”菜单：在 Visual Studio 中，您可以通过选择“Debug”菜单，然后选择“Windows”下的“Mini-Dump”来生成 dump 文件。在弹出的对话框中，您可以选择生成 minidump 或 full dump 文件，还可以选择是否包括异常信息等。</li>
<li>使用异常处理程序（try&#x2F;catch）：在代码中使用 try&#x2F;catch 块来捕获异常，并在 catch 块中生成 dump 文件。以下是一个示例代码：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 代码...  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">catch</span> (Exception ex)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">// 生成 dump 文件...  </span></span><br><span class="line">    MiniDumpWriteDump(Process.GetCurrentProcess().Handle, Process.GetCurrentProcess().Id, <span class="string">&quot;dump.dmp&quot;</span>, MiniDumpNormal, <span class="literal">null</span>, ex.ToString(), <span class="literal">false</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，使用了 MiniDumpWriteDump 函数来生成 dump 文件。该函数的第一个参数是进程句柄，第二个参数是进程 ID，第三个参数是 dump 文件的路径和名称，第四个参数是 dump 文件的类型（这里使用了 MiniDumpNormal），第五个参数是异常信息（这里使用了 ex.ToString() 来将异常信息转换为字符串），第六个参数是是否压缩 dump 文件（这里使用了 false），最后一个参数是是否生成 full dump（这里使用了 false）。</p>
<p>请注意，为了使用 MiniDumpWriteDump 函数，您需要引用 System.Diagnostics 命名空间。此外，生成的 dump 文件将存储在当前工作目录下。</p>
<p>2、如何打开和分析 dump 文件：dump 文件需要使用专门的工具来打开和分析，例如 Windows 下的 WinDbg 工具或 Visual Studio 中的调试器等。通过分析 dump 文件，可以查看程序崩溃时的调用堆栈、线程状态、内存使用情况等信息，帮助定位问题。</p>
<p>3、dump 文件的格式：dump 文件的格式可能因操作系统和工具的不同而有所不同。例如，在 Windows 系统中，常见的 dump 文件格式包括 minidump、full dump、kernel dump 等。了解不同格式的 dump 文件有助于更好地进行调试和分析。</p>
<p>4、如何优化 dump 文件的大小：在某些情况下，dump 文件可能会非常大，导致存储和分析的困难。为了优化 dump 文件的大小，可以采取一些措施，例如只保存必要的内存区域、压缩 dump 文件等。</p>
<p>5、dump 文件的安全性：由于 dump 文件中包含了程序的内存信息，因此可能存在一些安全隐患。例如，攻击者可能会尝试通过分析 dump 文件来获取敏感信息或利用漏洞。因此，在处理 dump 文件时需要注意安全性问题，例如对 dump 文件进行加密或限制访问权限等。</p>
<p>以上是关于 dump 文件的一些分享，希望对您有所帮助。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Dump</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中Queue队列的基本使用示例</title>
    <url>/archives/7d9bdd8.html</url>
    <content><![CDATA[<p>在C#中，Queue是一个内置的<code>FIFO（First-In-First-Out）</code>集合，这意味着元素在队列中的顺序与它们被添加的顺序相同，当且仅当从队列中移除元素时，元素出队的顺序才是正确的。</p>
<p>Queue在.NET Framework中是一个泛型集合类型，这意味着你可以存储任何类型的元素。它提供了许多方法来操作队列，包括：</p>
<ol>
<li><p>Enqueue(T): 在队列的末尾添加一个元素。</p>
</li>
<li><p>Dequeue(): 移除并返回队列的第一个元素。</p>
</li>
<li><p>Peek(): 返回队列的第一个元素，但不移除它。</p>
</li>
<li><p>Count: 返回队列中元素的数量。</p>
</li>
<li><p>Clear(): 移除队列中的所有元素。</p>
</li>
</ol>
<p>这些方法可以帮助你有效地处理队列中的数据。</p>
<p>下面是在C#中使用Queue的基本示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 创建一个队列</span></span><br><span class="line">        Queue&lt;<span class="built_in">int</span>&gt; queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队列添加元素</span></span><br><span class="line">queue.Enqueue(<span class="number">1</span>);</span><br><span class="line">queue.Enqueue(<span class="number">2</span>);</span><br><span class="line">queue.Enqueue(<span class="number">3</span>);</span><br><span class="line">queue.Enqueue(<span class="number">4</span>);</span><br><span class="line">queue.Enqueue(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列中的元素</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;初始队列：&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> queue)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(item + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队列中取出元素并显示</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;取出元素：&quot;</span>);</span><br><span class="line"><span class="built_in">int</span> dequeueItem = queue.Dequeue();</span><br><span class="line">        Console.Write(dequeueItem + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示取出元素后的队列</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;取出元素后的队列：&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> queue)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(item + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例程序创建了一个<code>Queue&lt;int&gt;</code>对象，然后向这个队列添加了五个整数。接着，它从队列中取出一个元素并显示它，最后显示取出元素后的队列。</p>
<p><strong>优点和缺点</strong></p>
<p><strong>优点：</strong></p>
<ul>
<li>先进先出（FIFO）原则：Queue保证了元素的先进先出原则，即先添加到队列的元素会先被移除。</li>
<li>线程安全：Queue是一个线程安全的数据结构，可以在多线程环境中安全地使用。</li>
<li>高效的添加和移除操作：Queue的Enqueue和Dequeue操作都是常数时间复杂度O(1)，这意味着无论队列的大小如何，这些操作的速度都是相对稳定的。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>仅支持顺序访问：Queue不支持随机访问，也就是说不能直接获取队列中的任意元素，只能从头开始遍历或者移除元素。</li>
<li>不支持直接搜索：与数组和列表不同，Queue没有提供直接搜索元素的方法，只能通过遍历来查找元素。</li>
<li>容量限制：Queue的大小受到内存限制，当队列达到其容量时，将无法添加更多的元素。虽然可以通过Queue的构造函数来指定初始容量，但实际的容量仍然受到系统内存的限制。</li>
<li>不适用于需要快速直接访问的场景：由于Queue仅支持顺序访问，因此在需要快速直接访问某些元素的情况下，使用Queue可能不是最佳选择。例如，如果你需要在大量数据中快速查找特定元素，使用数组或列表可能更合适。</li>
</ul>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Queue</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中最有价值的10个语法糖一览：提升代码效率和可读性</title>
    <url>/archives/6a6e70d7.html</url>
    <content><![CDATA[<p>C# 语言中有很多语法糖，它们可以使代码更易读、更简洁，甚至在某些情况下提高性能。以下列出的是其中的10个最有价值的：</p>
<p>1、<strong>空合并运算符(??)</strong>：当一个值类型变量未被初始化时，使用空合并运算符可以为其提供一个默认值，而不是引发异常。例如：var name &#x3D; inputName ?? “DefaultName”;。</p>
<p>2、<strong>自动属性</strong>：通过自动属性，可以简洁地定义类中的属性，无需显式地写出 get 和 set 方法。例如：public string Name { get; set; }。</p>
<p>3、<strong>lambda表达式</strong>：lambda 表达式可以方便地创建匿名函数，使得代码更简洁、可读性更高。例如：var list &#x3D; people.Where(p &#x3D;&gt; p.Age &gt; 18);。</p>
<p>4、<strong>LINQ</strong>：LINQ 是 C# 中的一种查询语法，允许你在内存中操作数据，并且其语法与 SQL 非常相似。例如：var query &#x3D; from person in people where person.Age &gt; 18 select person;。</p>
<p>5、<strong>自动实现接口</strong>：当类实现一个接口时，如果类中已经有了接口中所有方法的实现，那么可以省略接口方法的声明，编译器会自动将其视为实现了接口。例如：public class MyClass : IMyInterface { &#x2F;* implementation *&#x2F; }。</p>
<p>6、<strong>对象和数组初始器</strong>：对象初始器和数组初始器允许你在创建对象或数组时直接为其成员或元素赋值。例如：var car &#x3D; new Car { Name &#x3D; “Ford”, Year &#x3D; 2000 }; 或 var array &#x3D; new int[] { 1, 2, 3 };。</p>
<p>7、<strong>可空类型</strong>：可空类型允许你使用空值表示某些值可能不存在。例如，string? name &#x3D; null;。</p>
<p>8、<strong>索引初始值设定项</strong>：这个语法糖允许你在数组或集合初始化时直接设置元素的索引。例如：var array &#x3D; new int[5] { [2] &#x3D; 2, [4] &#x3D; 4 };。</p>
<p>9、<strong>字符串插值</strong>：字符串插值允许你将变量或表达式的值直接插入到字符串中。例如：var name &#x3D; “John”; var message &#x3D; $”Hello, {name}!”;。</p>
<p>10、<strong>switch表达式</strong>：C# 8.0引入的 switch 表达式，提供了更灵活的多条件选择机制，而且语法糖味道十足。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> userInput.MatchAsync(    </span><br><span class="line"><span class="string">&quot;option1&quot;</span> =&gt; Task.FromResult(<span class="string">&quot;result1&quot;</span>),    </span><br><span class="line"><span class="string">&quot;option2&quot;</span> =&gt; Task.FromResult(<span class="string">&quot;result2&quot;</span>),    </span><br><span class="line"><span class="literal">default</span> =&gt; Task.FromException(<span class="keyword">new</span> Exception(<span class="string">&quot;Invalid option&quot;</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>这些只是 C# 提供的一些语法糖的例子，还有很多其他的语法糖可以让你的代码更加简洁、易读和高效。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>语法糖</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中使用AES算法实现软件加密</title>
    <url>/archives/fe5ee63c.html</url>
    <content><![CDATA[<p>在C#中实现软件加密可以通过多种方式来完成。以下是一种常见的方法，使用加密算法（如AES或RSA）来加密你的软件代码或关键数据。</p>
<p>以下是一个简单的示例，使用AES算法来加密和解密字符串：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AesExample</span>&#123;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>    </span><br><span class="line">&#123;        </span><br><span class="line"><span class="keyword">try</span>        </span><br><span class="line">&#123;            </span><br><span class="line"><span class="comment">// 原始数据            </span></span><br><span class="line"><span class="built_in">string</span> original = <span class="string">&quot;这是需要加密的原始数据&quot;</span>;            </span><br><span class="line">Console.WriteLine(<span class="string">&quot;Original: &quot;</span> + original);</span><br><span class="line">            <span class="comment">// 创建一个随机的密钥和初始化向量            </span></span><br><span class="line">            <span class="keyword">using</span> (Aes myAes = Aes.Create())            </span><br><span class="line">            &#123;                </span><br><span class="line">            <span class="built_in">byte</span>[] encrypted = EncryptStringToBytes_Aes(original, myAes.Key, myAes.IV);                </span><br><span class="line">            <span class="built_in">string</span> roundtrip = DecryptStringFromBytes_Aes(encrypted, myAes.Key, myAes.IV);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Encrypted: &quot;</span> + BitConverter.ToString(encrypted));                </span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Decrypted: &quot;</span> + roundtrip);            </span><br><span class="line">                &#125;        </span><br><span class="line">                &#125;        </span><br><span class="line">                <span class="keyword">catch</span> (Exception e)        </span><br><span class="line">                &#123;            </span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Error: &#123;0&#125;&quot;</span>, e.Message);        </span><br><span class="line">                &#125;    </span><br><span class="line">                &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">EncryptStringToBytes_Aes</span>(<span class="params"><span class="built_in">string</span> plainText, <span class="built_in">byte</span>[] Key, <span class="built_in">byte</span>[] IV</span>)</span>    </span><br><span class="line">    &#123;        </span><br><span class="line">    <span class="built_in">byte</span>[] encrypted;        </span><br><span class="line">    <span class="keyword">using</span> (Aes aesAlg = Aes.Create())        </span><br><span class="line">    &#123;            </span><br><span class="line">    aesAlg.Key = Key;            </span><br><span class="line">    aesAlg.IV = IV;            </span><br><span class="line">    ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);            </span><br><span class="line">    <span class="keyword">using</span> (MemoryStream msEncrypt = <span class="keyword">new</span> MemoryStream())            </span><br><span class="line">    &#123;                </span><br><span class="line">    <span class="keyword">using</span> (CryptoStream csEncrypt = <span class="keyword">new</span> CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))                </span><br><span class="line">    &#123;                    </span><br><span class="line">    <span class="keyword">using</span> (StreamWriter swEncrypt = <span class="keyword">new</span> StreamWriter(csEncrypt))                    </span><br><span class="line">    &#123;                        </span><br><span class="line">    swEncrypt.Write(plainText);                    </span><br><span class="line">    &#125;                    </span><br><span class="line">    encrypted = msEncrypt.ToArray();                </span><br><span class="line">    &#125;            </span><br><span class="line">    &#125;        </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> encrypted;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DecryptStringFromBytes_Aes</span>(<span class="params"><span class="built_in">byte</span>[] cipherText, <span class="built_in">byte</span>[] Key, <span class="built_in">byte</span>[] IV</span>)</span>    </span><br><span class="line">    &#123;        </span><br><span class="line">    <span class="built_in">string</span> plaintext = <span class="literal">null</span>;        </span><br><span class="line">    <span class="keyword">using</span> (Aes aesAlg = Aes.Create())        </span><br><span class="line">    &#123;            </span><br><span class="line">    aesAlg.Key = Key;            </span><br><span class="line">    aesAlg.IV = IV;            </span><br><span class="line">    ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);            </span><br><span class="line">    <span class="keyword">using</span> (MemoryStream msDecrypt = <span class="keyword">new</span> MemoryStream(cipherText))            </span><br><span class="line">    &#123;                </span><br><span class="line">    <span class="keyword">using</span> (CryptoStream csDecrypt = <span class="keyword">new</span> CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))                </span><br><span class="line">    &#123;                    </span><br><span class="line">    <span class="keyword">using</span> (StreamReader srDecrypt = <span class="keyword">new</span> StreamReader(csDecrypt))                    </span><br><span class="line">    &#123;                        </span><br><span class="line">    plaintext = srDecrypt.ReadToEnd();                    </span><br><span class="line">    &#125;                </span><br><span class="line">    &#125;            </span><br><span class="line">    &#125;        </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> plaintext;    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个例子只是为了说明加密和解密的过程。在实际应用中，你需要保管好你的密钥和初始化向量，以便在解密时使用。另外，这个例子中的密钥和初始化向量是随机生成的，实际应用中你可能需要一个安全的密钥和IV生成方式。同时，AES算法也有多种模式和填充方式，你可能需要根据实际需求来选择合适的模式和填充方式。此外，如果你需要对文件进行加密，那么你需要处理文件的读写和内存管理，这比处理字符串要复杂一些。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>AES</tag>
        <tag>算法</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>C#程序崩溃的排查与修复</title>
    <url>/archives/cef60bd8.html</url>
    <content><![CDATA[<p>在C#应用程序中，软件崩溃可能由多种原因造成，例如代码Bug、内存泄漏、无限递归、IO异常等。下面是一些排查C#软件崩溃的基本步骤：</p>
<p><strong>1. 查看错误信息</strong></p>
<p>当程序崩溃时，通常会在控制台或日志文件中输出错误信息。仔细查看错误信息，了解导致崩溃的原因。</p>
<p><strong>2. 调试程序</strong></p>
<p>可以使用调试器来跟踪程序的执行过程，以便找到导致崩溃的代码。可以在程序中添加断点，逐行执行代码并观察变量的值，以确定是否存在异常。</p>
<p><strong>3. 使用异常处理</strong></p>
<p>在程序中添加异常处理逻辑，以便捕获和处理错误。例如，在可能抛出异常的代码块周围添加try-catch语句，并在catch块中处理异常情况。</p>
<p><strong>4. 检查内存泄漏</strong></p>
<p>如果程序崩溃是由于内存泄漏引起的，可以使用内存分析工具来检测内存泄漏的原因。例如，可以使用.NET的内存分析工具（如dotMemory）来检测内存泄漏。</p>
<p><strong>5. 检查I&#x2F;O操作</strong></p>
<p>I&#x2F;O操作可能会出现各种问题，如超时、文件未找到、权限等问题。如果应用程序崩溃与I&#x2F;O操作相关，则需要仔细检查I&#x2F;O操作并确保它们正确处理异常情况。</p>
<p><strong>6. 查看事件日志</strong></p>
<p>可以查看Windows事件日志或应用程序日志，以了解有关程序崩溃的更多详细信息。事件日志通常会提供有关崩溃原因的更多上下文信息。</p>
<p><strong>7. 检查第三方库</strong></p>
<p>如果程序使用了第三方库，请确保使用的库版本与程序兼容，并且没有已知的崩溃问题。</p>
<p><strong>8. 更新程序和库</strong></p>
<p>如果程序或使用的库有更新可用，请尝试更新到最新版本，以查看是否解决了崩溃问题。</p>
<p><strong>9. 检查硬件问题</strong></p>
<p>如果程序崩溃是由于硬件问题引起的，例如内存不足或磁盘空间不足等，请检查硬件是否正常运行。</p>
<p><strong>10. 重新设计程序</strong></p>
<p>如果程序崩溃是由于设计问题引起的，例如存在逻辑错误或数据结构不正确等，可能需要重新设计程序的一部分。</p>
<p>总之，需要根据具体情况采取相应的排查和解决方案。在处理C#软件崩溃时，需要耐心细致地进行排查和解决。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>程序</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐5款美观实用的WinForm开源UI库</title>
    <url>/archives/b214051.html</url>
    <content><![CDATA[<h2 id="1、NanUI"><a href="#1、NanUI" class="headerlink" title="1、NanUI"></a>1、NanUI</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/09/36b3d9dbb2f0cb03.png"></p>
<p>NanUI 界面组件是一个开放源代码的 .NET &#x2F; .NET Core 窗体应用程序（WinForms）界面组件。她适用于希望使用 HTML5&#x2F;CSS3 等前端技术来构建 Windows 窗体应用程序用户界面的 .NET&#x2F;.NET Core 开发人员。</p>
<p>NanUI 的渲染引擎 WinFormium 基于谷歌可嵌入的浏览器框架 Chromium Embedded Framework，因此用户可以使用各种前端技术 HTML5&#x2F;CSS3&#x2F;JavaScript 和框架 React&#x2F;Vue&#x2F;Angular&#x2F;Blazor 设计和开发.NET 桌面应用程序的用户界面。</p>
<p>同时，WinFormium 特有的 JavaScript Bridge 可以方便简洁地实现浏览器端与 .NET 之间的通信和数据交换。</p>
<p>使用 NanUI 界面框架将为传统的 WinForm 应用程序的用户界面设计和开发工作带来无限种可能！</p>
<p>开源链接：<a href="https://gitee.com/linxuanchen/NanUI">https://gitee.com/linxuanchen/NanUI</a></p>
<h2 id="2、SunnyUI"><a href="#2、SunnyUI" class="headerlink" title="2、SunnyUI"></a>2、SunnyUI</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/09/3e607198b8938521.png"></p>
<p>SunnyUI.Net是基于 C# 和 .Net WinForm 的开源控件库、工具类库、扩展类库、多页面开发框架。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/09/8d7e524a4d503a03.png"></p>
<p>基于 framework4.0，原生控件开发，参考 Element、DotNetBar 主题风格，包含 Button、Panel、TextBox、CheckBox、RadioButton、TabControl、NavBar、DataGridView在内的常用控件超过 40 个，满足常规开发需求，每个控件都精雕细琢，注重细节。</p>
<p>开源链接：<a href="https://gitee.com/yhuse/SunnyUI">https://gitee.com/yhuse/SunnyUI</a></p>
<h2 id="3、HZHControls"><a href="#3、HZHControls" class="headerlink" title="3、HZHControls"></a>3、HZHControls</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/09/b246cda085f3962c.png"></p>
<p>c#winform自定义控件，对触屏具有更好的操作支持，项目是基于framework4.0，完全原生控件开发，没有使用任何第三方控件，你可以放心的用在你的项目中。</p>
<p>开源链接：<a href="https://gitee.com/kwwwvagaa/net_winform_custom_control">https://gitee.com/kwwwvagaa/net_winform_custom_control</a></p>
<h2 id="4、EASkins"><a href="#4、EASkins" class="headerlink" title="4、EASkins"></a>4、EASkins</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/09/1005114fbdff72c.png"></p>
<p>开源链接：<a href="https://gitee.com/airscrat/EASkins">https://gitee.com/airscrat/EASkins</a></p>
<h2 id="5、MaterialSkin"><a href="#5、MaterialSkin" class="headerlink" title="5、MaterialSkin"></a>5、MaterialSkin</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/09/8124a2755cef57a3.png"></p>
<p>将.NET WinForms，C＃或主题化为Google的Material Design。</p>
<p>开源链接：<a href="https://github.com/IgnaceMaes/MaterialSkin">https://github.com/IgnaceMaes/MaterialSkin</a></p>
<blockquote>
<p>如果你还知道更牛x的winform开源UI库，欢迎推荐！</p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>WinForm</tag>
        <tag>开源</tag>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title>C#实现异步的常用方式总结</title>
    <url>/archives/df342274.html</url>
    <content><![CDATA[<p>微信群里的一个提问引发的这个问题，C#异步有多少种实现方式？首先想要知道C#异步有多少中实现方式，首先我们要知道.NET提供的执行异步操作的三种模式，然后再去了解C#异步实现的方式。</p>
<h2 id="NET异步编程模式"><a href="#NET异步编程模式" class="headerlink" title=".NET异步编程模式"></a>.NET异步编程模式</h2><p><strong>.NET 提供了执行异步操作的三种模式：</strong></p>
<ul>
<li>基于任务的异步模式 (TAP) ，该模式使用单一方法表示异步操作的开始和完成。TAP 是在 .NET Framework 4 中引入的。 这是在 .NET 中进行异步编程的推荐方法。C# 中的 async 和 await 关键词以及 Visual Basic 中的 Async 和 Await 运算符为 TAP 添加了语言支持。有关详细信息，请参阅基于任务的异步模式 (TAP)。</li>
<li>基于事件的异步模式 (EAP)，是提供异步行为的基于事件的旧模型。这种模式需要后缀为 Async 的方法，以及一个或多个事件、事件处理程序委托类型和 EventArg 派生类型。EAP 是在 .NET Framework 2.0 中引入的。建议新开发中不再使用这种模式。有关详细信息，请参阅基于事件的异步模式 (EAP)。</li>
<li>异步编程模型 (APM) 模式（也称为 IAsyncResult 模式），这是使用 IAsyncResult 接口提供异步行为的旧模型。在这种模式下，同步操作需要 Begin 和 End 方法（例如，BeginWrite 和 EndWrite以实现异步写入操作）。不建议新的开发使用此模式。有关详细信息，请参阅异步编程模型 (APM)。</li>
</ul>
<h2 id="C-异步有四种实现方式"><a href="#C-异步有四种实现方式" class="headerlink" title="C#异步有四种实现方式"></a>C#异步有四种实现方式</h2><p><strong>C# 异步有多种实现方式，可归纳为以下几类：</strong></p>
<h3 id="1、异步方法（Async-Method-TAP模式）"><a href="#1、异步方法（Async-Method-TAP模式）" class="headerlink" title="1、异步方法（Async Method TAP模式）"></a>1、异步方法（Async Method TAP模式）</h3><p>使用async&#x2F;await关键字实现异步编程，这是比较常用的一种异步实现方式。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">TestDoSomeAsync</span>()</span>    &#123;  </span><br><span class="line">      <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);      </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Async method completed.&quot;</span>);  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、任务并行库（TPL-Task-Parallel-Library-TAP模式）"><a href="#2、任务并行库（TPL-Task-Parallel-Library-TAP模式）" class="headerlink" title="2、任务并行库（TPL, Task Parallel Library TAP模式）"></a>2、任务并行库（TPL, Task Parallel Library TAP模式）</h3><p>通过 Task 和 Task<T> 类型实现异步编程，可以利用多核处理器，并发执行多个独立的任务。例如：</T></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>    &#123;      </span><br><span class="line">  <span class="keyword">await</span> Task.Run(() =&gt;        &#123;           </span><br><span class="line">   Console.WriteLine(<span class="string">&quot;Test Task 1 completed.&quot;</span>);  </span><br><span class="line">         &#125;);     </span><br><span class="line">            <span class="keyword">await</span> Task.Run(() =&gt;        &#123;    </span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Test Task 2 completed.&quot;</span>);   </span><br><span class="line">                         &#125;);       </span><br><span class="line">                          <span class="comment">// 等待所有任务完成     </span></span><br><span class="line">                             Task.WaitAll();  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、Asynchronous-Programming-Model（APM模式）"><a href="#3、Asynchronous-Programming-Model（APM模式）" class="headerlink" title="3、Asynchronous Programming Model（APM模式）"></a>3、Asynchronous Programming Model（APM模式）</h3><p>是一种经典的异步编程模式，需要手动创建回调函数，用于处理完成或错误的通知。可以通过 IAsyncResult 设计模式的 Begin 和 End 方法来实现，其中 Begin 方法开始异步操作，而 End 方法在异步操作完成时执行，并返回异步操作的结果。</p>
<p>需要注意的是，APM 模式通过 IAsyncResult 接口来存储异步操作的状态和结果，相对比较复杂，代码量也较大。同时，在使用 APM 模式时，还需要手动处理回调函数和等待异步操作完成等细节工作，使得开发起来相对较为繁琐。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span>    &#123;     </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>        &#123;     </span><br><span class="line">         <span class="comment">// 创建异步操作类实例         </span></span><br><span class="line">            MyAsyncClass asyncClass = <span class="keyword">new</span> MyAsyncClass();</span><br><span class="line">            <span class="comment">// 开始异步操作      </span></span><br><span class="line">                  IAsyncResult result = asyncClass.BeginDoWork(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 主线程执行其他操作    </span></span><br><span class="line">                    <span class="comment">// 等待异步操作完成并获取结果  </span></span><br><span class="line">                             <span class="built_in">int</span> res = asyncClass.EndDoWork(result);</span><br><span class="line">            <span class="comment">// 处理异步操作的结果        </span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Result: &quot;</span> + res);</span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">                  &#125; </span><br><span class="line">                     &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyAsyncClass</span>    &#123;  </span><br><span class="line">          <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">          <span class="comment"><span class="doctag">///</span> 异步执行的方法        </span></span><br><span class="line">          <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">          <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;callback&quot;&gt;</span>callback<span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">          <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;state&quot;&gt;</span>state<span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">          <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span>        </span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> IAsyncResult <span class="title">BeginDoWork</span>(<span class="params">AsyncCallback callback, <span class="built_in">object</span> state</span>)</span>        &#123;   </span><br><span class="line">                   <span class="comment">// 创建一个新的异步操作对象         </span></span><br><span class="line">                      MyAsyncResult result = <span class="keyword">new</span> MyAsyncResult(state);</span><br><span class="line">            <span class="comment">// 开始异步操作          </span></span><br><span class="line">              Thread thread = <span class="keyword">new</span> Thread(() =&gt;            </span><br><span class="line">              &#123;       </span><br><span class="line">                       <span class="keyword">try</span>                </span><br><span class="line">                       &#123;           </span><br><span class="line">                    <span class="comment">// 执行一些操作   </span></span><br><span class="line">                                                 <span class="built_in">int</span> res = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">                    <span class="comment">// 设置异步操作的结果     </span></span><br><span class="line">                                   result.Result = res;</span><br><span class="line">                    <span class="comment">// 触发回调函数            </span></span><br><span class="line">                            callback?.Invoke(result);      </span><br><span class="line">                                      &#125;             </span><br><span class="line">                                         <span class="keyword">catch</span> (Exception ex)                &#123;  </span><br><span class="line">                                                           <span class="comment">// 设置异步操作的异常    </span></span><br><span class="line">                                                                           result.Error = ex;</span><br><span class="line">                    <span class="comment">// 触发回调函数                    </span></span><br><span class="line">                    callback?.Invoke(result);                </span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;);            </span><br><span class="line">            thread.Start();</span><br><span class="line">            <span class="comment">// 返回异步操作对象            </span></span><br><span class="line">            <span class="keyword">return</span> result;        </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 结束异步执行的方法        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;result&quot;&gt;</span>result<span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span>        </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">EndDoWork</span>(<span class="params">IAsyncResult result</span>)</span>        </span><br><span class="line">        &#123;            </span><br><span class="line">        <span class="comment">// 将 IAsyncResult 转换为 MyAsyncResult 类型，并等待异步操作完成            </span></span><br><span class="line">        MyAsyncResult myResult = (MyAsyncResult)result;            </span><br><span class="line">        myResult.AsyncWaitHandle.WaitOne();</span><br><span class="line">            <span class="comment">// 在异步操作中抛出异常            </span></span><br><span class="line">            <span class="keyword">if</span> (myResult.Error != <span class="literal">null</span>)            </span><br><span class="line">            &#123;                <span class="keyword">throw</span> myResult.Error;            &#125;</span><br><span class="line">            <span class="comment">// 返回异步操作的结果            </span></span><br><span class="line">            <span class="keyword">return</span> myResult.Result;        </span><br><span class="line">            &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyAsyncResult</span> : <span class="title">IAsyncResult</span>    &#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; AsyncWaitHandle.WaitOne(<span class="number">0</span>);        </span><br><span class="line">    <span class="keyword">public</span> WaitHandle AsyncWaitHandle &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> ManualResetEvent(<span class="literal">false</span>);        </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> AsyncState &#123; <span class="keyword">get</span>; &#125;        </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CompletedSynchronously =&gt; <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 存储异步操作的结果或异常信息        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">        <span class="keyword">public</span> Exception Error &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;asyncState&quot;&gt;</span>asyncState<span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAsyncResult</span>(<span class="params"><span class="built_in">object</span> asyncState</span>)</span>        </span><br><span class="line">        &#123;            </span><br><span class="line">        AsyncState = asyncState;        </span><br><span class="line">        &#125;    </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、Event-based-Asynchronous-Pattern（EAP模式）"><a href="#4、Event-based-Asynchronous-Pattern（EAP模式）" class="headerlink" title="4、Event-based Asynchronous Pattern（EAP模式）"></a>4、Event-based Asynchronous Pattern（EAP模式）</h3><p>一种已过时的异步编程模式，需要使用事件来实现异步编程。例如：</p>
<p>需要注意的是，EAP 模式通过事件来实现异步编程，相对于 APM 模式更加简洁易懂，同时也避免了手动处理回调函数等细节工作。但是，EAP 模式并不支持 async&#x2F;await 异步关键字，因此在一些特定的场景下可能不够灵活。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyAsyncClass</span> : <span class="title">Component</span>    </span><br><span class="line">&#123;        </span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 声明一个委托类型，用于定义异步操作的方法签名        </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;arg&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span>        </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyAsyncDelegate</span>(<span class="params"><span class="built_in">int</span> arg</span>)</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 声明一个事件，用于通知异步操作的完成        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MyAsyncDelegate OperationNameCompleted;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 异步执行方法，接受一个参数 arg        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;arg&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWorkAsync</span>(<span class="params"><span class="built_in">int</span> arg</span>)</span>        </span><br><span class="line">        &#123;            </span><br><span class="line">        <span class="comment">// 将异步操作放入线程池中执行            </span></span><br><span class="line">        ThreadPool.QueueUserWorkItem(<span class="keyword">new</span> WaitCallback(DoWork), arg);        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 真正的异步操作        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>        </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>        </span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span>        </span><br><span class="line">        &#123;            </span><br><span class="line">        <span class="built_in">int</span> arg = (<span class="built_in">int</span>)obj;            </span><br><span class="line">        <span class="built_in">int</span> res = arg + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 触发事件，传递异步操作的结果            </span></span><br><span class="line">            OperationNameCompleted?.Invoke(res);        </span><br><span class="line">            &#125;    </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>以上就是C#实现异步的常用方式总结的详细内容。欢迎留言讨论！</p>
<blockquote>
<p>版权声明：本文来源于网友收集或网友供稿，仅供学习交流之用，如果有侵权，请转告小编或者留言，本站立即删除。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>wpf中应用最广泛的第三方开源界面控件库介绍和用法举例</title>
    <url>/archives/5fbba69.html</url>
    <content><![CDATA[<p>WPF（Windows Presentation Foundation）是一种用于构建桌面应用程序的富客户端应用程序平台，它提供了许多内置的界面控件，但是有时候您可能需要使用一些第三方开源界面控件库来增强您的应用程序的功能和外观。以下是WPF中最广泛使用的三个第三方开源界面控件库及其用法举例：</p>
<h2 id="1、Prism"><a href="#1、Prism" class="headerlink" title="1、Prism"></a>1、Prism</h2><p>Prism是一个流行的WPF界面设计模式库，它提供了一些设计模式和控件，以帮助您构建可扩展、模块化和易于维护的应用程序。Prism控件库包括以下控件：</p>
<ul>
<li><p>（1）Region控件：用于将视图与特定的区域关联起来，以便在应用程序中实现导航和视图之间的切换。</p>
</li>
<li><p>（2）SplitView控件：用于实现应用程序的布局，它可以将应用程序划分为多个区域，并允许用户在多个区域之间进行导航。</p>
</li>
<li><p>（3）ContentControl控件：用于在应用程序中显示不同的视图或内容。</p>
</li>
</ul>
<p>以下是Prism的用法举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在XAML中创建一个Region控件</span><br><span class="line">&lt;prism:Region Name=<span class="string">&quot;Region1&quot;</span> /&gt;</span><br><span class="line">// 在XAML中创建一个SplitView控件</span><br><span class="line">&lt;prism:SplitView Name=<span class="string">&quot;SplitView1&quot;</span> IsPaneOpen=<span class="string">&quot;True&quot;</span> DisplayMode=<span class="string">&quot;Overlay&quot;</span>&gt;    </span><br><span class="line">&lt;prism:SplitView.Pane&gt;        </span><br><span class="line">&lt;!-- 在此添加导航菜单 --&gt;    </span><br><span class="line">&lt;/prism:SplitView.Pane&gt;    </span><br><span class="line">&lt;prism:SplitView.Content&gt;        </span><br><span class="line">&lt;!-- 在此添加主要内容 --&gt;    </span><br><span class="line">&lt;/prism:SplitView.Content&gt;</span><br><span class="line">&lt;/prism:SplitView&gt;</span><br><span class="line">// 在代码中使用ContentControl控件</span><br><span class="line">var content = new ViewA(); // ViewA是一个自定义视图类</span><br><span class="line">prism:Region1.Add(content); // 将视图添加到Region中</span><br><span class="line">prism:Region1.Activate(content); // 激活视图</span><br></pre></td></tr></table></figure>

<h2 id="2、AvalonDock"><a href="#2、AvalonDock" class="headerlink" title="2、AvalonDock"></a>2、AvalonDock</h2><p>AvalonDock是一个功能强大的WPF文档导向型应用程序界面库，它提供了许多文档导向型界面元素，如窗口、面板、选项卡等。AvalonDock控件库包括以下控件：</p>
<ul>
<li><p>（1）DockingManager控件：用于管理应用程序中的所有文档导向型界面元素。</p>
</li>
<li><p>（2）DocumentWindow控件：用于显示文档窗口，并允许用户打开、关闭和保存文档。</p>
</li>
<li><p>（3）DocumentTab控件：用于显示文档选项卡，并允许用户在不同的文档之间进行切换。</p>
</li>
</ul>
<p>以下是AvalonDock的用法举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在XAML中创建一个DockingManager控件</span><br><span class="line">&lt;avalonDock:DockingManager Name=<span class="string">&quot;DockingManager1&quot;</span>&gt;    </span><br><span class="line">&lt;!-- 在此添加面板、窗口和选项卡等界面元素 --&gt;</span><br><span class="line">&lt;/avalonDock:DockingManager&gt;</span><br><span class="line">// 在代码中使用DocumentWindow控件和DocumentTab控件</span><br><span class="line">var documentWindow = new DocumentWindow(); </span><br><span class="line">// 创建一个文档窗口</span><br><span class="line">var documentTab = new DocumentTab(); </span><br><span class="line">// 创建一个文档选项卡</span><br><span class="line">documentWindow.Content = documentTab; </span><br><span class="line">// 将文档选项卡添加到文档窗口中</span><br><span class="line">DockingManager1.MainWindow.DocumentWindows.Add(documentWindow); </span><br><span class="line">// 将文档窗口添加到主窗口中</span><br><span class="line">DockingManager1.MainWindow.DocumentWindows[0].DocumentTabs.Add(documentTab); </span><br><span class="line">// 将文档选项卡添加到文档窗口中</span><br></pre></td></tr></table></figure>

<h2 id="3、Caliburn-Micro"><a href="#3、Caliburn-Micro" class="headerlink" title="3、Caliburn.Micro"></a>3、Caliburn.Micro</h2><p>Caliburn.Micro是一个轻量级的WPF应用程序框架，它提供了一些工具和控件，以帮助您构建易于维护、可扩展和响应式的应用程序。Caliburn.Micro控件库包括以下控件：</p>
<ul>
<li><p>（1）ActionMessage控件：用于将消息发送到应用程序中的特定目标方法。</p>
</li>
<li><p>（2）MessageBox控件：用于显示包含文本和按钮的消息框。</p>
</li>
</ul>
<p>以下是Caliburn.Micro的用法举例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在XAML中使用ActionMessage控件发送消息</span><br><span class="line">&lt;Button cal:Message.Action=<span class="string">&quot;DoSomething&quot;</span>&gt;Click Me&lt;/Button&gt; // DoSomething是一个自定义方法，用于执行特定操作</span><br><span class="line">// 在代码中使用MessageBox控件显示消息框</span><br><span class="line">await MessageBox.ShowAsync(<span class="string">&quot;Hello World!&quot;</span>); // 显示包含文本“Hello World!”的消息框，并等待用户进行选择操作。</span><br></pre></td></tr></table></figure>

<p>以上是WPF中最广泛使用的三个开源控件库介绍和用法举例。这些控件库都提供了大量功能和样式，帮助开发人员创建高质量的用户界面。当然，还有其他一些开源或商业界面控件库可供选择，根据不同的需求选择最适合自己的控件库是非常重要的。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>开源</tag>
        <tag>wpf</tag>
        <tag>控件</tag>
      </tags>
  </entry>
  <entry>
    <title>这台计算机上缺少此项目引用的 NuGet 程序包。使用“NuGet 程序包还原”解决办法</title>
    <url>/archives/81c451e5.html</url>
    <content><![CDATA[<p><img src="https://images.codeobservatory.cn/hexo/202506/10/16900eb13cbb885.png" alt="代码报错截图"><br>将项目复制到其地方的时候编译会报错，按照官网方法也不行，从网上查了一个有用的方法如下</p>
<p>打开CSPROJ文件。删除如下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Import</span> <span class="attr">Project</span>=<span class="string">&quot;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&quot;</span> <span class="attr">Condition</span>=<span class="string">&quot;Exists(&#x27;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;EnsureNuGetPackageBuildImports&quot;</span> <span class="attr">BeforeTargets</span>=<span class="string">&quot;PrepareForBuild&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ErrorText</span>&gt;</span>这台计算机上缺少此项目引用的 NuGet 程序包。使用“NuGet 程序包还原”可下载这些程序包。有关更多信息，请参见 http://go.microsoft.com/fwlink/?LinkID=322105。缺少的文件是 &#123;0&#125;。<span class="tag">&lt;/<span class="name">ErrorText</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Error</span> <span class="attr">Condition</span>=<span class="string">&quot;!Exists(&#x27;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&#x27;)&quot;</span> <span class="attr">Text</span>=<span class="string">&quot;$([System.String]::Format(&#x27;$(ErrorText)&#x27;, &#x27;..\packages\System.Data.SQLite.Core.1.0.109.2\build\net46\System.Data.SQLite.Core.targets&#x27;))&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>删除后重新编译即可。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>NuGet</tag>
        <tag>引用</tag>
      </tags>
  </entry>
  <entry>
    <title>.net解决伪静态下，html页面无法访问</title>
    <url>/archives/e4ed615.html</url>
    <content><![CDATA[<p>错误信息：</p>
<p>There is no build provider registered for the extension ‘.html’. You can register one in the <compilation><buildProviders> section in machine.config or web.config. Make sure is has a BuildProviderAppliesToAttribute attribute which includes the value ‘Web’ or ‘All’.</buildProviders></compilation></p>
<p>Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. </p>
<p>Exception Details: System.Web.HttpException: There is no build provider registered for the extension ‘.html’. You can register one in the <compilation><buildProviders> section in machine.config or web.config. Make sure is has a BuildProviderAppliesToAttribute attribute which includes the value ‘Web’ or ‘All’.</buildProviders></compilation></p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/10/6e774917c7861861.png" alt="网页报错截图"></p>
<p>解决方案：</p>
<p>1、在&lt;system.webServer&gt;节点下添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">handlers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;GreenHandlers&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*.aspx&quot;</span> <span class="attr">type</span>=<span class="string">&quot;URLRewriter.RewriterFactoryHandler, URLRewriter&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;MobileHandlers&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*.html&quot;</span> <span class="attr">type</span>=<span class="string">&quot;URLRewriter.RewriterFactoryHandler, URLRewriter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">handlers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在<compilation debug="true">节点下添加：</compilation></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--URL重写文件设置开始--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">buildProviders</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">extension</span>=<span class="string">&quot;.html&quot;</span> <span class="attr">type</span>=<span class="string">&quot;System.Web.Compilation.PageBuildProvider&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">buildProviders</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--URL重写文件设置结束--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>.net</tag>
        <tag>伪静态</tag>
      </tags>
  </entry>
  <entry>
    <title>C#接口</title>
    <url>/archives/d4f642a0.html</url>
    <content><![CDATA[<p>今天就来简单的介绍下接口的基本概念及用法：</p>
<h2 id="1、接口的概念及声明"><a href="#1、接口的概念及声明" class="headerlink" title="1、接口的概念及声明"></a>1、接口的概念及声明</h2><p>接口是一种用来定义程序的协议，它描述可属于任何类或结构的一组相关行为。接口可有方法、属性、事件和索引器或这四种成员的任何组合类型，但不能包含字段。</p>
<p>那么接口具有哪些特点呢？</p>
<ul>
<li>接口类似于抽象基类：继承接口的任何非抽象类型都必须实现接口的所有成员(说明：如类A继承接口B，那么A中必须实现B中定义的属性，方法等)。</li>
<li>不能直接实例化接口</li>
<li>接口可以包含事件、索引器、方法和属性</li>
<li>接口不包含方法的实现</li>
<li>类和接口可以从多个接口继承</li>
<li>接口自身可以继承多个接口</li>
</ul>
<p>在声明接口时除了Interface和接口名称是必须的，其他都是可选项。另可使用new、public、protected、intenal和private等修饰符实现接口，但接口成员必须是公共的。</p>
<h2 id="2、接口的实现与继承"><a href="#2、接口的实现与继承" class="headerlink" title="2、接口的实现与继承"></a>2、接口的实现与继承</h2><p>声明实现接口的类时，需要在基类列表中包含类所实现的接口的名称。</p>
<p>下面举个小例子来探讨下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> _</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ImyInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 编号（可读可写）</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="built_in">string</span> ID</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 姓名（可读可写）</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 显示定义的编号和姓名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ShowInfo</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>:<span class="title">ImyInterface</span><span class="comment">//继承自接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> id = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 编号</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ID</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> id;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                id = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 姓名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                name = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 显示定义的编号和姓名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;编号\t 姓名&quot;</span>);</span><br><span class="line">            Console.WriteLine(ID + <span class="string">&quot;\t &quot;</span> + Name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Program program = <span class="keyword">new</span> Program();               <span class="comment">//实例化Program类对象</span></span><br><span class="line">            ImyInterface imyinterface = program;           <span class="comment">//使用派生类对象实例化接口ImyInterface</span></span><br><span class="line">            imyinterface.ID = <span class="string">&quot;TM&quot;</span>;                        <span class="comment">//为派生类中的ID属性赋值</span></span><br><span class="line">            imyinterface.Name = <span class="string">&quot;C# 2.0从入门到应用开发&quot;</span>;  <span class="comment">//为派生类中的Name属性赋值</span></span><br><span class="line">            imyinterface.ShowInfo();                       <span class="comment">//调用派生类中方法显示定义的属性值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的这个例子是一个简单的一个类继承一个接口，如要实现接口类中对应的成员必须是公共的、非静态的，并且与接口成员具有相同的名称和签名。并且接口的实例化不能像类那样Program program &#x3D; new Program();其中上述程序中红色部分即为接口的实例化(使用派生类对象实例化接口)。</p>
<p>单一继承时这样的，那么多重继承呢？OK，我们来看下个例子：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> _</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IPeople</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 姓名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 性别</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="built_in">string</span> Sex</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ITeacher</span>:<span class="title">IPeople</span>            <span class="comment">//继承公共接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 教学方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">teach</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IStudent</span>:<span class="title">IPeople</span>            <span class="comment">//继承公共接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 学习方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">study</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>:<span class="title">IPeople</span>,<span class="title">ITeacher</span>,<span class="title">IStudent</span><span class="comment">//多接口继承</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> sex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 姓名</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                name = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 性别</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Sex</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> sex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                sex = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 教学方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name + <span class="string">&quot; &quot;</span> + Sex + <span class="string">&quot; 教师&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 学习方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name + <span class="string">&quot; &quot;</span> + Sex + <span class="string">&quot; 学生&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Program program = <span class="keyword">new</span> Program();   <span class="comment">//实例化类对象</span></span><br><span class="line">            ITeacher iteacher = program;       <span class="comment">//使用派生类对象实例化接口ITeacher</span></span><br><span class="line">            iteacher.Name = <span class="string">&quot;TM&quot;</span>;</span><br><span class="line">            iteacher.Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">            iteacher.teach();</span><br><span class="line">            IStudent istudent = program;       <span class="comment">//使用派生类对象实例化接口IStudent</span></span><br><span class="line">            istudent.Name = <span class="string">&quot;C#&quot;</span>;</span><br><span class="line">            istudent.Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">            istudent.study();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的多重继承中说明了，在派生类中必须实现所继承的接口中的所有方法。OK，单一继承和多重继承都有了了解之后，是不是没有其他的需要了解的呢？试想一下，如果在一个类A继承自接口B和C，并且在B和C中包含具有相同签名的成员，那么在类中实现该成员将导致两个接口都使用该成员作为他们的实现，然而，如果两个接口成员实现不同的功能，那么将会导致一个接口的成员实现不正确或两个接口的成员实现都不正确，这个时候我们应该如何处理呢？我们可以显示的实现接口成员，即创建一个仅通过接口调用并且特定于该接口的类成员。</p>
<p>下面也是一个通过一个实例来说明</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> _</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ImyInterface1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求和方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加法运算的和<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">int</span> <span class="title">Add</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title">ImyInterface2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求和方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加法运算的和<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">int</span> <span class="title">Add</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">myClass</span> : <span class="title">ImyInterface1</span>, <span class="title">ImyInterface2</span>    <span class="comment">//继承接口</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求和方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加法运算的和<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="built_in">int</span> ImyInterface1.Add()                     <span class="comment">//显式接口成员实现</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">3</span>;</span><br><span class="line">            <span class="built_in">int</span> y = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 求和方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>加法运算的和<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="built_in">int</span> ImyInterface2.Add()                      <span class="comment">//显式接口成员实现</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> x = <span class="number">3</span>;</span><br><span class="line">            <span class="built_in">int</span> y = <span class="number">5</span>;</span><br><span class="line">            <span class="built_in">int</span> z = <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">return</span> x + y + z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            myClass myclass = <span class="keyword">new</span> myClass();          <span class="comment">//实例化接口继承类的对象</span></span><br><span class="line">            ImyInterface1 imyinterface1 = myclass;    <span class="comment">//使用接口继承类的对象实例化接口</span></span><br><span class="line">            Console.WriteLine(imyinterface1.Add());   <span class="comment">//使用接口对象调用接口中方法</span></span><br><span class="line">            ImyInterface2 imyinterface2 = myclass;    <span class="comment">//使用接口继承类的对象实例化接口</span></span><br><span class="line">            Console.WriteLine(imyinterface2.Add());   <span class="comment">//使用接口对象调用接口中方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的实例中在Myclass类中，通过两个显示接口成员的方法分别实现了两个接口中的Add方法，在实例化不同的接口后，调用相应的方法实现输出结果。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器iis配置mime类型导致访问图片地址出现乱码（500错误）</title>
    <url>/archives/18e2c313.html</url>
    <content><![CDATA[<p>最近做项目时，遇到一个问题：</p>
<p>平时我们在项目交付前都是放在我们自己的服务器上面进行测试和调整的，客户确认后，才会上线。当我将项目迁移到客户服务器后，发现原本正常的网站，现在有些图片无法显示了，F12发现都报500服务器错误，单独访问一个图片显示乱码，无法正常查看图片，很是奇怪。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/11/99748c247eb8f2d7.jpg"></p>
<p>尝试了一个下午，最终发现上传图片的文件夹里多了一个文件：web.config</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/11/353a6ed594b9807a.jpg"></p>
<p>web.config内容：</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/11/49e68b447df33a38.png"></p>
<p>原因是:配置mine类型导致存放图片目录多了一个web.config文件</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/11/c57d9700df0da0bf.jpg"><br><img src="https://images.codeobservatory.cn/hexo/202506/11/43f41f8e0a41b7b3.jpg"></p>
<p>删除web.config再次访问发现不乱码了</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>mime</tag>
      </tags>
  </entry>
  <entry>
    <title>c#中 Exception of type &#39;System.OutOfMemoryException&#39; was throw的解决办法</title>
    <url>/archives/1d372068.html</url>
    <content><![CDATA[<p>对基于.net的webservice一旦同一时间段操作的人比较多的时候(并发数比较多时)，并且处理的数据量比较大时，就会抛出如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server Error <span class="keyword">in</span> <span class="string">&#x27;/&#x27;</span> Application.</span><br><span class="line"></span><br><span class="line">  Exception of <span class="built_in">type</span> <span class="string">&#x27;System.OutOfMemoryException&#x27;</span> was thrown. </span><br><span class="line">  Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace <span class="keyword">for</span> more information about the error and <span class="built_in">where</span> it originated <span class="keyword">in</span> the code.</span><br><span class="line"></span><br><span class="line">  Exception Details: System.OutOfMemoryException: Exception of <span class="built_in">type</span> <span class="string">&#x27;System.OutOfMemoryException&#x27;</span> was thrown.</span><br></pre></td></tr></table></figure>
<p>开始的时候，以为是程序错误，后来发现，所有的画面就有这个错误，于是，就估计是服务器的问题，于是就试着将IIS重新启动，果然问题解决了</p>
<p>可是，治标不治本，后来的几天，每天都会不定时的抛出这个错误，终于意识到，这个肯定不是偶然的，于是开始上网搜索对应的解决方法。终于找到了正确的方法</p>
<ol>
<li><p>查找到服务器对应的路径下的：C:\Windows\Microsoft.NET\Framework\v4.0.30319（注意对应的framework版本）–&gt;Aspnet.config</p>
</li>
<li><p>在<runtime> 节点下添加<gcServer enabled="false">这句话即可</gcServer></runtime></p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">runtime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gcServer</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legacyUnhandledExceptionPolicy</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legacyImpersonationPolicy</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alwaysFlowImpersonationPolicy</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SymbolReadingPolicy</span> <span class="attr">enabled</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shadowCopyVerifyByTimestamp</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">runtime</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">startup</span> <span class="attr">useLegacyV2RuntimeActivationPolicy</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>网站部署到IIS后 Global.asax代码不执行究竟是为什么?</title>
    <url>/archives/b7db24a0.html</url>
    <content><![CDATA[<p>Global.asax 用过的人都知道，记录点击量，伪静态非常好用，还可以定义计时器，自动执行函数！ 但是有没有人遇到这种情况，发布到服务器后，Global.asax跟禁用一样，里面的代码都不走了，根本就没执行Global.asax这个文件。 </p>
<p>然后我在网上查找了很多解决方案，简直五花八门的都有：</p>
<h2 id="网上找的解决方法："><a href="#网上找的解决方法：" class="headerlink" title="网上找的解决方法："></a>网上找的解决方法：</h2><ol>
<li>给web应用的根目录设置ASPNET和Network Services权限</li>
<li>如果是已发布的站点 Global.asax 不执行 Application_Start 问题</li>
</ol>
<ul>
<li>发布的站点 根目录有PrecompiledApp.config  造成冲突  删除后可以正常运行 </li>
<li>PrecompiledApp.config 是预编绎网站 生成的文件 一般情况用不到</li>
</ul>
<ol start="3">
<li>如果是未编译站点。</li>
</ol>
<p>在vs中把asp.net Development Server 停止后在重新启动。</p>
<blockquote>
<p>然而却并没有什么卵用。</p>
</blockquote>
<h2 id="静下心来思考："><a href="#静下心来思考：" class="headerlink" title="静下心来思考："></a>静下心来思考：</h2><p>正常网站发布除了Global.asax以外，在编译的时候bin文件夹下会生成一个dll文件：App_global.asax.dll。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/11/32c136415403c241.png" alt="网站部署到IIS后 Global.asax代码不执行究竟是为什么?"></p>
<p>这些文件都会一起打包部署到服务器上，网站才能正常运行。经过一一排查后发现，要执行Global.asax文件，必须还要将这个文件一起打包放到服务器里面：<code>App_global.asax.compiled</code>，没有这个文件，就不会执行Global.asax文件，所以当我把这个文件复制粘贴到服务器上之后，Global.asax文件就被执行了。这是一个小小的细节，当时没有注意到，其实很简单的一个问题。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>要执行Global.asax文件，必不可少的两个文件不能丢【<code>App_global.asax.compiled</code>、<code>App_global.asax.dll</code>】，大家如果也遇到这种情况，赶快去检查一下吧~</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/11/2d5697ef70735842.png" alt="网站部署到IIS后 Global.asax代码不执行究竟是为什么?"></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>Global</tag>
      </tags>
  </entry>
  <entry>
    <title>如何处理:无法使用虚拟目录密码作为用户 administrator（或其他用户） 在本地登录到（发布文件路径）</title>
    <url>/archives/309e0e9e.html</url>
    <content><![CDATA[<p>如何解决修改服务器密码后网站显示无法使用虚拟目录密码作为administrator在本地登录到网站目录</p>
<p><strong>问题描述</strong>：</p>
<p>修改服务器密码后，IIS中设置的仍是旧密码，导致网站运行出现报错：网站HTTP 错误 500.19问题，如下图所示：</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/2928b0ea82aac092.png" alt="如何处理:无法使用虚拟目录密码作为用户 administrator（或其他用户） 在本地登录到（发布文件路径）"></p>
<p><strong>解决方案</strong>：</p>
<ol>
<li><p>在服务器文件管理中输入路径：C:\Windows\System32\inetsrv\config</p>
</li>
<li><p>找到文件：<code>applicationHost.config</code> ，并打开该文件</p>
</li>
<li><p>根据您的站点名称查找标签<code>&lt;application path=&quot;/&quot; applicationPool=&quot;fnsxy&quot;&gt;</code>，<code>applicationPool=“站点名称”</code> 下的标签 <code>&lt;virtualDirectory&gt;</code></p>
</li>
</ol>
<p>例如下图：</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/12771af30b0d37a4.png" alt="如何处理:无法使用虚拟目录密码作为用户 administrator（或其他用户） 在本地登录到（发布文件路径）"></p>
<ol start="4">
<li><p>删除其属性及值：<code>userName</code> 和 <code>password</code></p>
</li>
<li><p>然后保存退出。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>C#正则表达式大全</title>
    <url>/archives/7eb79003.html</url>
    <content><![CDATA[<p>正则表达式是一种匹配输入文本的模式，可以用于解析和验证给定文本以及模式之间是否匹配，模式可以包含运算符、字符字面值或结构。</p>
<h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><p>我们可以使用正则表达式检查给定字符串是否与指定模式相匹配。正则表达式的匹配模式由一系列字符组成，其中可以包括数子、文字、运算符、字符等等。我们可以使用这些模式来搜索字符串或文件，并查看是否找到了匹配的项。</p>
<p>开发中我们一般使用正则表达式来验证用户输入的信息是否正确，比如邮箱地址、手机号码等等。下面列举了用于定义正则表达式的各种类别的字符、运算符和结构：</p>
<ul>
<li>转义字符；</li>
<li>字符类；</li>
<li>定位符；</li>
<li>分组构造；</li>
<li>限定符；</li>
<li>反向引用构造；</li>
<li>备用构造；</li>
<li>替换；</li>
<li>杂项构造。</li>
</ul>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>正则表达式中的反斜杠\用来表示它后面跟随的字符是特殊字符，具有特殊的含义。下表列举了一些常用的转义字符：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>与报警 (bell) 符 \u0007 匹配</td>
<td>\a</td>
<td>匹配 “Warning!” + ‘\u0007’ 中的 “\u0007”</td>
</tr>
<tr>
<td>\b</td>
<td>在字符类中，与退格键 \u0008 匹配</td>
<td>[\b]{3,}</td>
<td>匹配 “\b\b\b\b” 中的 “\b\b\b\b”</td>
</tr>
<tr>
<td>\t</td>
<td>与制表符 \u0009 匹配</td>
<td>(\w+)\t</td>
<td>匹配 “Name\tAddr\t” 中的 “Name\t” 和 “Addr\t”</td>
</tr>
<tr>
<td>\r</td>
<td>与回车符 \u000D 匹配,（\r 与换行符 \n 不是等效的）</td>
<td>\r\n(\w+)</td>
<td>匹配 “\r\nHello\nWorld.” 中的 “\r\nHello”</td>
</tr>
<tr>
<td>\v</td>
<td>与垂直制表符 \u000B 匹配</td>
<td>[\v]{2,}</td>
<td>匹配 “\v\v\v” 中的 “\v\v\v”</td>
</tr>
<tr>
<td>\f</td>
<td>与换页符 \u000C 匹配</td>
<td>[\f]{2,}</td>
<td>匹配 “\f\f\f” 中的 “\f\f\f”</td>
</tr>
<tr>
<td>\n</td>
<td>与换行符 \u000A 匹配</td>
<td>\r\n(\w+)</td>
<td>匹配 “\r\nHello\nWorld.” 中的 “\r\nHello”</td>
</tr>
<tr>
<td>\e</td>
<td>与转义符 \u001B 匹配</td>
<td>\e</td>
<td>匹配 “\x001B” 中的 “\x001B”</td>
</tr>
<tr>
<td>\nnn</td>
<td>使用八进制形式指定一个字符（nnn 由二到三位数字组成）</td>
<td>\w\040\w</td>
<td>匹配 “a bc d” 中的 “a b” 和 “c d”</td>
</tr>
<tr>
<td>\xnn</td>
<td>使用十六进制形式指定字符（nn 由两位数字组成）</td>
<td>\w\x20\w</td>
<td>匹配 “a bc d” 中的 “a b” 和 “c d”</td>
</tr>
<tr>
<td>\cX\cx</td>
<td>匹配 X 或 x 指定的 ASCII 字符，其中 X 或 x 是控件字符的字母</td>
<td>\cC</td>
<td>匹配 “Ctrl” 中的 “C”</td>
</tr>
<tr>
<td>\unnnn</td>
<td>使用十六进制形式匹配一个 Unicode 字符（nnnn 表示一个四位数）</td>
<td>\w\u0020\w</td>
<td>匹配 “a bc d” 中的 “a b” 和 “c d”</td>
</tr>
<tr>
<td>\</td>
<td>在后面带有不识别的转义字符时，与该字符匹配</td>
<td>\d+[+-x*]\d+\d+[+-x*\d+</td>
<td>匹配 “(2+2) * 3<em>9” 中的 “2+2” 和 “3</em>9”</td>
</tr>
</tbody></table>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>字符类可以与一个字符串中的任何一个字符相匹配，下表中列举了一些常用的字符类：</p>
<table>
<thead>
<tr>
<th>字符类</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>[character_group]</td>
<td>匹配 character_group 中的任何一个字符，默认情况下 character_group 中的字符区分大小写</td>
<td>[mn]</td>
<td>匹配 “mat” 中的 “m”，”moon” 中的 “m” 和 “n”</td>
</tr>
<tr>
<td>[^character_group]</td>
<td>匹配不在 character_group 中的任何单个字符，默认情况下 character_group 中的字符区分大小写</td>
<td>[^aei]</td>
<td>匹配 “avail” 中的 “v” 和 “l”</td>
</tr>
<tr>
<td>[first-last]</td>
<td>字符范围，匹配与从 first 到 last 范围内的任何单个字符</td>
<td>[b-d]</td>
<td>[b-d]irds 可以匹配 Birds、 Cirds、 Dirds</td>
</tr>
<tr>
<td>.</td>
<td>通配符：匹配任何字符，若要匹配句号（. 或 \u002E），则必须在该字符前面加上转义符 (.)</td>
<td>a.e</td>
<td>匹配 “have” 中的 “ave”， “mate” 中的 “ate”</td>
</tr>
<tr>
<td>\p{name}</td>
<td>匹配 name 中指定的 Unicode 字符</td>
<td>\p{Lu}</td>
<td>匹配 “City Lights” 中的 “C” 和 “L”</td>
</tr>
<tr>
<td>\P{name}</td>
<td>匹配不在 name 中指定的 Unicode 字符</td>
<td>\P{Lu}</td>
<td>匹配 “City” 中的 “i”、 “t” 和 “y”</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线</td>
<td>\w</td>
<td>匹配 “Room#1” 中的 “R”、 “o”、 “m” 和 “1”</td>
</tr>
<tr>
<td>\W</td>
<td>匹配字母、数字或下划线以外的字符</td>
<td>\W</td>
<td>匹配 “Room#1” 中的 “#”</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符（包括换行符）</td>
<td>\w\s</td>
<td>匹配 “ID A1.3” 中的 “D “</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符（包括换行符）</td>
<td>\s\S</td>
<td>匹配 “int __ctr” 中的 “ _”</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任何十进制数字</td>
<td>\d</td>
<td>匹配 “4 &#x3D; IV” 中的 “4”</td>
</tr>
<tr>
<td>\D</td>
<td>匹配不是十进制数的任意字符</td>
<td>\D</td>
<td>匹配 “4 &#x3D; IV” 中的 “ “、 “&#x3D;”、 “ “、 “I” 和 “V”</td>
</tr>
</tbody></table>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>定位符可以根据字符串出现的具体位置来判断匹配是成功还是失败，下表中列举了常用的定位符：</p>
<table>
<thead>
<tr>
<th>断言</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>从字符串的开始位置进行匹配</td>
<td>^\d{3}</td>
<td>匹配 “567-777-“ 中的 “567”</td>
</tr>
<tr>
<td>$</td>
<td>从字符串的结尾位置进行匹配</td>
<td>-\d{4}$</td>
<td>匹配 “8-12-2012” 中的 “-2012”</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串的开始位置</td>
<td>\A\w{4}</td>
<td>匹配 “Code-007-“ 中的 “Code”</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串的结尾位置或字符串结尾换行之前的位置</td>
<td>-\d{3}\Z</td>
<td>匹配 “Bond-901-007” 中的 “-007”</td>
</tr>
<tr>
<td>\z</td>
<td>匹配字符串的结尾位置</td>
<td>-\d{3}\z</td>
<td>匹配 “-901-333” 中的 “-333”</td>
</tr>
<tr>
<td>\G</td>
<td>匹配上一个匹配结束的位置</td>
<td>\G(\d)</td>
<td>匹配 “(1)(3)(5)<a href="9">7</a>“ 中的 “(1)”、 “(3)” 和 “(5)”</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词的开始或结束的位置</td>
<td>er\b</td>
<td>匹配”never”中的”er”，但不能匹配”verb”中的”er”。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配一个单词的中间位置</td>
<td>er\B</td>
<td>匹配”verb”中的”er”，但不能匹配”never”中的”er”。</td>
</tr>
</tbody></table>
<h3 id="分组构造"><a href="#分组构造" class="headerlink" title="分组构造"></a>分组构造</h3><p>分组构造描述了正则表达式的子表达式，并捕获输入字符串的子字符串。下表列出了常用的分组构造：</p>
<table>
<thead>
<tr>
<th>分组构造</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>(subexpression)</td>
<td>捕获匹配的子表达式并将其分配到一个从零开始的序号中</td>
<td>(\w)\1</td>
<td>“deep” 中的 “ee”</td>
</tr>
<tr>
<td>(?<name>subexpression)</name></td>
<td>将匹配的子表达式捕获到一个命名组中</td>
<td>(?&lt; double&gt;\w)\k&lt; double&gt;</td>
<td>“deep” 中的 “ee”</td>
</tr>
<tr>
<td>(?&lt;name1 -name2&gt;subexpression)</td>
<td>定义平衡组</td>
<td>(((?’Open’()[^()]<em>)+((?’Close-Open’))[^()]</em>)+)*(?(Open)(?!))$</td>
<td>“3+2^((1-3)<em>(3-1))” 中的 “((1-3)</em>(3-1))”</td>
</tr>
<tr>
<td>(?: subexpression)</td>
<td>定义非捕获组</td>
<td>Write(?:Line)?</td>
<td>“Console.WriteLine()” 中的 “WriteLine”</td>
</tr>
<tr>
<td>(?imnsx-imnsx:subexpression)</td>
<td>应用或禁用 subexpression 中指定的选项</td>
<td>A\d{2}(?i:\w+)\b</td>
<td>“A12xl A12XL a12xl” 中的 “A12xl” 和 “A12XL”</td>
</tr>
<tr>
<td>(?&#x3D; subexpression)</td>
<td>零宽度正预测先行断言</td>
<td>\w+(?&#x3D;.)</td>
<td>“He is. The dog ran. The sun is out.” 中的 “is”、 “ran” 和 “out”</td>
</tr>
<tr>
<td>(?! subexpression)</td>
<td>零宽度负预测先行断言</td>
<td>\b(?!un)\w+\b</td>
<td>“unsure sure unity used” 中的 “sure” 和 “used”</td>
</tr>
<tr>
<td>(?&lt;&#x3D;subexpression)</td>
<td>零宽度正回顾后发断言</td>
<td>(?&lt;&#x3D;19)\d{2}\b</td>
<td>“1851 1999 1950 1905 2003” 中的 “99”、”50”和 “05”</td>
</tr>
<tr>
<td>(?</td>
<td>零宽度负回顾后发断言</td>
<td>(?</td>
<td>“Hi woman Hi man” 中的 “man”</td>
</tr>
<tr>
<td>(?&gt; subexpression)</td>
<td>非回溯（也称为”贪婪”）子表达式</td>
<td><a href="?%3EA+B+">13579</a></td>
<td>“1ABB 3ABBC 5AB 5AC” 中的 “1ABB”、 “3ABB” 和 “5AB”</td>
</tr>
</tbody></table>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定在字符串中必须存在某个元素（可以是字符、组或字符类）才能匹配成功。下表列出了常用的限定符：</p>
<table>
<thead>
<tr>
<th>限定符</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配上一个元素零次或多次</td>
<td>\d*.\d</td>
<td>“.0”、 “19.9”、 “219.9”</td>
</tr>
<tr>
<td>+</td>
<td>匹配上一个元素一次或多次</td>
<td>“be+”</td>
<td>匹配 “been” 中的 “bee”， “bent” 中的 “be”</td>
</tr>
<tr>
<td>?</td>
<td>匹配上一个元素零次或一次</td>
<td>“rai?n”</td>
<td>“ran”、 “rain”</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配上一个元素 n 次</td>
<td>“,\d{3}”</td>
<td>匹配 “1,043.6” 中的 “,043”， “9,876,543,210” 中的 “,876”、 “,543” 和 “,210”</td>
</tr>
<tr>
<td>{n, }</td>
<td>匹配上一个元素至少 n 次</td>
<td>“\d{2,}”</td>
<td>“166”、 “29”、 “1930”</td>
</tr>
<tr>
<td>{n, m}</td>
<td>匹配上一个元素至少 n 次，但不多于 m 次</td>
<td>“\d{3,5}”</td>
<td>匹配 “166”， “17668”， “193024” 中的 “19302”</td>
</tr>
<tr>
<td>*?</td>
<td>匹配上一个元素零次或多次，但次数尽可能少</td>
<td>\d*?.\d</td>
<td>“.0”、 “19.9”、 “219.9”</td>
</tr>
<tr>
<td>+?</td>
<td>匹配上一个元素一次或多次，但次数尽可能少</td>
<td>“be+?”</td>
<td>匹配 “been” 中的 “be”， “bent” 中的 “be”</td>
</tr>
<tr>
<td>??</td>
<td>匹配上一个元素零次或一次，但次数尽可能少</td>
<td>“rai??n”</td>
<td>“ran”、 “rain”</td>
</tr>
<tr>
<td>{n}?</td>
<td>匹配前导元素恰好 n 次</td>
<td>“,\d{3}?”</td>
<td>匹配 “1,043.6” 中的 “,043”， “9,876,543,210” 中的 “,876”、 “,543” 和 “,210”</td>
</tr>
<tr>
<td>{n,}?</td>
<td>匹配上一个元素至少 n 次，但次数尽可能少</td>
<td>“\d{2,}?”</td>
<td>“166”、 “29” 和 “1930”</td>
</tr>
<tr>
<td>{n, m}?</td>
<td>匹配上一个元素的次数介于 n 和 m 之间，但次数尽可能少</td>
<td>“\d{3,5}?”</td>
<td>匹配 “166”， “17668”， “193024” 中的 “193” 和 “024”</td>
</tr>
</tbody></table>
<h3 id="反向引用构造"><a href="#反向引用构造" class="headerlink" title="反向引用构造"></a>反向引用构造</h3><p>反向引用构造允许先前匹配的子表达式随后在相同的正则表达式中进行标识。下表列出了常用的反向引用构造：</p>
<table>
<thead>
<tr>
<th>反向引用构造</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>\number</td>
<td>反向引用，匹配编号子表达式的值</td>
<td>(\w)\1</td>
<td>匹配 “seek” 中的 “ee”</td>
</tr>
<tr>
<td>\k<name></name></td>
<td>命名反向引用，匹配命名表达式的值</td>
<td>(?&lt; char&gt;\w)\k&lt; char&gt;</td>
<td>匹配 “seek” 中的 “ee”</td>
</tr>
</tbody></table>
<h3 id="备用构造"><a href="#备用构造" class="headerlink" title="备用构造"></a>备用构造</h3><p>备用构造用于修改正则表达式以启用 either&#x2F;or 匹配。下表列出了常用的备用构造：</p>
<table>
<thead>
<tr>
<th>备用构造</th>
<th>描述</th>
<th>正则表达式</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>|</td>
<td>匹配以竖线|字符分隔的任何一个元素</td>
<td>th(e|is|at)</td>
<td>匹配 “this is the day. “ 中的 “the” 和 “this”</td>
</tr>
<tr>
<td>(?( expression )yes | no)</td>
<td>如果正则表达式模式由 expression 匹配指定，则匹配 yes 部分；否则匹配可选的 no 部分，expression 被解释为零宽度断言</td>
<td>(?(A)A\d{2}\b|\b\d{3}\b)</td>
<td>匹配 “A10 C103 910” 中的 “A10” 和 “910”</td>
</tr>
<tr>
<td>(?( name )yes | no )</td>
<td>如果 name 或已命名或已编号的捕获组具有匹配，则匹配 yes 部分；否则匹配可选的 no 部分。</td>
<td>(?&lt; quoted&gt;”)?(?(quoted).+?”|\S+\s)</td>
<td>匹配 “Dogs.jpg “Yiska playing.jpg”” 中的 Dogs.jpg 和 “Yiska playing.jpg”</td>
</tr>
</tbody></table>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>替换是替换模式中使用的正则表达式。下表列出了用于替换的字符：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
<th>模式</th>
<th>替换模式</th>
<th>输入字符串</th>
<th>结果字符串</th>
</tr>
</thead>
<tbody><tr>
<td>$number</td>
<td>替换按组 number 匹配的子字符串</td>
<td>\b(\w+)(\s)(\w+)\b</td>
<td>$3$2$1</td>
<td>“one two”</td>
<td>“two one”</td>
</tr>
<tr>
<td>${name}</td>
<td>替换按命名组 name 匹配的子字符串</td>
<td>\b(?&lt; word1&gt;\w+)(\s)(?&lt; word2&gt;\w+)\b</td>
<td>${word2} ${word1}</td>
<td>“one two”</td>
<td>“two one”</td>
</tr>
<tr>
<td>$$</td>
<td>替换字符”$”</td>
<td>\b(\d+)\s?USD</td>
<td>$$$1</td>
<td>“103 USD”</td>
<td>“$103”</td>
</tr>
<tr>
<td>$&amp;</td>
<td>替换整个匹配项的一个副本</td>
<td>($<em>(\d</em>(.+\d+)?){1})</td>
<td>**$&amp;</td>
<td>“$1.30”</td>
<td>“**$1.30**“</td>
</tr>
<tr>
<td>$&#96;</td>
<td>替换匹配前的输入字符串的所有文本</td>
<td>B+</td>
<td>$&#96;</td>
<td>“AABBCC”</td>
<td>“AAAACC”</td>
</tr>
<tr>
<td>$’</td>
<td>替换匹配后的输入字符串的所有文本</td>
<td>B+</td>
<td>$’</td>
<td>“AABBCC”</td>
<td>“AACCCC”</td>
</tr>
<tr>
<td>$+</td>
<td>替换最后捕获的组</td>
<td>B+(C+)</td>
<td>$+</td>
<td>“AABBCCDD”</td>
<td>AACCDD</td>
</tr>
<tr>
<td>$_</td>
<td>替换整个输入字符串</td>
<td>B+</td>
<td>$_</td>
<td>“AABBCC”</td>
<td>“AAAABBCCCC”</td>
</tr>
</tbody></table>
<h3 id="杂项构造"><a href="#杂项构造" class="headerlink" title="杂项构造"></a>杂项构造</h3><p>下表列出了各种杂项构造：</p>
<table>
<thead>
<tr>
<th>构造</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>(?imnsx-imnsx)</td>
<td>在模式中间对诸如不区分大小写这样的选项进行设置或禁用</td>
<td>\bA(?i)b\w+\b 匹配 “ABA Able Act” 中的 “ABA” 和 “Able”</td>
</tr>
<tr>
<td>(?#注释)</td>
<td>内联注释。该注释在第一个右括号处终止</td>
<td>\bA(?# 匹配以 A 开头的单词 )\w+\b</td>
</tr>
<tr>
<td>#[行尾]</td>
<td>该注释以非转义的 # 开头，并继续到行的结尾</td>
<td>(?x)\bA\w+\b# 匹配以 A 开头的单词</td>
</tr>
</tbody></table>
<h3 id="Regex-类"><a href="#Regex-类" class="headerlink" title="Regex 类"></a>Regex 类</h3><p>Regex 类用于使用一个正则表达式，下表中列出了 Regex 类中一些常用的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public bool IsMatch( string input )</td>
<td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项</td>
</tr>
<tr>
<td>public bool IsMatch( string input, int startat )</td>
<td>指示 Regex 构造函数中指定的正则表达式是否在指定的输入字符串中找到匹配项，从字符串中指定的位置开始查找</td>
</tr>
<tr>
<td>public static bool IsMatch( string input, string pattern )</td>
<td>指示指定的正则表达式是否在指定的输入字符串中找到匹配项</td>
</tr>
<tr>
<td>public MatchCollection Matches( string input )</td>
<td>在指定的输入字符串中搜索正则表达式的所有匹配项</td>
</tr>
<tr>
<td>public string Replace( string input, string replacement )</td>
<td>在指定的输入字符串中，把所有匹配正则表达式模式的所有匹配的字符串替换为指定的替换字符串</td>
</tr>
<tr>
<td>public string[] Split( string input )</td>
<td>把输入字符串分割为子字符串数组，根据在 Regex 构造函数中指定的正则表达式模式定义的位置进行分割</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>熬夜爆肝整理万字C#基础入门大总结【建议收藏】</title>
    <url>/archives/f71906c0.html</url>
    <content><![CDATA[<h2 id="一、C-介绍"><a href="#一、C-介绍" class="headerlink" title="一、C#介绍"></a>一、C#介绍</h2><p>源于c语言，简单易学，入门超快，减少了烦人的指针，有统一的操作符&#x2F;修饰符&#x2F;运算符，使用起来简洁称心。不仅如此：</p>
<ol>
<li>它是结构化语言，能产生高效率的程序</li>
<li>面向组件，开发快速</li>
<li>在多种计算机平台上编译，良好兼容性</li>
<li>优秀的版本管理控制，安装卸载和其他程序不影响</li>
<li>.Net框架一部分</li>
</ol>
<p>都是她被广泛应用的原因。</p>
<p>它不仅是按照面向对象设计的语言，而且还类型安全，还有更多让人舒心的功能：</p>
<ol>
<li>自动垃圾回收</li>
<li>属性、事件、委托等</li>
<li>标准库</li>
<li>简单多线程</li>
<li>Lambad表达式</li>
</ol>
<h2 id="二、-NET简介"><a href="#二、-NET简介" class="headerlink" title="二、.NET简介"></a>二、.NET简介</h2><p>.NET框架是一个集成、一个环境、一个非常强大的平台，是微软推出的核心技术。开发式的体系结构，覆盖的内容非常广：</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/f6f80e2f8650f8e2.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p>
<p>由上图看出.NET Framework是.NET最重要的核心技术。Framework提供了多语言开发，而C#是其中核心语言。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/89893b5c0744d40.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p>
<h2 id="三、VS快捷键"><a href="#三、VS快捷键" class="headerlink" title="三、VS快捷键"></a>三、VS快捷键</h2><p>先来普及回顾下VS中的常用快捷键</p>
<p><code>Ctrl+K+D</code>:快速对齐代码</p>
<p><code>Ctrl+Z</code>:撤销</p>
<p><code>Ctrl+S</code>:保存(一定要经常保存！)</p>
<p><code>Ctrl+J</code>:快速弹出智能提示</p>
<p><code>Shift+End</code> 、<code>Shift+Home</code></p>
<p><code>Ctrl+K+C</code>:注释所选代码</p>
<p><code>Ctrl+K+U</code>:取消对所选代码的注释</p>
<p><code>F1</code>：转到帮助文档</p>
<p>折叠冗余代码：#Region 和#EndRegion（Android Studio也可以自定义折叠代码 &#x2F;&#x2F;region &#x2F;&#x2F;endregion 快捷键 Ctrl+Alt+T）</p>
<p>单行注释：&#x2F;&#x2F;</p>
<p>多行注释：&#x2F;要注释的内容&#x2F;</p>
<p>文档注释：&#x2F;&#x2F;&#x2F; 多用来解释类或者方法</p>
<p>四、数据类型</p>
<p>编程基础就不强调了，主要看看拼写和其他语言有什么不同就行了</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/24441e1ba047989c.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p>
<p>除了这些值类型还有引用类型，包含对象类型，动态类型，字符串类型</p>
<p>字符串类型：string或者String，注意s大小写，平时都能用，但也有小区别。</p>
<p>字符串有个@符号可以将转移字符当成普通字符，且@符会保留字符串里面的换行符空格符等</p>
<p>例：string str&#x3D;”D:\alibaba”; 等价于string str&#x3D;@”D:\alibaba”;</p>
<p>动态类型：dynami，他会根据内容自动存储对应类型</p>
<p>例：dynamic str&#x3D;”这是字符”; dynamic number&#x3D;10; 就像前端的var类型</p>
<p>对象类型：ogject，所有类型的最低基类，能分配任何类型的值，麻烦就是用的时候可能经常得进行类型转换。</p>
<p>五、转义字符</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/30e7809e9d4f3aee.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p>
<h2 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h2><p>仍然是直接上表格图，编程基础。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202506/13/13150c9da862dd13.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"><br><img src="https://images.codeobservatory.cn/hexo/202506/13/bab1bb498a3574f1.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"><br><img src="https://images.codeobservatory.cn/hexo/202506/13/e66f7ceff8b79d5b.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"><br><img src="https://images.codeobservatory.cn/hexo/202506/13/8fcd6bdd282b13b0.png" alt="熬夜爆肝整理万字C#基础入门大总结【建议收藏】"></p>
<h2 id="七、判断-循环"><a href="#七、判断-循环" class="headerlink" title="七、判断&#x2F;循环"></a>七、判断&#x2F;循环</h2><p>逻辑判断仍然是编程老鸟的基基础，只是简单概括一下</p>
<ul>
<li>判断语句：<code>if else switch</code></li>
<li>循环语句：<code>while for foreach do…while break continue</code></li>
</ul>
<h2 id="八、访问修饰符"><a href="#八、访问修饰符" class="headerlink" title="八、访问修饰符"></a>八、访问修饰符</h2><p>C#可以设置使用者的访问权限，这样开发者可以指定该模块或逻辑是公开，封闭，还是指定访问者。不知道其他语言什么样，跟Java是一样样的。</p>
<ol>
<li>public：所有对象都可以访问；</li>
<li>private：对象本身在对象内部可以访问；</li>
<li>protected：只有该类对象及其子类对象可以访问</li>
<li>internal：同一个程序集的对象可以访问；</li>
<li>protected internal：访问限于当前程序集或派生自包含类的类型。</li>
</ol>
<h2 id="九、可变类型-合并运算符"><a href="#九、可变类型-合并运算符" class="headerlink" title="九、可变类型&#x2F;合并运算符"></a>九、可变类型&#x2F;合并运算符</h2><ul>
<li>可空类型（Nullable）：表示其基础类型除了默认的值外，再添加一个null值。例如：<code>int? num = 1; double? num= new double?();</code></li>
<li>Null合并运算符（？？）：如果第一个操作数为null，则返回第二个操作数，否则返回第一个，就像Java的？：运算。</li>
</ul>
<p>例如 A&#x3D;B??C 如果B为空则将C赋值给A，如果B 不为空则将B赋值给A。</p>
<h2 id="十、数组"><a href="#十、数组" class="headerlink" title="十、数组"></a>十、数组</h2><p>数组类型是若干个数据类型相同的数据元素组成的数据结构。C#也是分为一维数组和多维数组，多维数组又包括矩形数组和交错数据。<br>还有一个参数数组，可以传递未知数量参数给函数。这个就像Java中的(int… num)。</p>
<p>例:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ParamArray app = <span class="keyword">new</span> ParamArray();</span><br><span class="line"><span class="built_in">int</span> sum = app.AddElements(<span class="number">512</span>, <span class="number">720</span>, <span class="number">250</span>, <span class="number">567</span>, <span class="number">889</span>);</span><br></pre></td></tr></table></figure>
<p>数组类型基本是System.Array类的派生类，快捷键Ctrl+左键进入源码，快速学习都有什么功能实现。</p>
<h2 id="十一、结构体"><a href="#十一、结构体" class="headerlink" title="十一、结构体"></a>十一、结构体</h2><p>它能用单一变量存储多个数据类型，举例：一个书变量，可以存作者，标题，出版社，价钱等基础变量。超好理解，和Java的实体一样，就是需要<code>struct</code>关键字来修饰创建结构体。特点：</p>
<ol>
<li>结构可带有方法、字段、索引、属性、运算符方法和事件。</li>
<li>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数 (默认)是自动定义的，且不能被改变。</li>
<li>与类不同，结构不能继承其他的结构或类。</li>
<li>结构不能作为其他结构或类的基础结构。</li>
<li>结构可实现一个或多个接口。</li>
<li>结构成员不能指定为 abstract、virtual 或 protected。</li>
<li>当您使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li>
<li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li>
<li>结构体的字段可以加前缀”_”来和变量区分</li>
<li>结构体快捷键：首选选中你要自动完成的变量，先按ctrl+R,再按ctrl+E这两个组合键，可以自动生成属性中的get和set方法</li>
</ol>
<h2 id="十二、枚举"><a href="#十二、枚举" class="headerlink" title="十二、枚举"></a>十二、枚举</h2><p>就是命名一组整型常量，不能继承或传递继承，只能当常量使用。举例：<code>enum Number&#123;one,two,three&#125;</code>; 则Number.one等于0 Number.two等于1，以此类推枚举可以和结构体结合：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Person&#123;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> _name;<span class="comment">//字段        </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> _age;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Gender _gender;    </span><br><span class="line"></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gender   &#123;         男,        女&#125;</span><br><span class="line"></span><br><span class="line">Person zsPerson;</span><br><span class="line"></span><br><span class="line">zsPerson._name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">zsPerson._age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">zsPerson._gender = Gender.男;</span><br></pre></td></tr></table></figure>

<h2 id="十三、类-函数"><a href="#十三、类-函数" class="headerlink" title="十三、类&#x2F;函数"></a>十三、类&#x2F;函数</h2><p>类仍然是<code>class</code>修饰，在class前面可以指定对类及成员的访问规则，若没写则类默认是<code>internal</code>，成员访问是<code>private</code>。</p>
<p>例：<code>public class ClassName &#123; &#125;</code></p>
<p>函数和Java同样含有构造函数和带参函数，在这多了一个析构函数，是一个特殊的成员函数。是一个新知识需要记一下。</p>
<p>析构函数以~作为前缀，不需要任何修饰符，不返回值，也不带参数，不能继承或重载。官方文档大致意思就是用来释放资源的，只不过并非是在不使用的时候立即释放，它是懒惰的，垃圾回收机制会在适当的时候回收，比如内存紧张，关闭程序等时候。这和Android里面的onDestory有异曲同工之妙，同样的，也有GC方法来强制回收。</p>
<h2 id="十四、继承-多重继承"><a href="#十四、继承-多重继承" class="headerlink" title="十四、继承&#x2F;多重继承"></a>十四、继承&#x2F;多重继承</h2><p>继承是面向对象设计的最重要概念之一，一个类继承自另一个类，举例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123; &#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span>:<span class="title">A</span>&#123; &#125; </span><br></pre></td></tr></table></figure>
<p>B继承自A，B可以称为派生类也可以称为子类，A可以称为基类也可以称为父类。（派生类和基类，子类和父类） 。B拥有访问A的能力，形象点说就是子类可以拿到父类的财产，父类拿不到子类的财产。</p>
<p>C#不支持多重继承，我咨询过C++同事，C++支持多重继承。</p>
<h2 id="十五、多态"><a href="#十五、多态" class="headerlink" title="十五、多态"></a>十五、多态</h2><p>面向对象程序的核心功能之一，是同一个行为具有多个不同表现的能力。C#和Java都是面向对象的，它们的多态思想基本是一致的。优点多多：</p>
<ol>
<li>消除类型间耦合关系</li>
<li>具有可扩充性，增强灵活性</li>
<li>接口性，实现简单</li>
</ol>
<p>C#包含静态多态和动态多态，静态多态又包含：函数重载和运算符重载。</p>
<p>函数重载：就是相同的函数名有多个定义。函数的参数类型或个数不同来实现。例如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> num1</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> num1,<span class="built_in">int</span> num2</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">test</span>(<span class="params"><span class="built_in">int</span> num1,<span class="built_in">string</span> str1</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>运算符重载看示例更形象，但是示例代码多，就不在这记了，感兴趣的可以自己去搜索学习</p>
<p>动态重载使用的是用<code>abstract</code>创建的抽象类，另一个是借助关键字<code>virtual</code>修饰的虚方法类似实现。示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="built_in">int</span> <span class="title">area</span>()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>:  <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> length;</span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">int</span> width;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         length = a;</span><br><span class="line">         width = b;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//注意着的override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> ()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * length);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title">RectangleTester</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         <span class="built_in">double</span> a = r.area();</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;面积：&#123;0&#125;&quot;</span>,a);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虚方法示例</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">protected</span> <span class="built_in">int</span> width, height;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         width = a;</span><br><span class="line">         height = b;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 关键字virtual</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span> <span class="title">area</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;父类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Rectangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"> <span class="built_in">int</span> a=<span class="number">0</span>, <span class="built_in">int</span> b=<span class="number">0</span></span>): <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span> ()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Rectangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * height);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Triangle</span>: <span class="title">Shape</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Triangle</span>(<span class="params"><span class="built_in">int</span> a = <span class="number">0</span>, <span class="built_in">int</span> b = <span class="number">0</span></span>): <span class="title">base</span>(<span class="params">a, b</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">area</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Triangle 类的面积：&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> (width * height / <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">         Triangle t = <span class="keyword">new</span> Triangle(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">         c. area ();</span><br><span class="line">         c. area ();</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十六、接口"><a href="#十六、接口" class="headerlink" title="十六、接口"></a>十六、接口</h2><p>接口使用<code>interface</code>关键字声明，和类class的声明差不多，默认是public类型的。但是当有多个类，多个类有多个相同的方法，使用接口来实现方便管理，且不会丢失。和Java使用基本是一致的。示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ITestInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TestInterfaceMethod</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">ITestInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestInterfaceMethod</span>()</span>    </span><br><span class="line">    &#123;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="十七、命名空间"><a href="#十七、命名空间" class="headerlink" title="十七、命名空间"></a>十七、命名空间</h2><p><code>Namespace</code>这玩意就是用来方便管理的，而且在计算机中相同的设计思想到处可见，比如同一个文件夹下不能有同名的文件，你放在不同文件夹下可以有同名文件。<br>其他编程语言比如Java有包路径，不同路径名字可以有同名的类。这种思想方便管理文件&#x2F;代码。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span>&#123;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123;   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比如这样，程序是会报错的  </span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123;   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//但是你是下面的状态就不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span>&#123;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123;   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title">namespace_cl</span>   &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这有的人就开始有疑问了：如果是不同的文件或者想访问其他的空间怎么办呢？</p>
<p>细心的已经发现了，就和Java的导包一样，C#使用using导入空间，在每个编程文件的最上面几行都是这样的引入，想要哪些空间的功能导入哪个。</p>
<p>这时候又有人有疑问了，能不能修仙小说那样天外有天，天上还有天。能不能命名空间套命名空间，套套套，此处禁止套娃。</p>
<p>答案是可以的，引入的时候：<code>using namespaceone.namespacetwo</code> 用英文符号<code>.</code>即可，跟Java包路径同理。</p>
<h2 id="十八、预处理器"><a href="#十八、预处理器" class="headerlink" title="十八、预处理器"></a>十八、预处理器</h2><p>从字面理解就是提前对信息进行处理。她确实也是这样的，她会根据你指定的条件，只编译满足条件的代码，不满足条件的代码不编译。既区分了软件版本，代码还在一块，管理方便。预处理指令是#开始的，且只能作为开头，一般指令单独占一行。都有哪些指令在这就不单独写了。在Unity中指令挺有用的，因为PC是键盘，Android事件是手势，用预处理提前写好不同端的不同实现代码（当然它们功能可能是一致的），打包发布的时候利人利己。</p>
<h2 id="十九、异常"><a href="#十九、异常" class="headerlink" title="十九、异常"></a>十九、异常</h2><ul>
<li><code>try</code>：一个 try 块标识了一个将被激活的特定的异常的代码块。后跟一个或多个 catch 块。</li>
<li><code>catch</code>：程序通过异常处理程序捕获异常。catch 关键字表示异常的捕获。</li>
<li><code>finally</code>：finally 块用于执行给定的语句，不管异常是否被抛出都会执行。例如，如果您打开一个文件，不管是否出现异常文件都要被关闭。</li>
<li><code>throw</code>：当问题出现时，程序抛出一个异常。使用 throw 关键字来完成。</li>
</ul>
<h2 id="二十、反射"><a href="#二十、反射" class="headerlink" title="二十、反射"></a>二十、反射</h2><p>通俗的讲就是可以访问一个类的所有属性和方法，且能够调用。有人提问了：随便写的public类不都是能任意访问调用的吗，这有什么区别？</p>
<p>区别在于一个是正常写代码，你知道代码逻辑和内容，且都在你的掌控之内，当然能访问；而反射不同它能够访问你不清楚的类，比如三方框架你遇到这个框架里某个类某个方法没有对外开放，而你又需要使用，就可以用反射把它抛出来。</p>
<p><strong>优点</strong>：</p>
<ol>
<li>反射提高了程序的灵活性和扩展性。</li>
<li>降低耦合性，提高自适应能力。</li>
<li>它允许程序创建和控制任何类的对象，无需提前编码目标类。</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。</li>
<li>使用反射会模糊程序内部逻辑；程序员希望在源代码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂。</li>
</ol>
<h2 id="二十一、属性"><a href="#二十一、属性" class="headerlink" title="二十一、属性"></a>二十一、属性</h2><p>get&#x2F;set方法,没什么可讲的。</p>
<h2 id="二十二、委托"><a href="#二十二、委托" class="headerlink" title="二十二、委托"></a>二十二、委托</h2><p>使用关键字<code>delegate</code>来修饰，必须用new关键字来创建，且与某个特定方法关联。</p>
<p>比较官方的说法：表示对具有特定参数列表和返回类型的方法的引用。通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。委托还类似于其他一些语言中存在的“函数指针”概念。与函数指针不同，委托是面向对象且类型安全的。</p>
<p>按照自己的理解：委托就是包一个外壳，操作外壳就是调用壳内的内容。就好像老板让你板砖，你委托给另一个人让她板砖。这就是委托。</p>
<p>委托中还能通过加减号来实现多个，称之为多播。只有相同类型的委托可以合并。</p>
<p>使用场景：因刚需C#没什么实际经验，大家知道有什么好的实际应用环境吗?</p>
<p>委托示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个是声明个委托</span></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        num += p;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        num *= q;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建委托实例</span></span><br><span class="line">        NumberChanger nc;</span><br><span class="line">        NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">        NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line">        <span class="comment">// 使用委托对象调用方法</span></span><br><span class="line">        nc1(<span class="number">25</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, num);</span><br><span class="line">        nc2(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, num);</span><br><span class="line">        <span class="comment">//下面是组播 使用  +或- 符号操作</span></span><br><span class="line">        nc = nc1;</span><br><span class="line">        nc += nc2;</span><br><span class="line">        <span class="comment">// 调用多播</span></span><br><span class="line">        nc(<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, num);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">       <span class="comment">//输出结果为：</span></span><br><span class="line">            <span class="comment">//Value of Num: 35</span></span><br><span class="line">            <span class="comment">//Value of Num: 175</span></span><br><span class="line">            <span class="comment">//Value of Num: 75</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>入门</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>C#读取Excel文件的几种方法【总结整理】</title>
    <url>/archives/6673646b.html</url>
    <content><![CDATA[<h2 id="方法一：采用OleDB读取EXCEL文件"><a href="#方法一：采用OleDB读取EXCEL文件" class="headerlink" title="方法一：采用OleDB读取EXCEL文件"></a>方法一：采用OleDB读取EXCEL文件</h2><p>把EXCEL文件当做一个数据源来进行数据的读取操作，实例如下：    </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> DataSet <span class="title">ExcelToDS</span>(<span class="params"><span class="built_in">string</span> Path</span>)</span> &#123; </span><br><span class="line">    <span class="built_in">string</span> strConn = <span class="string">&quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot;</span> +<span class="string">&quot;Data Source=&quot;</span>+ Path +<span class="string">&quot;;&quot;</span>+<span class="string">&quot;Extended Properties=Excel 8.0;&quot;</span>; </span><br><span class="line">    OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(strConn); </span><br><span class="line">    conn.Open();   </span><br><span class="line">    <span class="built_in">string</span> strExcel = <span class="string">&quot;&quot;</span>;    </span><br><span class="line">    OleDbDataAdapter myCommand = <span class="literal">null</span>; </span><br><span class="line">    DataSet ds = <span class="literal">null</span>; </span><br><span class="line">    strExcel=<span class="string">&quot;select * from [sheet1$]&quot;</span>; </span><br><span class="line">    myCommand = <span class="keyword">new</span> OleDbDataAdapter(strExcel, strConn); </span><br><span class="line">    ds = <span class="keyword">new</span> DataSet(); </span><br><span class="line">    myCommand.Fill(ds,<span class="string">&quot;table1&quot;</span>);    </span><br><span class="line">    <span class="keyword">return</span> ds; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于EXCEL中的表即sheet([sheet1$])如果不是固定的可以使用下面的方法得到    </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> strConn = <span class="string">&quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot;</span> +<span class="string">&quot;Data Source=&quot;</span>+ Path +<span class="string">&quot;;&quot;</span>+<span class="string">&quot;Extended Properties=Excel 8.0;&quot;</span>; </span><br><span class="line">OleDbConnection conn = <span class="keyword">new</span> OleDbConnection(strConn); </span><br><span class="line">DataTable schemaTable = objConn.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables,<span class="literal">null</span>); </span><br><span class="line"><span class="built_in">string</span> tableName=schemaTable.Rows[<span class="number">0</span>][<span class="number">2</span>].ToString().Trim();</span><br></pre></td></tr></table></figure>
<p>另外：也可进行写入EXCEL文件，实例如下：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DSToExcel</span>(<span class="params"><span class="built_in">string</span> Path,DataSet oldds</span>)</span> &#123; </span><br><span class="line">    <span class="comment">//先得到汇总EXCEL的DataSet 主要目的是获得EXCEL在DataSet中的结构     string strCon = &quot; Provider = Microsoft.Jet.OLEDB.4.0 ;</span></span><br><span class="line">    Data Source =<span class="string">&quot;+path1+&quot;</span>;Extended Properties=Excel <span class="number">8.0</span><span class="string">&quot;; </span></span><br><span class="line"><span class="string">    OleDbConnection myConn = new OleDbConnection(strCon);</span></span><br><span class="line"><span class="string">    string strCom=&quot;</span><span class="keyword">select</span> * <span class="keyword">from</span> [Sheet1$]<span class="string">&quot;; </span></span><br><span class="line"><span class="string">    myConn.Open();</span></span><br><span class="line"><span class="string">    OleDbDataAdapter myCommand = new OleDbDataAdapter ( strCom, myConn ); </span></span><br><span class="line"><span class="string">    ystem.Data.OleDb.OleDbCommandBuilder builder=new OleDbCommandBuilder(myCommand); </span></span><br><span class="line"><span class="string">    //QuotePrefix和QuoteSuffix主要是对builder生成InsertComment命令时使用。     builder.QuotePrefix=&quot;</span>[<span class="string">&quot;;     //获取insert语句中保留字符（起始位置）     builder.QuoteSuffix=&quot;</span>]<span class="string">&quot;; //获取insert语句中保留字符（结束位置）     DataSet newds=new DataSet(); </span></span><br><span class="line"><span class="string">    myCommand.Fill(newds ,&quot;</span>Table1<span class="string">&quot;) ; </span></span><br><span class="line"><span class="string">    for(int i=0;i&lt;oldds.Tables[0].Rows.Count;i++) &#123; </span></span><br><span class="line"><span class="string">        //在这里不能使用ImportRow方法将一行导入到news中，因为ImportRow将保留原来DataRow的所有设置(DataRowState状态不变)。</span></span><br><span class="line"><span class="string">        // 在使用ImportRow后newds内有值，但不能更新到Excel中因为所有导入行的DataRowState!=Added         DataRow nrow=aDataSet.Tables[&quot;</span>Table1<span class="string">&quot;].NewRow(); </span></span><br><span class="line"><span class="string">        for(int j=0;j&lt;newds.Tables[0].Columns.Count;j++)&#123; </span></span><br><span class="line"><span class="string">            nrow[j]=oldds.Tables[0].Rows[i][j];</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">        newds.Tables[&quot;</span>Table1<span class="string">&quot;].Rows.Add(nrow); </span></span><br><span class="line"><span class="string">    &#125; </span></span><br><span class="line"><span class="string">    myCommand.Update(newds,&quot;</span>Table1<span class="string">&quot;); </span></span><br><span class="line"><span class="string">    myConn.Close(); </span></span><br><span class="line"><span class="string">&#125; </span></span><br></pre></td></tr></table></figure>
<h2 id="方法二：引用的com组件：Microsoft-Office-Interop-Excel-dll读取EXCEL文件"><a href="#方法二：引用的com组件：Microsoft-Office-Interop-Excel-dll读取EXCEL文件" class="headerlink" title="方法二：引用的com组件：Microsoft.Office.Interop.Excel.dll读取EXCEL文件"></a>方法二：引用的com组件：Microsoft.Office.Interop.Excel.dll读取EXCEL文件</h2><p>首先是Excel.dll的获取,将Office安装目录下的Excel.exe文件Copy到DotNet的bin目录下,cmd到该目录下,运行 TlbImp EXCEL.EXE Excel.dll 得到Dll文件。 再在项目中添加引用该dll文件.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取EXCEL的方法   (用范围区域读取数据)private void OpenExcel(string strFileName)&#123;    object missing = System.Reflection.Missing.Value;</span></span><br><span class="line">    Application excel = <span class="keyword">new</span> Application();<span class="comment">//lauch excel application</span></span><br><span class="line">    <span class="keyword">if</span> (excel == <span class="literal">null</span>)&#123;</span><br><span class="line">        Response.Write(<span class="string">&quot;&lt;script&gt;alert(&#x27;Can&#x27;t access excel&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">    &#125;    <span class="keyword">else</span>&#123;</span><br><span class="line">        excel.Visible = <span class="literal">false</span>; excel.UserControl = <span class="literal">true</span>;        <span class="comment">// 以只读的形式打开EXCEL文件</span></span><br><span class="line">        Workbook wb = excel.Application.Workbooks.Open(strFileName, missing, <span class="literal">true</span>, missing, missing, missing,</span><br><span class="line">         missing, missing, missing, <span class="literal">true</span>, missing, missing, missing, missing, missing);        <span class="comment">//取得第一个工作薄</span></span><br><span class="line">        Worksheet ws = (Worksheet)wb.Worksheets.get_Item(<span class="number">1</span>); </span><br><span class="line">        <span class="comment">//取得总记录行数   (包括标题列)</span></span><br><span class="line">        <span class="built_in">int</span> rowsint = ws.UsedRange.Cells.Rows.Count; <span class="comment">//得到行数</span></span><br><span class="line">        <span class="comment">//int columnsint = mySheet.UsedRange.Cells.Columns.Count;//得到列数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//取得数据范围区域 (不包括标题列) </span></span><br><span class="line">        Range rng1 = ws.Cells.get_Range(<span class="string">&quot;B2&quot;</span>, <span class="string">&quot;B&quot;</span> + rowsint);   <span class="comment">//item</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        Range rng2 = ws.Cells.get_Range(<span class="string">&quot;K2&quot;</span>, <span class="string">&quot;K&quot;</span> + rowsint); <span class="comment">//Customer</span></span><br><span class="line">        <span class="built_in">object</span>[,] arryItem= (<span class="built_in">object</span>[,])rng1.Value2;   <span class="comment">//get range&#x27;s value</span></span><br><span class="line">        <span class="built_in">object</span>[,] arryCus = (<span class="built_in">object</span>[,])rng2.Value2;   </span><br><span class="line">        <span class="comment">//将新值赋给一个数组</span></span><br><span class="line">        <span class="built_in">string</span>[,] arry = <span class="keyword">new</span> <span class="built_in">string</span>[rowsint<span class="number">-1</span>, <span class="number">2</span>];        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= rowsint<span class="number">-1</span>; i++)&#123;            <span class="comment">//Item_Code列</span></span><br><span class="line">            arry[i - <span class="number">1</span>, <span class="number">0</span>] =arryItem[i, <span class="number">1</span>].ToString();            <span class="comment">//Customer_Name列</span></span><br><span class="line">            arry[i - <span class="number">1</span>, <span class="number">1</span>] = arryCus[i, <span class="number">1</span>].ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        Response.Write(arry[<span class="number">0</span>, <span class="number">0</span>] + <span class="string">&quot; / &quot;</span> + arry[<span class="number">0</span>, <span class="number">1</span>] + <span class="string">&quot;#&quot;</span> + arry[rowsint - <span class="number">2</span>, <span class="number">0</span>] + <span class="string">&quot; / &quot;</span> + arry[rowsint - <span class="number">2</span>, <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">     excel.Quit(); excel = <span class="literal">null</span>;</span><br><span class="line">    Process[] procs = Process.GetProcessesByName(<span class="string">&quot;excel&quot;</span>); </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">foreach</span> (Process pro <span class="keyword">in</span> procs)&#123;</span><br><span class="line">        pro.Kill();<span class="comment">//没有更好的方法,只有杀掉进程</span></span><br><span class="line">    &#125;</span><br><span class="line">    GC.Collect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取-等价就是读取一个txt文本文件-。"><a href="#方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取-等价就是读取一个txt文本文件-。" class="headerlink" title="方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取(等价就是读取一个txt文本文件)。"></a>方法三：将EXCEL文件转化成CSV（逗号分隔）的文件，用文件流读取(等价就是读取一个txt文本文件)。</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">先引用命名空间:<span class="keyword">using</span> System.Text;和<span class="keyword">using</span> System.IO;</span><br><span class="line">FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;d:\\Customer.csv&quot;</span>, FileMode.Open, FileAccess.Read, FileShare.None);</span><br><span class="line">StreamReader sr = <span class="keyword">new</span> StreamReader(fs, System.Text.Encoding.GetEncoding(<span class="number">936</span>)); </span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;<span class="built_in">string</span> s = Console.ReadLine();<span class="keyword">while</span> (str != <span class="literal">null</span>)&#123;</span><br><span class="line">    str = sr.ReadLine();    <span class="built_in">string</span>[] xu = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">    xu = str.Split(<span class="string">&#x27;,&#x27;</span>);    <span class="built_in">string</span> ser = xu[<span class="number">0</span>]; </span><br><span class="line">    <span class="built_in">string</span> dse = xu[<span class="number">1</span>];    <span class="keyword">if</span> (ser == s)&#123;</span><br><span class="line">        Console.WriteLine(dse);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sr.Close();</span><br></pre></td></tr></table></figure>
<p>另外也可以将数据库数据导入到一个txt文件，实例如下：  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//txt文件名string fn = DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;-&quot; + &quot;PO014&quot; + &quot;.txt&quot;;</span></span><br><span class="line"> </span><br><span class="line">OleDbConnection con = <span class="keyword">new</span> OleDbConnection(conStr); </span><br><span class="line">con.Open();<span class="built_in">string</span> sql = <span class="string">&quot;select ITEM,REQD_DATE,QTY,PUR_FLG,PO_NUM from TSD_PO014&quot;</span>;        <span class="comment">//OleDbCommand mycom = new OleDbCommand(&quot;select * from TSD_PO014&quot;, mycon);//OleDbDataReader myreader = mycom.ExecuteReader(); //也可以用Reader读取数据DataSet ds = new DataSet();</span></span><br><span class="line">OleDbDataAdapter oda = <span class="keyword">new</span> OleDbDataAdapter(sql, con);</span><br><span class="line">oda.Fill(ds, <span class="string">&quot;PO014&quot;</span>);</span><br><span class="line">DataTable dt = ds.Tables[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">FileStream fs = <span class="keyword">new</span> FileStream(Server.MapPath(<span class="string">&quot;download/&quot;</span> + fn), FileMode.Create, FileAccess.ReadWrite);</span><br><span class="line">StreamWriter strmWriter = <span class="keyword">new</span> StreamWriter(fs);    <span class="comment">//存入到文本文件中 </span></span><br><span class="line"> <span class="comment">//把标题写入.txt文件中 //for (int i = 0; i &lt;dt.Columns.Count;i++)//&#123;//    strmWriter.Write(dt.Columns[i].ColumnName + &quot; &quot;);//&#125;</span></span><br><span class="line"> <span class="keyword">foreach</span> (DataRow dr <span class="keyword">in</span> dt.Rows)&#123;    <span class="built_in">string</span> str0, str1, str2, str3;    <span class="built_in">string</span> str = <span class="string">&quot;|&quot;</span>; <span class="comment">//数据用&quot;|&quot;分隔开</span></span><br><span class="line">    str0 = dr[<span class="number">0</span>].ToString();</span><br><span class="line">    str1 = dr[<span class="number">1</span>].ToString();</span><br><span class="line">    str2 = dr[<span class="number">2</span>].ToString();</span><br><span class="line">    str3 = dr[<span class="number">3</span>].ToString();</span><br><span class="line">    str4 = dr[<span class="number">4</span>].ToString().Trim();</span><br><span class="line">    strmWriter.Write(str0);</span><br><span class="line">    strmWriter.Write(str);</span><br><span class="line">    strmWriter.Write(str1);</span><br><span class="line">    strmWriter.Write(str);</span><br><span class="line">    strmWriter.Write(str2);</span><br><span class="line">    strmWriter.Write(str);</span><br><span class="line">    strmWriter.Write(str3);</span><br><span class="line">    strmWriter.WriteLine(); <span class="comment">//换行&#125;</span></span><br><span class="line">strmWriter.Flush(); </span><br><span class="line">strmWriter.Close();<span class="keyword">if</span> (con.State == ConnectionState.Open)&#123;</span><br><span class="line">    con.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是C#读取Excel文件的三种方法，希望对大家有所帮助。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Excel读取</tag>
        <tag>OleDB</tag>
      </tags>
  </entry>
  <entry>
    <title>C#英文字母大小写转换方法</title>
    <url>/archives/bd7cb84f.html</url>
    <content><![CDATA[<p>在C#的编程开发过程中，有时候判断字符串是否相等时，并不关注字母的大小写，此时在C#中可以使用ToUpper方法将字符串中所有的字母转换为大写，使用ToLower方法可以将字符串中所有字母转换为小写。</p>
<p>例如有个字符串<code>string   testStr=“AbcDefg”</code>;</p>
<ol>
<li>转换为大写：<code>string UpTestStr=testStr.ToUpper();</code></li>
</ol>
<p>转换后UpTestStr结果为:<code>ABCDEFG</code></p>
<ol start="2">
<li>转换为小写：<code>string LowTestStr=testStr.ToLower();</code></li>
</ol>
<p>转换后LowTestStr结果为：<code>abcdefg</code></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>大小写转换</tag>
      </tags>
  </entry>
  <entry>
    <title>C# WinForms 实现打印监听组件</title>
    <url>/archives/bdd5c491.html</url>
    <content><![CDATA[<h2 id="一、组件简介"><a href="#一、组件简介" class="headerlink" title="一、组件简介"></a>一、组件简介</h2><p>打印监听组件是一款集成于 Windows 桌面环境的打印任务管理与监控工具，适用于企业级应用场景。它不仅支持多打印机任务的实时监控，还能通过 WebSocket 与外部系统集成，实现自动化打印、任务状态反馈、远程控制等功能。</p>
<h2 id="二、界面功能介绍"><a href="#二、界面功能介绍" class="headerlink" title="二、界面功能介绍"></a>二、界面功能介绍</h2><h3 id="1-主界面与托盘集成"><a href="#1-主界面与托盘集成" class="headerlink" title="1. 主界面与托盘集成"></a>1. 主界面与托盘集成</h3><ul>
<li>主窗体：采用 WinForms 界面，包含多标签页（TabControl），每个标签页对应一台本地打印机，便于分组管理。<br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061415494301.png" alt="C# WinForms 实现打印监听组件"></li>
<li>托盘图标：程序最小化后驻留于系统托盘，双击可快速还原主界面，支持右键菜单操作（如退出、重启、服务设置等）。<br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061415541902.png" alt="C# WinForms 实现打印监听组件"></li>
</ul>
<h3 id="2-打印机管理"><a href="#2-打印机管理" class="headerlink" title="2. 打印机管理"></a>2. 打印机管理</h3><ul>
<li>打印机列表：自动检测本地所有已安装打印机，支持设置默认打印机、查看打印机属性。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绑定本地打印机列表到菜单</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">BindPrintersToMenu</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    默认打印机ToolStripMenuItem.DropDownItems.Clear();</span><br><span class="line">    <span class="comment">// 获取当前系统默认打印机</span></span><br><span class="line">    <span class="built_in">string</span> defaultPrinter = <span class="keyword">new</span> System.Drawing.Printing.PrinterSettings().PrinterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先添加默认打印机（始终第一行）</span></span><br><span class="line">    <span class="keyword">var</span> defaultItem = <span class="keyword">new</span> ToolStripMenuItem(defaultPrinter)</span><br><span class="line">    &#123;</span><br><span class="line">        Checked = <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    defaultItem.Click += (s, e) =&gt; SetDefaultPrinterUI(defaultPrinter);</span><br><span class="line">    <span class="comment">// 添加“首选项”子菜单</span></span><br><span class="line">    <span class="keyword">var</span> prefItem = <span class="keyword">new</span> ToolStripMenuItem(<span class="string">&quot;首选项&quot;</span>);</span><br><span class="line">    prefItem.Click += (s, e) =&gt; ShowPrinterProperties(defaultPrinter);</span><br><span class="line">    defaultItem.DropDownItems.Add(prefItem);</span><br><span class="line">    默认打印机ToolStripMenuItem.DropDownItems.Add(defaultItem);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再添加其他打印机（排除默认打印机）</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> printer <span class="keyword">in</span> System.Drawing.Printing.PrinterSettings.InstalledPrinters)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (printer == defaultPrinter)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> item = <span class="keyword">new</span> ToolStripMenuItem(printer)</span><br><span class="line">        &#123;</span><br><span class="line">            Checked = <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">        item.Click += (s, e) =&gt; SetDefaultPrinterUI(printer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> prefItem2 = <span class="keyword">new</span> ToolStripMenuItem(<span class="string">&quot;首选项&quot;</span>);</span><br><span class="line">        prefItem2.Click += (s, e) =&gt; ShowPrinterProperties(printer);</span><br><span class="line">        item.DropDownItems.Add(prefItem2);</span><br><span class="line"></span><br><span class="line">        默认打印机ToolStripMenuItem.DropDownItems.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> UI和系统都设置默认打印机 </span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;printerName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetDefaultPrinterUI</span>(<span class="params"><span class="built_in">string</span> printerName</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">foreach</span> (ToolStripMenuItem item <span class="keyword">in</span> 默认打印机ToolStripMenuItem.DropDownItems)</span><br><span class="line">         item.Checked = item.Text == printerName;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 如需设置为系统默认打印机，可调用 Win32 API（可选）  </span></span><br><span class="line">     SetSystemDefaultPrinter(printerName);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 显示打印机首选项对话框</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;printerName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShowPrinterProperties</span>(<span class="params"><span class="built_in">string</span> printerName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用rundll32调用打印机属性对话框</span></span><br><span class="line">    <span class="comment">//string args = $&quot;printui.dll,PrintUIEntry /p /n \&quot;&#123;printerName&#125;\&quot;&quot;;</span></span><br><span class="line">    <span class="comment">//•	/e 参数表示直接打开“首选项”对话框</span></span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">args</span> = <span class="string">$&quot;printui.dll,PrintUIEntry /e /n \&quot;<span class="subst">&#123;printerName&#125;</span>\&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> psi = <span class="keyword">new</span> System.Diagnostics.ProcessStartInfo</span><br><span class="line">    &#123;</span><br><span class="line">        FileName = <span class="string">&quot;rundll32.exe&quot;</span>,</span><br><span class="line">        Arguments = <span class="keyword">args</span>,</span><br><span class="line">        UseShellExecute = <span class="literal">false</span>,</span><br><span class="line">        CreateNoWindow = <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Process.Start(psi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;无法打开打印机首选项窗口：&quot;</span> + ex.Message, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TabControl：每台打印机一个标签页，便于查看和管理各自的打印任务。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 绑定本地打印机列表到TabControl</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BindPrintersToTabControl</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    tabControl1.TabPages.Clear();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> defaultPrinter = <span class="keyword">new</span> System.Drawing.Printing.PrinterSettings().PrinterName;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; printers = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先将默认打印机添加到列表首位</span></span><br><span class="line">    printers.Add(defaultPrinter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再添加其他打印机（排除默认打印机）</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> printer <span class="keyword">in</span> System.Drawing.Printing.PrinterSettings.InstalledPrinters)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (printer != defaultPrinter)</span><br><span class="line">            printers.Add(printer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> printer <span class="keyword">in</span> printers)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tabPage = <span class="keyword">new</span> TabPage(printer);</span><br><span class="line">        <span class="comment">// 创建DataGridView</span></span><br><span class="line">        <span class="keyword">var</span> dgv = <span class="keyword">new</span> DataGridView</span><br><span class="line">        &#123;</span><br><span class="line">            Dock = DockStyle.Fill,</span><br><span class="line">            ReadOnly = <span class="literal">true</span>,</span><br><span class="line">            AllowUserToAddRows = <span class="literal">false</span>,</span><br><span class="line">            AllowUserToDeleteRows = <span class="literal">false</span>,</span><br><span class="line">            RowHeadersVisible = <span class="literal">false</span>,</span><br><span class="line">            AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加列</span></span><br><span class="line">        dgv.Columns.Add(<span class="string">&quot;clientIp&quot;</span>, <span class="string">&quot;来源&quot;</span>);</span><br><span class="line">        dgv.Columns.Add(<span class="string">&quot;taskId&quot;</span>, <span class="string">&quot;任务ID&quot;</span>);</span><br><span class="line">        dgv.Columns.Add(<span class="string">&quot;taskName&quot;</span>, <span class="string">&quot;任务名称&quot;</span>);</span><br><span class="line">        dgv.Columns.Add(<span class="string">&quot;realName&quot;</span>, <span class="string">&quot;模板&quot;</span>);</span><br><span class="line">        dgv.Columns.Add(<span class="string">&quot;requestTime&quot;</span>, <span class="string">&quot;开始时间&quot;</span>);</span><br><span class="line">        dgv.Columns.Add(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;任务状态&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定菜单</span></span><br><span class="line">        dgv.ContextMenuStrip = dgvContextMenu;</span><br><span class="line">        dgv.MouseDown += Dgv_MouseDown;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建TextBox</span></span><br><span class="line">        <span class="keyword">var</span> txtSearch = <span class="keyword">new</span> TextBox</span><br><span class="line">        &#123;</span><br><span class="line">            PlaceholderText = <span class="string">&quot;任务ID&quot;</span>,</span><br><span class="line">            Width = <span class="number">120</span>,</span><br><span class="line">            Anchor = AnchorStyles.Left | AnchorStyles.Bottom</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Button</span></span><br><span class="line">        <span class="keyword">var</span> btnSearch = <span class="keyword">new</span> Button</span><br><span class="line">        &#123;</span><br><span class="line">            Text = <span class="string">&quot;查找&quot;</span>,</span><br><span class="line">            Width = <span class="number">60</span>,</span><br><span class="line">            Anchor = AnchorStyles.Left | AnchorStyles.Bottom</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找事件</span></span><br><span class="line">        btnSearch.Click += (s, e) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> searchId = txtSearch.Text.Trim();</span><br><span class="line">            <span class="built_in">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (DataGridViewRow row <span class="keyword">in</span> dgv.Rows)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (row.IsNewRow) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (row.Cells[<span class="string">&quot;taskId&quot;</span>].Value?.ToString() == searchId)</span><br><span class="line">                &#123;</span><br><span class="line">                    row.Selected = <span class="literal">true</span>;</span><br><span class="line">                    dgv.CurrentCell = row.Cells[<span class="string">&quot;taskId&quot;</span>];</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    row.Selected = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!found)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;未找到对应任务ID！&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Panel布局</span></span><br><span class="line">        <span class="keyword">var</span> panel = <span class="keyword">new</span> Panel</span><br><span class="line">        &#123;</span><br><span class="line">            Dock = DockStyle.Bottom,</span><br><span class="line">            Height = <span class="number">40</span></span><br><span class="line">        &#125;;</span><br><span class="line">        txtSearch.Location = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">8</span>);</span><br><span class="line">        btnSearch.Location = <span class="keyword">new</span> Point(<span class="number">140</span>, <span class="number">6</span>);</span><br><span class="line">        panel.Controls.Add(txtSearch);</span><br><span class="line">        panel.Controls.Add(btnSearch);</span><br><span class="line"></span><br><span class="line">        tabPage.Controls.Add(panel);</span><br><span class="line">        tabPage.Controls.Add(dgv);</span><br><span class="line">        tabControl1.TabPages.Add(tabPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-打印任务监控"><a href="#3-打印任务监控" class="headerlink" title="3. 打印任务监控"></a>3. 打印任务监控</h3><ul>
<li>任务列表：每个打印机标签页下方为 DataGridView，实时显示当前打印任务，包括来源、任务ID、任务名称、模板、开始时间、任务状态等信息。<br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061415494301.png" alt="C# WinForms 实现打印监听组件"></li>
<li>右键菜单：支持对单个任务进行“取消打印”、“重新打印”、“删除记录”等操作。<br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061416011103.png" alt="C# WinForms 实现打印监听组件"></li>
<li>任务搜索：支持按任务ID快速定位任务。</li>
</ul>
<h3 id="4-其他功能"><a href="#4-其他功能" class="headerlink" title="4. 其他功能"></a>4. 其他功能</h3><ul>
<li>服务控制：可一键启动&#x2F;停止 WebSocket 服务，支持与外部系统通信。</li>
<li>模板设计与预览：集成 FastReport 设计器和预览器，方便模板维护。<blockquote>
<p>因为FastReport.Net 是需要购买授权的，所以我使用的是FastReport.OpenSource(开源版)，开源版功能太少，不能直接从程序内部调用FastReport设计器和预览器，只能通过启动本地安装的.exe来实现。</p>
</blockquote>
</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设计菜单项点击事件，启动 FastReport 设计器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> 设计ToolStripMenuItem_Click(<span class="built_in">object</span> sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> designerPath = GetConfigValue(<span class="string">&quot;designer_path&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> templatePath = GetTemplatePathFromConfig();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(designerPath) || !System.IO.File.Exists(designerPath))</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;未找到 FastReport 设计器，请检查 config.ini 配置！&quot;</span>, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!System.IO.File.Exists(templatePath))</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;未找到模板文件，请检查路径！&quot;</span>, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Process.Start(designerPath, <span class="string">$&quot;\&quot;<span class="subst">&#123;templatePath&#125;</span>\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;启动 FastReport 设计器失败：&quot;</span> + ex.Message, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> 预览ToolStripMenuItem_Click(<span class="built_in">object</span> sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> viewerPath = GetConfigValue(<span class="string">&quot;viewer_path&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> templatePath = GetTemplatePathFromConfig();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(viewerPath) || !System.IO.File.Exists(viewerPath))</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;未找到 FastReport 预览器，请检查 config.ini 配置！&quot;</span>, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!System.IO.File.Exists(templatePath))</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;未找到模板文件，请检查路径！&quot;</span>, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Diagnostics.Process.Start(viewerPath, <span class="string">$&quot;\&quot;<span class="subst">&#123;templatePath&#125;</span>\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;启动 FastReport 预览器失败：&quot;</span> + ex.Message, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自动更新：支持在线检查和自动更新程序版本。<blockquote>
<p>这里使用的是：<code>Autoupdater.NET</code></p>
</blockquote>
</li>
<li>帮助与支持：内置开发者联系方式，便于用户反馈和技术支持。<br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061416103304.png" alt="开发者联系方式：wxscc@foxmail.com"></li>
</ul>
<h2 id="三、技术要点"><a href="#三、技术要点" class="headerlink" title="三、技术要点"></a>三、技术要点</h2><h3 id="1-打印任务监听与管理"><a href="#1-打印任务监听与管理" class="headerlink" title="1. 打印任务监听与管理"></a>1. 打印任务监听与管理</h3><ul>
<li>WMI 打印作业监控<br>通过 <code>System.Management</code> 命名空间，使用 <code>WMI</code> 查询 <code>Win32_PrintJob</code>，实现对打印队列的实时监控。可根据任务ID或文档名唯一标识，精确定位和管理打印作业。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Management;</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 打印机监听方法实现</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;printerName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;taskId&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartMonitorPrintJob</span>(<span class="params"><span class="built_in">string</span> printerName, <span class="built_in">int</span> taskId, <span class="built_in">string</span> taskName</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     Task.Run(() =&gt;</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">string</span> query = <span class="string">$&quot;SELECT * FROM Win32_PrintJob WHERE Name LIKE &#x27;%<span class="subst">&#123;printerName&#125;</span>%&#x27;&quot;</span>;</span><br><span class="line">             <span class="keyword">using</span> (<span class="keyword">var</span> searcher = <span class="keyword">new</span> ManagementObjectSearcher(query))</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="keyword">var</span> jobs = searcher.Get();</span><br><span class="line">                     <span class="built_in">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">                     <span class="keyword">foreach</span> (ManagementObject job <span class="keyword">in</span> jobs)</span><br><span class="line">                     &#123;</span><br><span class="line">                         found = <span class="literal">true</span>;</span><br><span class="line">                         <span class="built_in">int</span> JobId = Convert.ToInt32(job[<span class="string">&quot;JobId&quot;</span>]);</span><br><span class="line">                         <span class="keyword">if</span> (JobId == taskId)</span><br><span class="line">                         &#123;</span><br><span class="line">                             <span class="comment">// 匹配到本任务，更新状态</span></span><br><span class="line">                             <span class="built_in">string</span> jobStatus = job[<span class="string">&quot;JobStatus&quot;</span>]?.ToString() ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">                             <span class="built_in">string</span> status = job[<span class="string">&quot;Status&quot;</span>]?.ToString() ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">                             <span class="built_in">string</span> displayStatus = <span class="built_in">string</span>.IsNullOrEmpty(jobStatus) ? status : jobStatus;</span><br><span class="line">                             UpdateTaskStatusOnUI(printerName, taskName, displayStatus);</span><br><span class="line">                             <span class="keyword">if</span> (displayStatus.Contains(<span class="string">&quot;Printed&quot;</span>) || displayStatus.Contains(<span class="string">&quot;Completed&quot;</span>) || displayStatus.Contains(<span class="string">&quot;Deleted&quot;</span>))</span><br><span class="line">                                 <span class="keyword">return</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">if</span> (!found)</span><br><span class="line">                     &#123;</span><br><span class="line">                         <span class="comment">// 作业已消失，认为已完成</span></span><br><span class="line">                         UpdateTaskStatusOnUI(printerName, taskName, <span class="string">&quot;已完成&quot;</span>);</span><br><span class="line">                         <span class="keyword">return</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                     Thread.Sleep(<span class="number">1000</span>); <span class="comment">// 1秒轮询</span></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">         &#123;</span><br><span class="line">             UpdateTaskStatusOnUI(printerName, taskName, <span class="string">&quot;状态监听失败&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>任务状态同步<br>通过轮询方式定时查询打印队列，自动更新任务状态（如“正在打印”、“已完成”、“已取消”等），并在 UI 上实时反馈。</li>
</ul>
<h3 id="2-打印任务操作"><a href="#2-打印任务操作" class="headerlink" title="2. 打印任务操作"></a>2. 打印任务操作</h3><ul>
<li>取消打印<br>通过 WMI 删除指定打印作业，确保任务被及时从队列中移除，并同步更新界面状态。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 取消打印</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CancelPrint_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dgv = GetCurrentDgv();</span><br><span class="line">    <span class="keyword">if</span> (dgv == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> row = dgv.SelectedRows.Count &gt; <span class="number">0</span> ? dgv.SelectedRows[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (row == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">int</span> taskId = Convert.ToInt32(row.Cells[<span class="string">&quot;taskId&quot;</span>].Value);</span><br><span class="line">    <span class="built_in">string</span> printerName = tabControl1.SelectedTab.Text;</span><br><span class="line">    <span class="comment">// 查询打印队列，找到文档名包含 taskId 的作业</span></span><br><span class="line">    <span class="built_in">string</span> query = <span class="string">$&quot;SELECT * FROM Win32_PrintJob WHERE Name LIKE &#x27;%<span class="subst">&#123;printerName&#125;</span>%&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> searcher = <span class="keyword">new</span> System.Management.ManagementObjectSearcher(query))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (System.Management.ManagementObject job <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> JobId = Convert.ToInt32(job[<span class="string">&quot;JobId&quot;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (JobId == taskId)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    job.Delete(); <span class="comment">// 删除打印任务</span></span><br><span class="line">                    row.Cells[<span class="string">&quot;status&quot;</span>].Value = <span class="string">&quot;已取消&quot;</span>;</span><br><span class="line">                    MessageBox.Show(<span class="string">$&quot;已取消打印任务：<span class="subst">&#123;taskId&#125;</span>&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;取消打印失败：&quot;</span> + ex.Message, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;未找到对应的打印任务，可能已完成或被清除。&quot;</span>, <span class="string">&quot;提示&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重新打印<br>首次打印时将所有参数（文件路径、数据、模板名等）保存在 DataGridView 行的 Tag 属性，重新打印时直接复用原始参数，保证打印一致性。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重新打印</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reprint_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dgv = GetCurrentDgv();</span><br><span class="line">    <span class="keyword">if</span> (dgv == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> row = dgv.SelectedRows.Count &gt; <span class="number">0</span> ? dgv.SelectedRows[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (row == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (row.Tag <span class="keyword">is</span> PrintTaskInfo info)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 复用原 taskName，或可选生成新 taskName</span></span><br><span class="line">        <span class="built_in">string</span> taskName = row.Cells[<span class="string">&quot;taskName&quot;</span>].Value.ToString();</span><br><span class="line">        <span class="built_in">string</span> status = row.Cells[<span class="string">&quot;status&quot;</span>].Value.ToString();</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="string">&quot;已完成&quot;</span>)</span><br><span class="line">            PrintFile(info.FilePath, info.Data, taskName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;未找到原始打印信息，无法重新打印。&quot;</span>, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除记录<br>支持在任务未完成时先删除打印队列中的作业，再移除界面记录，防止“假删除”导致队列堆积。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除打印记录</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DeleteRecord_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> dgv = GetCurrentDgv();</span><br><span class="line">    <span class="keyword">if</span> (dgv == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> row = dgv.SelectedRows.Count &gt; <span class="number">0</span> ? dgv.SelectedRows[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (row == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> taskId = Convert.ToInt32(row.Cells[<span class="string">&quot;taskId&quot;</span>].Value);</span><br><span class="line">    <span class="built_in">string</span> status = row.Cells[<span class="string">&quot;status&quot;</span>].Value?.ToString();</span><br><span class="line">    <span class="built_in">string</span> printerName = tabControl1.SelectedTab.Text;</span><br><span class="line">    <span class="comment">// 如果未完成，先删除打印队列中的任务</span></span><br><span class="line">    <span class="keyword">if</span> (status != <span class="string">&quot;已完成&quot;</span> &amp;&amp; status != <span class="string">&quot;已取消&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> query = <span class="string">$&quot;SELECT * FROM Win32_PrintJob WHERE Name LIKE &#x27;%<span class="subst">&#123;printerName&#125;</span>%&#x27;&quot;</span>;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> searcher = <span class="keyword">new</span> System.Management.ManagementObjectSearcher(query))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (System.Management.ManagementObject job <span class="keyword">in</span> searcher.Get())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> JobId = Convert.ToInt32(job[<span class="string">&quot;JobId&quot;</span>]);</span><br><span class="line">                <span class="keyword">if</span> (JobId == taskId)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        job.Delete(); <span class="comment">// 删除打印任务</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                    &#123;</span><br><span class="line">                        MessageBox.Show(<span class="string">&quot;删除打印任务失败：&quot;</span> + ex.Message, <span class="string">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dgv.Rows.Remove(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-WebSocket-通信"><a href="#3-WebSocket-通信" class="headerlink" title="3. WebSocket 通信"></a>3. WebSocket 通信</h3><ul>
<li>Fleck 组件集成<br>使用 <code>Fleck</code> 实现 WebSocket 服务端，支持外部系统通过网络下发打印任务、查询状态、远程控制等。</li>
<li>消息协议设计<br>采用 JSON 协议，支持多种命令（如 <code>print</code>、<code>show</code>、<code>ping</code> 等），并能将打印结果、错误信息实时反馈给客户端。</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">socket.OnMessage = message =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> msg = message?.Trim().ToLowerInvariant();</span><br><span class="line">    <span class="comment">// 处理不同的消息</span></span><br><span class="line">    <span class="keyword">if</span> (msg == <span class="string">&quot;ping&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 回复 pong</span></span><br><span class="line">        socket.Send(<span class="string">&quot;pong&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (msg == <span class="string">&quot;show&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 显示主窗体</span></span><br><span class="line">        <span class="keyword">this</span>.Invoke(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Show();</span><br><span class="line">            <span class="keyword">this</span>.WindowState = FormWindowState.Normal;</span><br><span class="line">            <span class="keyword">this</span>.ShowInTaskbar = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.Activate();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (msg != <span class="literal">null</span> &amp;&amp; msg.TrimStart().StartsWith(<span class="string">&quot;&#123;&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 反序列化为 JsonNode 便于动态访问</span></span><br><span class="line">        <span class="keyword">var</span> json = JsonNode.Parse(msg);</span><br><span class="line">        <span class="keyword">var</span> cmd = json?[<span class="string">&quot;cmd&quot;</span>]?.ToString();</span><br><span class="line">        <span class="built_in">string</span> requestId = json?[<span class="string">&quot;requestid&quot;</span>]?.ToString();</span><br><span class="line">        <span class="comment">//处理打印任务</span></span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="string">&quot;print&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 取出 printIniInfo 和 data</span></span><br><span class="line">            <span class="keyword">var</span> printIniInfo = json[<span class="string">&quot;data&quot;</span>]?[<span class="string">&quot;printiniinfo&quot;</span>];</span><br><span class="line">            <span class="keyword">var</span> data = json[<span class="string">&quot;data&quot;</span>]?[<span class="string">&quot;data&quot;</span>];</span><br><span class="line">            <span class="built_in">string</span> filePath = printIniInfo?[<span class="string">&quot;filepath&quot;</span>]?.ToString();</span><br><span class="line">            <span class="built_in">string</span> realName = printIniInfo?[<span class="string">&quot;realname&quot;</span>]?.ToString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取来源IP和端口</span></span><br><span class="line">            <span class="built_in">string</span> clientIp = socket.ConnectionInfo.ClientIpAddress;</span><br><span class="line">            <span class="built_in">int</span> clientPort = socket.ConnectionInfo.ClientPort;</span><br><span class="line">            <span class="built_in">string</span> requestTime = DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot;作业正在后台处理&quot;</span>;</span><br><span class="line">            <span class="comment">// 获取当前系统默认打印机</span></span><br><span class="line">            <span class="built_in">string</span> printerName = <span class="keyword">new</span> System.Drawing.Printing.PrinterSettings().PrinterName;</span><br><span class="line">            <span class="built_in">int</span> taskId = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 任务名称为当前时间</span></span><br><span class="line">            <span class="built_in">string</span> taskName = DateTime.Now.ToString(<span class="string">&quot;yyyyMMddHHmmssfff&quot;</span>);</span><br><span class="line">            <span class="comment">// 查找对应TabPage和DataGridView</span></span><br><span class="line">            <span class="keyword">this</span>.Invoke(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (TabPage tab <span class="keyword">in</span> tabControl1.TabPages)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 支持“(默认)”后缀</span></span><br><span class="line">                    <span class="keyword">if</span> (tab.Text.StartsWith(printerName))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> dgv = tab.Controls.OfType&lt;DataGridView&gt;().FirstOrDefault();</span><br><span class="line">                        <span class="keyword">if</span> (dgv != <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">int</span> rowIndex = dgv.Rows.Add(</span><br><span class="line">                                 <span class="string">$&quot;<span class="subst">&#123;clientIp&#125;</span>:<span class="subst">&#123;clientPort&#125;</span>&quot;</span>, <span class="comment">// 来源</span></span><br><span class="line">                                 taskId,                     <span class="comment">// 任务ID</span></span><br><span class="line">                                 taskName,                   <span class="comment">// 任务名称</span></span><br><span class="line">                                 realName,                   <span class="comment">// 模板</span></span><br><span class="line">                                 requestTime,                <span class="comment">// 开始时间</span></span><br><span class="line">                                 status                      <span class="comment">// 任务状态</span></span><br><span class="line">                             );</span><br><span class="line">                            <span class="keyword">var</span> row = dgv.Rows[rowIndex];</span><br><span class="line">                            row.Tag = <span class="keyword">new</span> PrintTaskInfo</span><br><span class="line">                            &#123;</span><br><span class="line">                                FilePath = filePath,</span><br><span class="line">                                Data = data</span><br><span class="line">                            &#125;;</span><br><span class="line">                            <span class="comment">// 添加后排序</span></span><br><span class="line">                            dgv.Sort(dgv.Columns[<span class="string">&quot;requestTime&quot;</span>], ListSortDirection.Descending);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 调用实际打印方法</span></span><br><span class="line">            <span class="keyword">this</span>.Invoke(() =&gt; PrintFile(filePath, data, taskName, socket, requestId));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//监听打印机状态</span></span><br><span class="line">            StartMonitorPrintJob(printerName, taskId, taskName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 处理其他cmd</span></span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;收到未知cmd: <span class="subst">&#123;cmd&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;收到未知消息: <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>异常处理与反馈<br>打印过程中如遇异常（如文件不存在、数据格式错误等），会捕获异常并通过 WebSocket 回复详细错误信息，便于外部系统及时处理。</li>
</ul>
<h3 id="4-打印文件类型支持"><a href="#4-打印文件类型支持" class="headerlink" title="4. 打印文件类型支持"></a>4. 打印文件类型支持</h3><ul>
<li>多格式兼容<br>支持 TXT、图片（JPG&#x2F;PNG&#x2F;BMP&#x2F;GIF）、PDF、FastReport 模板（FRX）等多种文件类型的打印。<br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061416305105.png" alt="C# WinForms 实现打印监听组件"><br><img src="https://images.codeobservatory.cn/hexo/202506/14/2025061416290206.png" alt="C# WinForms 实现打印监听组件"></li>
<li>模板数据绑定<br>对于报表类打印，支持将 JSON、DataTable、DataSet 等多种数据源动态绑定到模板，实现灵活的数据驱动打印。</li>
</ul>
<h3 id="5-用户体验优化"><a href="#5-用户体验优化" class="headerlink" title="5. 用户体验优化"></a>5. 用户体验优化</h3><ul>
<li>界面交互友好<br>采用右键菜单、弹窗提示、托盘集成等方式，提升用户操作便捷性。</li>
<li>错误提示与日志<br>所有关键操作均有明确的错误提示，便于用户定位问题；可扩展日志记录功能，方便后期维护。</li>
</ul>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>打印监听组件通过对打印队列的实时监控、任务的精细化管理、与外部系统的高效集成，极大提升了企业打印自动化和可控性。其灵活的界面、丰富的功能和健壮的技术架构，适用于多种业务场景，值得在企业信息化建设中推广应用。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server数据库备份及导出表数据和结构</title>
    <url>/archives/56e6e176.html</url>
    <content><![CDATA[<h2 id="一、备份表数据及结构"><a href="#一、备份表数据及结构" class="headerlink" title="一、备份表数据及结构"></a>一、备份表数据及结构</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> new_table_name <span class="keyword">from</span> old_tablename;</span><br></pre></td></tr></table></figure>

<h2 id="二、导出表数据及结构"><a href="#二、导出表数据及结构" class="headerlink" title="二、导出表数据及结构"></a>二、导出表数据及结构</h2><ol>
<li>选中要导出的数据库–&gt;任务–&gt;生成脚本（或者在任务里面有生成脚本这个选项，好好找找能找到的！）<br><img src="https://images.codeobservatory.cn/hexo/202506/18/2025-06-18%2009451901.png" alt="SQL Server数据库备份及导出表数据和结构"></li>
<li>出现“生成和发布脚本”窗口，点击下一步<br><img src="https://images.codeobservatory.cn/hexo/202506/18/2025-06-18%2009465102.png" alt="SQL Server数据库备份及导出表数据和结构"></li>
<li>选择要编写脚本的数据库对象，全部导出选第一个，如果你想导出部分数据勾选    第二个就好了<br><img src="https://images.codeobservatory.cn/hexo/202506/18/2025-06-18%2009481203.png" alt="SQL Server数据库备份及导出表数据和结构"></li>
<li>出现这个画面后点击”高级”按钮（重点）<br><img src="https://images.codeobservatory.cn/hexo/202506/18/2025-06-18%2009484204.png" alt="SQL Server数据库备份及导出表数据和结构"></li>
<li>”要编写脚本的数据的类型”对应：”架构和数据”<br><img src="https://images.codeobservatory.cn/hexo/202506/18/2025-06-18%2009491705.png" alt="SQL Server数据库备份及导出表数据和结构"></li>
<li>确定、下一步、下一步、导出成功！</li>
</ol>
<h2 id="三、恢复数据库表结构及数据"><a href="#三、恢复数据库表结构及数据" class="headerlink" title="三、恢复数据库表结构及数据"></a>三、恢复数据库表结构及数据</h2><p>电脑打开CMD，输入以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">sqlcmd -S SERVERNAME -U NAME -P PWD -i D:\sql.sql</span><br></pre></td></tr></table></figure>
<p>回车执行即可。</p>
<p><strong>注释</strong>：</p>
<blockquote>
<p><code>SERVERNAME</code>:目标数据库IP<br><code>NAME</code>:目标数据库登录名<br><code>PWD</code>:目标数据库登录密码<br><code>D:\sql.sql</code>:数据备份文件的路径</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>数据库</tag>
        <tag>数据备份</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net通过dom-to-image.js将HTML中标签div内的内容转化为图片保存到本地</title>
    <url>/archives/8b3118e9.html</url>
    <content><![CDATA[<p>最近在开发一个手机商城结算系统，需要用到推广分享海报页面，代理生成自己的分享页面保存到本地，也分享给大家：</p>
<h2 id="1、引入几个JS库"><a href="#1、引入几个JS库" class="headerlink" title="1、引入几个JS库"></a>1、引入几个JS库</h2><ol>
<li>：<code>jquery</code> 版本还没试过我用的是1.9.1 （不贴链接了，这个要找很容易）</li>
<li>：<code>dom-to-image.js</code> （点击下载 下载下来解压开在src目录里面）</li>
<li>：<code>FileSaver.js</code> （点击下载 下载下来解压开在src目录里面）</li>
</ol>
<h2 id="2、新建HTML引入第一步中的几个库"><a href="#2、新建HTML引入第一步中的几个库" class="headerlink" title="2、新建HTML引入第一步中的几个库"></a>2、新建HTML引入第一步中的几个库</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/18/3bb79995bc95549c.png" alt="Asp.Net通过dom-to-image.js将HTML中标签div内的内容转化为图片保存到本地"></p>
<h2 id="3、生成图片"><a href="#3、生成图片" class="headerlink" title="3、生成图片"></a>3、生成图片</h2><h3 id="3-1、生成png图片"><a href="#3-1、生成png图片" class="headerlink" title="3.1、生成png图片"></a>3.1、生成png图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> jd= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;标签ID&#x27;</span>);</span><br><span class="line">domtoimage.<span class="title function_">toPng</span>(jd)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">url</span>) &#123;&lt;!-- --&gt;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">src</span> = url;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;&lt;!-- --&gt;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;生成图片出错&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-2、生成下载图片"><a href="#3-2、生成下载图片" class="headerlink" title="3.2、生成下载图片"></a>3.2、生成下载图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存图片</span></span><br><span class="line">$(<span class="string">&quot;#btnToImg&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&lt;!-- --&gt;</span><br><span class="line"> domtoimage.<span class="title function_">toBlob</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chartdiv&#x27;</span>))</span><br><span class="line"> .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">blob</span>) &#123;&lt;!-- --&gt;</span><br><span class="line"> <span class="variable language_">window</span>.<span class="title function_">saveAs</span>(blob, <span class="string">&#x27;ImgName.jpg&#x27;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-3、生成jpeg图片"><a href="#3-3、生成jpeg图片" class="headerlink" title="3.3、生成jpeg图片"></a>3.3、生成jpeg图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">domtoimage.<span class="title function_">toJpeg</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chartdiv&#x27;</span>), &#123;&lt;!-- --&gt; <span class="attr">quality</span>: <span class="number">0.95</span> &#125;)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">dataUrl</span>) &#123;&lt;!-- --&gt;</span><br><span class="line">     <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">     link.<span class="property">download</span> = <span class="string">&#x27;Imgname.jpeg&#x27;</span>;</span><br><span class="line">     link.<span class="property">href</span> = dataUrl;</span><br><span class="line">     link.<span class="title function_">click</span>();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>使用的时候只要调方法就可以了    </p>
<p><strong>直接贴上Demo源码</strong>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.9.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/dom-to-image.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/FileSaver.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-100&quot;</span> <span class="attr">id</span>=<span class="string">&quot;savePoster&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/rec-bg.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../upload/202212090409407676.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;usertouxiang&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usertouxiang&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;头像&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divCode&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ew&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;WeixinPay/MakeQRCode.aspx?data=473_375_473&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;regist.html?id=473<span class="symbol">&amp;amp;</span>marketId=375<span class="symbol">&amp;amp;</span>organizeId=473&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>vinnie（1XXXXXXX554）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">&quot;savePic(this)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #fff;background: red;margin: 0.5rem 3rem;padding: 5px 0px;border-radius: 5px;&quot;</span>&gt;</span>保存该二维码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取当前时间格式化</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">date</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> month = <span class="variable language_">this</span>.<span class="title function_">format</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> da = <span class="variable language_">this</span>.<span class="title function_">format</span>(date.<span class="title function_">getDate</span>())</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> h = <span class="variable language_">this</span>.<span class="title function_">format</span>(date.<span class="title function_">getHours</span>())</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> m = <span class="variable language_">this</span>.<span class="title function_">format</span>(date.<span class="title function_">getMinutes</span>())</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> s = <span class="variable language_">this</span>.<span class="title function_">format</span>(date.<span class="title function_">getSeconds</span>())</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> year + month + da + h + m + s;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//return year + &#x27;-&#x27; + month + &#x27;-&#x27; + da</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">format</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="title class_">Number</span>(val) &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + val : <span class="string">&#x27;&#x27;</span> + val</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//保存到相册</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">savePic</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  $(obj).<span class="title function_">remove</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 下载png图片</span></span></span><br><span class="line"><span class="language-javascript">  domtoimage.<span class="title function_">toBlob</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;savePoster&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">blob</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">saveAs</span>(blob, <span class="string">&#x27;share&#x27;</span> + <span class="title function_">formatDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&#x27;.png&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4、效果图："><a href="#4、效果图：" class="headerlink" title="4、效果图："></a>4、效果图：</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/18/8c182049a60f850.png" alt="Asp.Net通过dom-to-image.js将HTML中标签div内的内容转化为图片保存到本地"></p>
<h2 id="5、domtoimage—-将指定页面生成图片"><a href="#5、domtoimage—-将指定页面生成图片" class="headerlink" title="5、domtoimage—-将指定页面生成图片"></a>5、domtoimage—-将指定页面生成图片</h2><h3 id="5-1、下载jquery-min-js、dom-to-image-js、FileSaver-js"><a href="#5-1、下载jquery-min-js、dom-to-image-js、FileSaver-js" class="headerlink" title="5.1、下载jquery.min.js、dom-to-image.js、FileSaver.js"></a>5.1、下载<code>jquery.min.js</code>、<code>dom-to-image.js</code>、<code>FileSaver.js</code></h3><blockquote>
<p>FileSaver.js文件百度网盘地址：<br>    链接：<a href="https://pan.baidu.com/s/1W_g2azndSt7yNqQbJGpnbQ">https://pan.baidu.com/s/1W_g2azndSt7yNqQbJGpnbQ</a><br>    提取码：iklw<br>dom-to-image.js文件百度网盘地址：<br>        链接：<a href="https://pan.baidu.com/s/1sCwDb065585DfF9GmF6zEA">https://pan.baidu.com/s/1sCwDb065585DfF9GmF6zEA</a><br>        提取码：2up2</p>
</blockquote>
<h2 id="6、跨域问题"><a href="#6、跨域问题" class="headerlink" title="6、跨域问题"></a>6、跨域问题</h2><p>如果页面中有图片引入，那么就需要考虑跨域问题，我使用的是iis，只需要在根目录添加web.config文件即可</p>
<ol>
<li><p>新建一个txt</p>
</li>
<li><p>把下面代码写入到文件里</p>
</li>
<li><p>文件和后缀名改成 web.config</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Access-Control-Allow-Methods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Access-Control-Allow-Headers&quot;</span> <span class="attr">value</span>=<span class="string">&quot;AuthToken, Content-Type, Accept, X-Requested-With&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>传送门：<a href="/archives/1e7ac72f.html">解决nginx跨域问题</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>解决iis跨域问题</title>
    <url>/archives/b9f87be3.html</url>
    <content><![CDATA[<h2 id="站点根目录的配置文件设置"><a href="#站点根目录的配置文件设置" class="headerlink" title="站点根目录的配置文件设置"></a>站点根目录的配置文件设置</h2><ol>
<li><p>新建一个txt</p>
</li>
<li><p>把下面代码写入到文件里</p>
</li>
<li><p>文件和后缀名改成 web.config</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Access-Control-Allow-Methods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Access-Control-Allow-Headers&quot;</span> <span class="attr">value</span>=<span class="string">&quot;AuthToken, Content-Type, Accept, X-Requested-With&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">customHeaders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">httpProtocol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>IIS</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5实现签到功能，项目实战之基于JavaScript实现每日签到打卡送积分功能</title>
    <url>/archives/7f915cdc.html</url>
    <content><![CDATA[<h2 id="一、核心代码：calendar-js"><a href="#一、核心代码：calendar-js" class="headerlink" title="一、核心代码：calendar.js"></a>一、核心代码：calendar.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> calUtil = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前日历显示的年份</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">showYear</span>: <span class="number">2018</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前日历显示的月份</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">showMonth</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前日历显示的天数</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">showDays</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">eventName</span>: <span class="string">&quot;load&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化日历</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params">signList</span>) &#123;</span><br><span class="line"></span><br><span class="line">        calUtil.<span class="title function_">setMonthAndDay</span>();</span><br><span class="line"></span><br><span class="line">        calUtil.<span class="title function_">draw</span>(signList);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">draw</span>: <span class="keyword">function</span>(<span class="params">signList</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定日历</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = calUtil.<span class="title function_">drawCal</span>(calUtil.<span class="property">showYear</span>, calUtil.<span class="property">showMonth</span>, signList);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;#calendar&quot;</span>).<span class="title function_">html</span>(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定日历表头</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> calendarName = calUtil.<span class="property">showYear</span> + <span class="string">&quot;年&quot;</span> + calUtil.<span class="property">showMonth</span> + <span class="string">&quot;月&quot;</span>;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;.calendar_month_span&quot;</span>).<span class="title function_">html</span>(calendarName);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前选择的年月</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">setMonthAndDay</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (calUtil.<span class="property">eventName</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;load&quot;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> current = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">                calUtil.<span class="property">showYear</span> = current.<span class="title function_">getFullYear</span>();</span><br><span class="line"></span><br><span class="line">                calUtil.<span class="property">showMonth</span> = current.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">                calUtil.<span class="property">showDays</span> = current.<span class="title function_">getDate</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;prev&quot;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> nowMonth = $(<span class="string">&quot;.calendar_month_span&quot;</span>).<span class="title function_">html</span>().<span class="title function_">split</span>(<span class="string">&quot;年&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;月&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                calUtil.<span class="property">showMonth</span> = <span class="built_in">parseInt</span>(nowMonth) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (calUtil.<span class="property">showMonth</span> == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    calUtil.<span class="property">showMonth</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">                    calUtil.<span class="property">showYear</span> -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;next&quot;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> nowMonth = $(<span class="string">&quot;.calendar_month_span&quot;</span>).<span class="title function_">html</span>().<span class="title function_">split</span>(<span class="string">&quot;年&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;月&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                calUtil.<span class="property">showMonth</span> = <span class="built_in">parseInt</span>(nowMonth) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (calUtil.<span class="property">showMonth</span> == <span class="number">13</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    calUtil.<span class="property">showMonth</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                    calUtil.<span class="property">showYear</span> += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">getDaysInmonth</span>: <span class="keyword">function</span>(<span class="params">iMonth, iYear</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> dPrevDate = <span class="keyword">new</span> <span class="title class_">Date</span>(iYear, iMonth, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dPrevDate.<span class="title function_">getDate</span>();</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">bulidCal</span>: <span class="keyword">function</span>(<span class="params">iYear, iMonth</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> aMonth = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> dCalDate = <span class="keyword">new</span> <span class="title class_">Date</span>(iYear, iMonth - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> iDayOfFirst = dCalDate.<span class="title function_">getDay</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> iDaysInMonth = calUtil.<span class="title function_">getDaysInmonth</span>(iMonth, iYear);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> iVarDate = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> d, w;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;日&quot;</span>;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">&quot;一&quot;</span>;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">&quot;二&quot;</span>;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">3</span>] = <span class="string">&quot;三&quot;</span>;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">4</span>] = <span class="string">&quot;四&quot;</span>;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">5</span>] = <span class="string">&quot;五&quot;</span>;</span><br><span class="line"></span><br><span class="line">        aMonth[<span class="number">0</span>][<span class="number">6</span>] = <span class="string">&quot;六&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (d = iDayOfFirst; d &lt; <span class="number">7</span>; d++) &#123;</span><br><span class="line"></span><br><span class="line">            aMonth[<span class="number">1</span>][d] = iVarDate;</span><br><span class="line"></span><br><span class="line">            iVarDate++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (w = <span class="number">2</span>; w &lt; <span class="number">7</span>; w++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (d = <span class="number">0</span>; d &lt; <span class="number">7</span>; d++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (iVarDate &lt;= iDaysInMonth) &#123;</span><br><span class="line"></span><br><span class="line">                    aMonth[w][d] = iVarDate;</span><br><span class="line"></span><br><span class="line">                    iVarDate++;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> aMonth;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">ifHasSigned</span>: <span class="keyword">function</span>(<span class="params">signList, day</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> signed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">each</span>(signList, <span class="keyword">function</span>(<span class="params">index, item</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (item.<span class="property">signDay</span> == day) &#123;</span><br><span class="line"></span><br><span class="line">                signed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signed;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">ifDateNow</span>: <span class="keyword">function</span> (<span class="params">day</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (calUtil.<span class="property">showDays</span> == day) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">drawCal</span>: <span class="keyword">function</span>(<span class="params">iYear, iMonth, signList</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> myMonth = calUtil.<span class="title function_">bulidCal</span>(iYear, iMonth);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> htmls = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;li&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;日&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;一&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;二&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;三&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;四&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;五&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;font&gt;六&lt;/font&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;/li&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> d, w;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (w = <span class="number">1</span>; w &lt; <span class="number">7</span>; w++) &#123;</span><br><span class="line"></span><br><span class="line">            htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;li&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (d = <span class="number">0</span>; d &lt; <span class="number">7</span>; d++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> ifHasSigned = calUtil.<span class="title function_">ifHasSigned</span>(signList, myMonth[w][d]);</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(ifHasSigned);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ifHasSigned) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (calUtil.<span class="title function_">ifDateNow</span>(myMonth[w][d])) &#123;</span><br><span class="line">                        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;p class=&#x27;on isborder&#x27;&gt;&quot;</span> + (!<span class="built_in">isNaN</span>(myMonth[w][d]) ? myMonth[w][d] : <span class="string">&quot; &quot;</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;p class=&#x27;on&#x27;&gt;&quot;</span> + (!<span class="built_in">isNaN</span>(myMonth[w][d]) ? myMonth[w][d] : <span class="string">&quot; &quot;</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (calUtil.<span class="title function_">ifDateNow</span>(myMonth[w][d])) &#123;</span><br><span class="line">                        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;p class=&#x27;isborder&#x27;&gt;&quot;</span> + (!<span class="built_in">isNaN</span>(myMonth[w][d]) ? myMonth[w][d] : <span class="string">&quot; &quot;</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> + (!<span class="built_in">isNaN</span>(myMonth[w][d]) ? myMonth[w][d] : <span class="string">&quot; &quot;</span>) + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;/li&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&lt;/ul&gt;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        htmls.<span class="title function_">push</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> htmls.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="二、效果图，如下："><a href="#二、效果图，如下：" class="headerlink" title="二、效果图，如下："></a>二、效果图，如下：</h2><p><img src="https://images.codeobservatory.cn/hexo/202506/18/a26e5a78688404a0.png" alt="HTML5实现签到功能，项目实战之基于JavaScript实现每日签到打卡送积分功能"></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>JavaScript</tag>
        <tag>签到</tag>
      </tags>
  </entry>
  <entry>
    <title>解决nginx跨域问题</title>
    <url>/archives/1e7ac72f.html</url>
    <content><![CDATA[<ol>
<li><p>编辑nginx.conf文件 </p>
</li>
<li><p>修改如下代码：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;&lt;!-- --&gt;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm index.php;</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">            add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重启nginx：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>跨域</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>【好用推荐】免费在线图片压缩工具</title>
    <url>/archives/fb2da740.html</url>
    <content><![CDATA[<p>大家好，这里是码农观测站，我是码农刚子。前几天填写备案资料时需要上传营业执照，要求2MB以内，老板发给我的文件有十几MB，无法上传，用网上的在线工具，又担心安全性。以前也经常遇到需要图片太大的问题，基本上都是找别人用vip办公软件处理的，每次都要麻烦别人，于是我就想着自己做一个，使用方便还安全。接下来我给大家介绍一下我的图片压缩工具，源码在结尾。</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul>
<li>上传图片后，通过滑块调整压缩质量（0%-100%）</li>
<li>点击”上传并压缩图片”按钮进行处理</li>
<li>压缩完成后，右侧会显示压缩后的图片</li>
<li>点击”下载压缩图片”按钮保存结果</li>
</ul>
<blockquote>
<p>先体验一下吧！<a href="https://www.codeobservatory.cn/tools/image-compress.html">👉压缩图片</a></p>
</blockquote>
<h2 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h2><ul>
<li>JPEG (.jpg, .jpeg)</li>
<li>PNG (.png)</li>
<li>GIF (.gif)</li>
<li>WebP (.webp)</li>
<li>BMP (.bmp)</li>
</ul>
<h2 id="自定义压缩质量"><a href="#自定义压缩质量" class="headerlink" title="自定义压缩质量"></a>自定义压缩质量</h2><ul>
<li>使用滑块自由调整压缩质量（0%-100%）</li>
<li>0% - 最高压缩（最小文件尺寸，最低质量）</li>
<li>100% - 最低压缩（最大文件尺寸，最高质量）</li>
<li>默认值设置为30% - 良好平衡点</li>
<li>实时显示压缩质量百分比</li>
</ul>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><ul>
<li>前端使用Fetch API发送multipart&#x2F;form-data请求</li>
<li>后端使用ASP.NET Core处理文件上传</li>
<li>使用ImageService进行图片压缩处理</li>
<li>响应状态码：200（成功）、400（错误请求）</li>
</ul>
<h2 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h2><p>话不多说，直接开干！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-file-image&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 免费在线图片压缩工具<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>保持画质清晰，快速缩小JPG/PNG/GIF/WebP文件，自定义压缩大小，压缩后可直接下载<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-section&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;section-title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cloud-upload-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 上传图片<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;browse-btn refresh&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;码农观测站&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;browse-btn refresh&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.location.reload();&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;upload-area&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadArea&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-images&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>拖放图片到此处<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>支持 JPG, PNG, GIF, WEBP 格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;browse-btn&quot;</span>&gt;</span>选择图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">class</span>=<span class="string">&quot;file-input&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-container&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 图片预览<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-preview&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imagePreview&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;previewImage&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;预览图&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;compression-control&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quality-label&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>压缩质量:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;quality-value&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qualityValue&quot;</span>&gt;</span>30%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-container&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> <span class="attr">class</span>=<span class="string">&quot;quality-slider&quot;</span> <span class="attr">id</span>=<span class="string">&quot;qualitySlider&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-ticks&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>25%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>50%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>75%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">span</span>&gt;</span>100%<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progressContainer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;progressBar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;upload-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;uploadBtn&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span>&gt;</span>上传并压缩图片<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;api-info&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result-section&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;section-title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-download&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 压缩结果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result-container&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result-content&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;result-placeholder&quot;</span> <span class="attr">id</span>=<span class="string">&quot;resultPlaceholder&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cloud-download-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片压缩后将显示在这里<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span>&gt;</span>您可以直接下载压缩后的图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;compressedImage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;compressed-image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;压缩后的图片&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;downloadLink&quot;</span> <span class="attr">class</span>=<span class="string">&quot;download-btn&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-download&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 下载压缩图片</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;response-area&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;response-title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-comment-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 处理状态<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;response-content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;responseContent&quot;</span>&gt;</span></span><br><span class="line">                            等待上传图片...</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info-card&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-info-circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 使用说明<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>上传图片后，通过滑块调整压缩质量（0%-100%）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击&quot;上传并压缩图片&quot;按钮进行处理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>压缩完成后，右侧会显示压缩后的图片<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>点击&quot;下载压缩图片&quot;按钮保存结果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>免费在线图片压缩工具 © 2025 | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.codeobservatory.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;码农观测站&quot;</span>&gt;</span>码农观测站<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Segoe UI&#x27;</span>, Tahoma, Geneva, Verdana, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#1e3c72</span> <span class="number">0%</span>, <span class="number">#2a5298</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.97</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">50px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#1a2980</span>, <span class="number">#26d0ce</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.15</span>) <span class="number">0%</span>, transparent <span class="number">70%</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line">        <span class="attribute">gap</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">15px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-section</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.result-section</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9ff</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.6rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.section-title</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#1a2980</span>, <span class="number">#26d0ce</span>);</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.section-title</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-area</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#1a2980</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f4ff</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-area</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.upload-area</span><span class="selector-class">.dragover</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#e6ebff</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">5px</span>);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">25px</span> <span class="built_in">rgba</span>(<span class="number">26</span>, <span class="number">41</span>, <span class="number">128</span>, <span class="number">0.2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-area</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">4.5rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-area</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-area</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.05rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.browse-btn</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#1a2980</span> <span class="number">0%</span>, <span class="number">#26d0ce</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">13px</span> <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">26</span>, <span class="number">41</span>, <span class="number">128</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.browse-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">3px</span>);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">26</span>, <span class="number">41</span>, <span class="number">128</span>, <span class="number">0.4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.browse-btn</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">1px</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.browse-btn</span><span class="selector-class">.refresh</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">7px</span> <span class="number">25px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-input</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview-container</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview-title</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image-preview</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.image-preview</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">object-fit</span>: contain;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.compression-control</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.08</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quality-label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quality-value</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quality-slider</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    -webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#ff416c</span>, <span class="number">#ff4b2b</span>, <span class="number">#ff9500</span>, <span class="number">#ffcc00</span>, <span class="number">#a8e063</span>, <span class="number">#56ab2f</span>);</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.quality-slider</span>::-webkit-slider-thumb &#123;</span><br><span class="line">        -webkit-<span class="attribute">appearance</span>: none;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#1a2980</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">3px</span> solid white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.quality-slider</span>::-moz-range-thumb &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#1a2980</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">3px</span> solid white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider-ticks</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.85rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.upload-btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#00c853</span> <span class="number">0%</span>, <span class="number">#64dd17</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">18px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">3px</span>);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">9px</span> <span class="number">22px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">0.4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-btn</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#cccccc</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">        <span class="attribute">transform</span>: none;</span><br><span class="line">        <span class="attribute">box-shadow</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#1a2980</span> <span class="number">0%</span>, <span class="number">#26d0ce</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">0.4s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comparison-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comparison-item</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">12px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.08</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.comparison-item</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.15rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.size-info</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.api-info</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e3f2fd</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: monospace;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.95rem</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.05rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.result-container</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">7px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.07</span>);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.result-content</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.compressed-image</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.download-btn</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#1a2980</span> <span class="number">0%</span>, <span class="number">#26d0ce</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">26</span>, <span class="number">41</span>, <span class="number">128</span>, <span class="number">0.3</span>);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.download-btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">3px</span>);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">26</span>, <span class="number">41</span>, <span class="number">128</span>, <span class="number">0.4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.info-card</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">7px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.07</span>);</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.info-card</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">gap</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.info-card</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style-type</span>: none;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.info-card</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">32px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.05rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.info-card</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&quot;•&quot;</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>: -<span class="number">8px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.response-area</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">7px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.07</span>);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.response-title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1a2980</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.response-content</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">header</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.upload-section</span> &#123;</span><br><span class="line">        <span class="attribute">border-right</span>: none;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">        <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.result-section</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.browse-btn</span><span class="selector-class">.refresh</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-class">.browse-btn</span><span class="selector-class">.refresh</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">130px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success-message</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c853</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error-message</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f44336</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.result-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.result-placeholder</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">4rem</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#e0e0e0</span>;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;</span><br><span class="line">    const uploadArea = document.getElementById(&#x27;uploadArea&#x27;);</span><br><span class="line">    const fileInput = document.getElementById(&#x27;fileInput&#x27;);</span><br><span class="line">    const uploadBtn = document.getElementById(&#x27;uploadBtn&#x27;);</span><br><span class="line">    const imagePreview = document.getElementById(&#x27;imagePreview&#x27;);</span><br><span class="line">    const previewImage = document.getElementById(&#x27;previewImage&#x27;);</span><br><span class="line">    const responseContent = document.getElementById(&#x27;responseContent&#x27;);</span><br><span class="line">    const progressContainer = document.getElementById(&#x27;progressContainer&#x27;);</span><br><span class="line">    const progressBar = document.getElementById(&#x27;progressBar&#x27;);</span><br><span class="line">    const originalSize = document.getElementById(&#x27;originalSize&#x27;);</span><br><span class="line">    const compressedSize = document.getElementById(&#x27;compressedSize&#x27;);</span><br><span class="line">    const qualitySlider = document.getElementById(&#x27;qualitySlider&#x27;);</span><br><span class="line">    const qualityValue = document.getElementById(&#x27;qualityValue&#x27;);</span><br><span class="line">    const compressedImage = document.getElementById(&#x27;compressedImage&#x27;);</span><br><span class="line">    const downloadLink = document.getElementById(&#x27;downloadLink&#x27;);</span><br><span class="line">    const resultPlaceholder = document.getElementById(&#x27;resultPlaceholder&#x27;);</span><br><span class="line"></span><br><span class="line">    // 压缩质量滑块事件</span><br><span class="line">    qualitySlider.addEventListener(&#x27;input&#x27;, function () &#123;</span><br><span class="line">        qualityValue.textContent = this.value + &#x27;%&#x27;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 点击上传区域触发文件选择</span><br><span class="line">    uploadArea.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">        fileInput.click();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 拖放功能</span><br><span class="line">    [&#x27;dragenter&#x27;, &#x27;dragover&#x27;, &#x27;dragleave&#x27;, &#x27;drop&#x27;].forEach(eventName =&gt; &#123;</span><br><span class="line">        uploadArea.addEventListener(eventName, preventDefaults, false);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function preventDefaults(e) &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [&#x27;dragenter&#x27;, &#x27;dragover&#x27;].forEach(eventName =&gt; &#123;</span><br><span class="line">        uploadArea.addEventListener(eventName, highlight, false);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    [&#x27;dragleave&#x27;, &#x27;drop&#x27;].forEach(eventName =&gt; &#123;</span><br><span class="line">        uploadArea.addEventListener(eventName, unhighlight, false);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function highlight() &#123;</span><br><span class="line">        uploadArea.classList.add(&#x27;dragover&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function unhighlight() &#123;</span><br><span class="line">        uploadArea.classList.remove(&#x27;dragover&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理文件放置</span><br><span class="line">    uploadArea.addEventListener(&#x27;drop&#x27;, handleDrop, false);</span><br><span class="line"></span><br><span class="line">    function handleDrop(e) &#123;</span><br><span class="line">        const dt = e.dataTransfer;</span><br><span class="line">        const files = dt.files;</span><br><span class="line">        if (files.length) &#123;</span><br><span class="line">            handleFiles(files);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理文件选择</span><br><span class="line">    fileInput.addEventListener(&#x27;change&#x27;, function () &#123;</span><br><span class="line">        if (this.files.length) &#123;</span><br><span class="line">            handleFiles(this.files);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 处理选中的文件</span><br><span class="line">    function handleFiles(files) &#123;</span><br><span class="line">        const file = files[0];</span><br><span class="line">        if (!file.type.match(&#x27;image.*&#x27;)) &#123;</span><br><span class="line">            responseContent.innerHTML = &#x27;&lt;span class=&quot;error-message&quot;&gt;错误：请选择图片文件（JPG, PNG, GIF, WEBP）&lt;/span&gt;&#x27;;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 重置结果区域</span><br><span class="line">        compressedImage.style.display = &#x27;none&#x27;;</span><br><span class="line">        downloadLink.style.display = &#x27;none&#x27;;</span><br><span class="line">        resultPlaceholder.style.display = &#x27;block&#x27;;</span><br><span class="line"></span><br><span class="line">        // 显示预览</span><br><span class="line">        const reader = new FileReader();</span><br><span class="line">        reader.onload = function (e) &#123;</span><br><span class="line">            previewImage.src = e.target.result;</span><br><span class="line">            imagePreview.style.display = &#x27;block&#x27;;</span><br><span class="line">            uploadBtn.style.display = &#x27;block&#x27;;</span><br><span class="line">            uploadBtn.disabled = false;</span><br><span class="line">        &#125;;</span><br><span class="line">        reader.readAsDataURL(file);</span><br><span class="line"></span><br><span class="line">        // 更新响应内容</span><br><span class="line">        responseContent.innerHTML = &#x27;&lt;span class=&quot;success-message&quot;&gt;图片已选择，点击&quot;上传并压缩图片&quot;按钮开始处理...&lt;/span&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 上传按钮点击事件</span><br><span class="line">    uploadBtn.addEventListener(&#x27;click&#x27;, function () &#123;</span><br><span class="line">        if (!fileInput.files.length) return;</span><br><span class="line"></span><br><span class="line">        const file = fileInput.files[0];</span><br><span class="line">        const quality = parseInt(qualitySlider.value);</span><br><span class="line">        const formData = new FormData();</span><br><span class="line">        formData.append(&#x27;imageFile&#x27;, file);</span><br><span class="line">        formData.append(&#x27;compressionQuality&#x27;, quality);</span><br><span class="line"></span><br><span class="line">        // 显示进度条</span><br><span class="line">        progressContainer.style.display = &#x27;block&#x27;;</span><br><span class="line">        progressBar.style.width = &#x27;0%&#x27;;</span><br><span class="line"></span><br><span class="line">        // 禁用上传按钮</span><br><span class="line">        uploadBtn.disabled = true;</span><br><span class="line">        uploadBtn.textContent = &#x27;处理中...&#x27;;</span><br><span class="line">        uploadBtn.style.background = &#x27;linear-gradient(to right, #ff9800 0%, #ff5722 100%)&#x27;;</span><br><span class="line"></span><br><span class="line">        // 更新响应内容</span><br><span class="line">        responseContent.innerHTML = &#x27;&lt;span class=&quot;success-message&quot;&gt;正在上传并压缩图片，请稍候...&lt;/span&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">        // 模拟进度更新</span><br><span class="line">        const progressInterval = setInterval(() =&gt; &#123;</span><br><span class="line">            const currentWidth = parseInt(progressBar.style.width) || 0;</span><br><span class="line">            if (currentWidth &lt; 90) &#123;</span><br><span class="line">                progressBar.style.width = (currentWidth + 10) + &#x27;%&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 300);</span><br><span class="line"></span><br><span class="line">        // 发送请求到API</span><br><span class="line">        fetch(&#x27;/api/yourapiname&#x27;, &#123;</span><br><span class="line">            method: &#x27;POST&#x27;,</span><br><span class="line">            body: formData</span><br><span class="line">        &#125;)</span><br><span class="line">            .then(response =&gt; &#123;</span><br><span class="line">                debugger</span><br><span class="line">                clearInterval(progressInterval);</span><br><span class="line">                progressBar.style.width = &#x27;100%&#x27;;</span><br><span class="line"></span><br><span class="line">                if (response.ok) &#123;</span><br><span class="line">                    return response.blob();</span><br><span class="line">                &#125; else if (response.status === 400) &#123;</span><br><span class="line">                    return response.text().then(text =&gt; &#123;</span><br><span class="line">                        throw new Error(text || &#x27;无效请求&#x27;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    throw new Error(`请求失败，状态码: $&#123;response.status&#125;`);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(blob =&gt; &#123;</span><br><span class="line">                // 创建压缩图片的URL</span><br><span class="line">                const compressedUrl = URL.createObjectURL(blob);</span><br><span class="line"></span><br><span class="line">                // 显示压缩后的图片</span><br><span class="line">                compressedImage.src = compressedUrl;</span><br><span class="line">                compressedImage.style.display = &#x27;block&#x27;;</span><br><span class="line"></span><br><span class="line">                // 设置下载链接</span><br><span class="line">                downloadLink.href = compressedUrl;</span><br><span class="line">                downloadLink.download = `compressed_$&#123;fileInput.files[0].name&#125;`;</span><br><span class="line">                downloadLink.style.display = &#x27;inline-block&#x27;;</span><br><span class="line"></span><br><span class="line">                // 隐藏占位符</span><br><span class="line">                resultPlaceholder.style.display = &#x27;none&#x27;;</span><br><span class="line"></span><br><span class="line">                // 更新UI</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    responseContent.innerHTML = &#x27;&lt;span class=&quot;success-message&quot;&gt;图片压缩成功！可下载压缩后的图片&lt;/span&gt;&#x27;;</span><br><span class="line">                    uploadBtn.textContent = &#x27;上传成功！&#x27;;</span><br><span class="line">                    uploadBtn.style.background = &#x27;linear-gradient(to right, #00c853 0%, #64dd17 100%)&#x27;;</span><br><span class="line">                &#125;, 500);</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(error =&gt; &#123;</span><br><span class="line">                clearInterval(progressInterval);</span><br><span class="line">                progressBar.style.backgroundColor = &#x27;#f44336&#x27;;</span><br><span class="line">                responseContent.innerHTML = `&lt;span class=&quot;error-message&quot;&gt;错误: $&#123;error.message&#125;&lt;/span&gt;`;</span><br><span class="line">                uploadBtn.textContent = &#x27;上传失败，重试&#x27;;</span><br><span class="line">                uploadBtn.disabled = false;</span><br><span class="line">                uploadBtn.style.background = &#x27;linear-gradient(to right, #f44336 0%, #e91e63 100%)&#x27;;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
        <tag>图片压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>C#使用PrintDocument类打印标签的方法</title>
    <url>/archives/72eceb8.html</url>
    <content><![CDATA[<p>最近做了一个项目，使用热敏打印标签贴在PCB线路板标签上，那么就会出现标签打印的问题，该如何打印呢？后来经过网上冲浪发现，其实打印标签和打印A4纸的方法一样，只不过就是布局、设置纸张大小的问题。</p>
<pre><code>本文介绍打印机初步配置，以及实现方法。标签主要展示资产基本信息以及二维码。
首先设置打印机纸张大小，纸张高宽度以实际标签为准，设置好后可打印测试页测试一下，以ZDesigner GX430t打印机为例。
</code></pre>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/f0f453f581cf6c8e01.png" alt="C#使用PrintDocument类打印标签的方法"></p>
<p>创建PrintDocument实例，以及配置打印机名称：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打印</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Myprinter</span>()</span> &#123;</span><br><span class="line">   PrintDocument pd = <span class="keyword">new</span> PrintDocument();      </span><br><span class="line">   pd.PrintPage += <span class="keyword">new</span> PrintPageEventHandler(printDocument_PrintA4Page);</span><br><span class="line">   </span><br><span class="line">   pd.DefaultPageSettings.PrinterSettings.PrinterName = <span class="string">&quot;ZDesigner GX430t&quot;</span>;       <span class="comment">//打印机名称</span></span><br><span class="line">   <span class="comment">//pd.DefaultPageSettings.Landscape = true;  //设置横向打印，不设置默认是纵向的</span></span><br><span class="line">   pd.PrintController = <span class="keyword">new</span> System.Drawing.Printing.StandardPrintController();  </span><br><span class="line">   pd.Print();  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>设置页面布局，根据实际需求进行排版</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printDocument_PrintA4Page</span>(<span class="params"><span class="built_in">object</span> sender, PrintPageEventArgs e</span>)</span>&#123;</span><br><span class="line">    Font titleFont = <span class="keyword">new</span> Font(<span class="string">&quot;黑体&quot;</span>, <span class="number">11</span>, System.Drawing.FontStyle.Bold);<span class="comment">//标题字体           </span></span><br><span class="line">    Font fntTxt = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">10</span>, System.Drawing.FontStyle.Regular);<span class="comment">//正文文字         </span></span><br><span class="line">    Font fntTxt1 = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">8</span>, System.Drawing.FontStyle.Regular);<span class="comment">//正文文字           </span></span><br><span class="line">    System.Drawing.Brush brush = <span class="keyword">new</span> SolidBrush(System.Drawing.Color.Black);<span class="comment">//画刷           </span></span><br><span class="line">    System.Drawing.Pen pen = <span class="keyword">new</span> System.Drawing.Pen(System.Drawing.Color.Black);           <span class="comment">//线条颜色         </span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123; </span><br><span class="line">        e.Graphics.DrawString(<span class="string">&quot;标题name&quot;</span>, titleFont, brush, <span class="keyword">new</span> System.Drawing.Point(<span class="number">20</span>, <span class="number">10</span>));</span><br><span class="line">        Point[] points111 = &#123; <span class="keyword">new</span> Point(<span class="number">20</span>, <span class="number">28</span>), <span class="keyword">new</span> Point(<span class="number">230</span>,<span class="number">28</span>) &#125;;</span><br><span class="line">        e.Graphics.DrawLines(pen, points111); </span><br><span class="line">        e.Graphics.DrawString(<span class="string">&quot;资产编号：&quot;</span>, fntTxt, brush, <span class="keyword">new</span> System.Drawing.Point(<span class="number">20</span>, <span class="number">31</span>));</span><br><span class="line">        e.Graphics.DrawString(<span class="string">&quot;123456789123465&quot;</span>, fntTxt, brush, <span class="keyword">new</span> System.Drawing.Point(<span class="number">80</span>, <span class="number">31</span>));</span><br><span class="line">        e.Graphics.DrawString(<span class="string">&quot;资产序号：&quot;</span>, fntTxt, brush, <span class="keyword">new</span> System.Drawing.Point(<span class="number">20</span>, <span class="number">46</span>));</span><br><span class="line">        e.Graphics.DrawString(<span class="string">&quot;123456789131321&quot;</span>, fntTxt, brush, <span class="keyword">new</span> System.Drawing.Point(<span class="number">80</span>, <span class="number">46</span>));</span><br><span class="line">        e.Graphics.DrawString(<span class="string">&quot;底部name&quot;</span>, fntTxt1, brush, <span class="keyword">new</span> System.Drawing.Point(<span class="number">100</span>, <span class="number">62</span>));</span><br><span class="line">        Bitmap bitmap = CreateQRCode(<span class="string">&quot;此处为二维码数据&quot;</span>);</span><br><span class="line">        e.Graphics.DrawImage(bitmap, <span class="keyword">new</span> System.Drawing.Point(<span class="number">240</span>, <span class="number">10</span>));  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ee)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ee.Message);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>二维码生成方法，我这里使用zxing</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 二维码方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;asset&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">CreateQRCode</span>(<span class="params"><span class="built_in">string</span> asset</span>)</span>&#123;</span><br><span class="line">    EncodingOptions options = <span class="keyword">new</span> QrCodeEncodingOptions</span><br><span class="line">    &#123;</span><br><span class="line">        DisableECI = <span class="literal">true</span>,</span><br><span class="line">        CharacterSet = <span class="string">&quot;UTF-8&quot;</span>, <span class="comment">//编码</span></span><br><span class="line">        Width = <span class="number">80</span>,             <span class="comment">//宽度</span></span><br><span class="line">        Height = <span class="number">80</span>             <span class="comment">//高度</span></span><br><span class="line">    &#125;;</span><br><span class="line">    BarcodeWriter writer = <span class="keyword">new</span> BarcodeWriter();</span><br><span class="line">    writer.Format = BarcodeFormat.QR_CODE;</span><br><span class="line">    writer.Options = options;</span><br><span class="line">    <span class="keyword">return</span> writer.Write(asset);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/2b997e4716864e7a02.jpg" alt="C#使用PrintDocument类打印标签的方法"></p>
<p>最后附上源码，里面有zxing.dll</p>
<blockquote>
<p>链接: <a href="https://pan.baidu.com/s/1mWdjSPt282tKVz-B1VJoTA">https://pan.baidu.com/s/1mWdjSPt282tKVz-B1VJoTA</a><br>提取码: 517j</p>
</blockquote>
<p>2019.09.05 补充：<br>增加一维码打印</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建条码方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;asset&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">CreateCode</span>(<span class="params"><span class="built_in">string</span> asset</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.设置条形码规格</span></span><br><span class="line">    EncodingOptions options = <span class="keyword">new</span> EncodingOptions();</span><br><span class="line">    options.Height = <span class="number">40</span>; <span class="comment">// 必须制定高度、宽度</span></span><br><span class="line">    options.Width = <span class="number">120</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.生成条形码图片并保存</span></span><br><span class="line">    BarcodeWriter writer = <span class="keyword">new</span> BarcodeWriter();</span><br><span class="line">    writer.Options = options; </span><br><span class="line">    writer.Format = BarcodeFormat.CODE_128;     <span class="comment">//二维码编码</span></span><br><span class="line">    <span class="keyword">return</span> writer.Write(asset);     <span class="comment">// 生成图片&#125;</span></span><br></pre></td></tr></table></figure>

<p>到此这篇关于C# 使用PrintDocument类打印标签的文章就介绍到这了,更多相关C# 打印标签内容请搜索以前的文章或继续浏览下面的相关文章</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>打印标签</tag>
        <tag>PrintDocument</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭SQLSERVER阻止保存要求重新创建表的更改</title>
    <url>/archives/b3bde0f.html</url>
    <content><![CDATA[<blockquote>
<p>怎样关闭SQLSERVER阻止保存要求重新创建表的更改呢？</p>
</blockquote>
<p>今天和大家 分享一下关闭<a href="/tags/sql/">SQLSERVER</a>阻止保存要求重新创建表的更改。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/3abffd2a9a75bb4e05.png" alt="关闭SQLSERVER阻止保存要求重新创建表的更改"></p>
<p>1、首先打开SQL SERVER management studio软件，如下图，选择导航栏上面的工具选项 。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/37f6763fc6debab06.png" alt="关闭SQLSERVER阻止保存要求重新创建表的更改"></p>
<p>2、打开如下图界面，选择选项，点击打开</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/98ec44753145aa07.png" alt="关闭SQLSERVER阻止保存要求重新创建表的更改"></p>
<p>3、打开如下图界面，选择界面左侧的Designers选项，点击打开</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/c8e0b37a84d0f61408.png" alt="关闭SQLSERVER阻止保存要求重新创建表的更改"></p>
<p>4、打开如下图界面，取消勾选界面右侧的阻止保存要求重新创建表的更改选项，然后点击下方的确定按钮，这样就关闭了。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/33c10c4cf2a6c7b709.png" alt="关闭SQLSERVER阻止保存要求重新创建表的更改"></p>
<p>5、到此，关闭SQLSERVER阻止保存要求重新创建表的更改已经完成了。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>C#解析、拼接json字符串</title>
    <url>/archives/e4c33417.html</url>
    <content><![CDATA[<p>本篇文章主要介绍了在C#中json字符串的拼接与解析的实操案例，希望你阅读完后，对你有所帮助。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组成json字符串  </span></span><br><span class="line">          </span><br><span class="line"><span class="title class_">JObject</span> ret = <span class="keyword">new</span> <span class="title class_">JObject</span>(); </span><br><span class="line">           </span><br><span class="line">ret[<span class="string">&quot;xxx&quot;</span>] = <span class="string">&quot;1&quot;</span>;    </span><br><span class="line">        </span><br><span class="line"><span class="title class_">JArray</span> body = <span class="keyword">new</span> <span class="title class_">JArray</span>();</span><br><span class="line">            </span><br><span class="line"><span class="title class_">JObject</span> obj = <span class="keyword">new</span> <span class="title class_">JObject</span>();</span><br><span class="line">            </span><br><span class="line">obj[<span class="string">&quot;aaa&quot;</span>] = <span class="string">&quot;2&quot;</span>;    </span><br><span class="line">        </span><br><span class="line">obj[<span class="string">&quot;bbb&quot;</span>] = <span class="string">&quot;3&quot;</span>;   </span><br><span class="line">         </span><br><span class="line">body.<span class="title class_">Add</span>(obj);    </span><br><span class="line">        </span><br><span class="line">body.<span class="title class_">Add</span>(obj);   </span><br><span class="line">         </span><br><span class="line"><span class="title class_">JObject</span> sss = <span class="keyword">new</span> <span class="title class_">JObject</span>(); </span><br><span class="line">           </span><br><span class="line">sss[<span class="string">&quot;ret&quot;</span>] = ret;    </span><br><span class="line">        </span><br><span class="line">sss[<span class="string">&quot;body&quot;</span>] = body;   </span><br><span class="line">         </span><br><span class="line">string aaaa = <span class="title class_">JsonConvert</span>.<span class="title class_">SerializeObject</span>(sss); </span><br><span class="line"></span><br><span class="line"><span class="title class_">Information</span>.<span class="title class_">LogError</span>(aaaa);</span><br></pre></td></tr></table></figure>

<p><img src="https://images.codeobservatory.cn/hexo/202507/22/34b062a7e698e0f303.png" alt="C#解析、拼接json字符串"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析json字符串</span></span><br><span class="line">            <span class="title class_">JObject</span> jo = (<span class="title class_">JObject</span>)<span class="title class_">JsonConvert</span>.<span class="title class_">DeserializeObject</span>(aaaa);</span><br><span class="line">            string qaz = jo[<span class="string">&quot;ret&quot;</span>].<span class="title class_">ToString</span>();</span><br><span class="line">            string ws = jo[<span class="string">&quot;body&quot;</span>].<span class="title class_">ToString</span>();</span><br><span class="line">            <span class="title class_">Information</span>.<span class="title class_">LogError</span>(qaz);</span><br><span class="line">            <span class="title class_">Information</span>.<span class="title class_">LogError</span>(ws);</span><br><span class="line">            <span class="title class_">JArray</span> xxs = (<span class="title class_">JArray</span>)<span class="title class_">JsonConvert</span>.<span class="title class_">DeserializeObject</span>(ws);</span><br><span class="line">            <span class="keyword">for</span>(int i =<span class="number">0</span>; i&lt;xxs.<span class="property">Count</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="title class_">Information</span>.<span class="title class_">LogError</span>(xxs[i][<span class="string">&quot;aaa&quot;</span>].<span class="title class_">ToString</span>());</span><br><span class="line">                <span class="title class_">Information</span>.<span class="title class_">LogError</span>(xxs[i][<span class="string">&quot;bbb&quot;</span>].<span class="title class_">ToString</span>());</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://images.codeobservatory.cn/hexo/202507/22/818b84039fa15ee604.png" alt="C#解析、拼接json字符串"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaScript解析josn格式数据</span></span><br><span class="line"></span><br><span class="line">string json=<span class="string">&quot;&#123;&quot;</span>ret<span class="string">&quot;:&#123;&quot;</span>xxx<span class="string">&quot;:&quot;</span><span class="number">1</span><span class="string">&quot;&#125;,&quot;</span>body<span class="string">&quot;:[&#123;&quot;</span>aaa<span class="string">&quot;:&quot;</span><span class="number">2</span><span class="string">&quot;,&quot;</span>bbb<span class="string">&quot;:&quot;</span><span class="number">3</span><span class="string">&quot;&#125;,&#123;&quot;</span>aaa<span class="string">&quot;:&quot;</span><span class="number">2</span><span class="string">&quot;,&quot;</span>bbb<span class="string">&quot;:&quot;</span><span class="number">3</span><span class="string">&quot;&#125;]&#125;&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataObj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + json + <span class="string">&quot;)&quot;</span>);<span class="comment">//转换为json对象  </span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dataObj);  </span><br><span class="line"></span><br><span class="line">$.<span class="title function_">each</span>(dataObj.<span class="property">rows</span>, <span class="keyword">function</span> (<span class="params">i, item</span>) </span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">ret</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>未能写入输出文件 “c:&#92;Windows&#92;Microsoft.NET&#92;Framework&#92;v4.0.30319&#92;Temporary ASP.NET Files&#92;root&#92;6ee8fd15&#92;5fc973dd&#92;App_Web_default.aspx.cdcab7d2.e1voeq0d.dll”--“拒绝访问</title>
    <url>/archives/b4d8b88f.html</url>
    <content><![CDATA[<ul>
<li><p>在本地开发环境没问题,但是发布到服务器出现:未能写入输出文件“c:\Windows\Microsoft.NET\Framework64\v4.0.30319\Temporary ASP.NET Files\root\106f9ae8\cc0e1169\App_global.asax.haz99mum.dll”–“拒绝访问。 ”错误</p>
</li>
<li><p>还有就是在迁移服务器时，在原来的服务器上是好好的，迁移到新的服务器上部署好之后，浏览器打开显示乱码，无法访问</p>
</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><ol>
<li>通常的解决方法：原因是由于系统目录下的Temp目录无相应的权限所致，具体操作如下：C:\Windows\temp–&gt;属性–&gt;安全–&gt;编辑–&gt;添加NETWORK SERVICE用户的读写权限就可以解决.</li>
<li>打开服务器系统c盘，打开window， 右键temp 属性 安全 编辑 添加IIS_IUSRS 用户控制权限添加修改和写入权限即可。这是Windows Server 2008 R2 标准版 SP1 64位中文版解决办法。(我的是这个问题.这样就解决了,上面的network service不用也行)</li>
</ol>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>服务器错误</tag>
      </tags>
  </entry>
  <entry>
    <title>layui-icon常用记录大全_layui-icon图标库</title>
    <url>/archives/9d0caa39.html</url>
    <content><![CDATA[<link href="//unpkg.com/layui@2.11.5/dist/css/layui.css" rel="stylesheet">
icon有很多，选择起来纷繁复杂，罗列一点常用的，用于自己以后使用，大家可以收藏起来哦~~

<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>滑块 <br>layui-icon-slider <br><i class="layui-icon layui-icon-slider"></i></td>
<td>打印 <br>layui-icon-print <br><i class="layui-icon layui-icon-print"></i></td>
<td>导出 <br>layui-icon-export <br><i class="layui-icon layui-icon-export"></i></td>
<td>列 <br>layui-icon-cols <br><i class="layui-icon layui-icon-cols"></i></td>
</tr>
<tr>
<td>退出全屏 <br>layui-icon-screen-restore <br><i class="layui-icon layui-icon-screen-restore"></i></td>
<td>全屏 <br>layui-icon-screen-full <br><i class="layui-icon layui-icon-screen-full"></i></td>
<td>半星 <br>layui-icon-rate-half <br><i class="layui-icon layui-icon-rate-half"></i></td>
<td>星星-空心 <br>layui-icon-rate<br><i class="layui-icon layui-icon-rate"></i></td>
</tr>
<tr>
<td>星星-实心 <br>layui-icon-rate-solid<br><i class="layui-icon layui-icon-rate-solid"></i></td>
<td>手机 <br>layui-icon-cellphone<br><i class="layui-icon layui-icon-cellphone"></i></td>
<td>验证码 <br>layui-icon-vercode<br><i class="layui-icon layui-icon-vercode"></i></td>
<td>微信 <br>layui-icon-login-wechat <br><i class="layui-icon layui-icon-login-wechat"></i></td>
</tr>
<tr>
<td>QQ <br>layui-icon-login-qq<br><i class="layui-icon layui-icon-login-qq"></i></td>
<td>微博 <br>layui-icon-login-weibo<br><i class="layui-icon layui-icon-login-weibo"></i></td>
<td>刷新-粗 <br>layui-icon-refresh-3<br><i class="layui-icon layui-icon-refresh-3"></i></td>
<td>授权 <br>layui-icon-auz<br><i class="layui-icon layui-icon-auz"></i></td>
</tr>
<tr>
<td>左向右伸缩菜单 <br>layui-icon-spread-left<br><i class="layui-icon layui-icon-spread-left"></i></td>
<td>右向左伸缩菜单 <br>layui-icon-shrink-right<br><i class="layui-icon layui-icon-shrink-right"></i></td>
<td>雪花 <br>layui-icon-snowflake<br><i class="layui-icon layui-icon-snowflake"></i></td>
<td>提示说明 <br>layui-icon-tips<br><i class="layui-icon layui-icon-tips"></i></td>
</tr>
<tr>
<td>便签 <br>layui-icon-note<br><i class="layui-icon layui-icon-note"></i></td>
<td>主页 <br>layui-icon-home<br><i class="layui-icon layui-icon-home"></i></td>
<td>高级 <br>layui-icon-senior<br><i class="layui-icon layui-icon-senior"></i></td>
<td>刷新 <br>layui-icon-refresh<br><i class="layui-icon layui-icon-refresh"></i></td>
</tr>
<tr>
<td>刷新 <br>layui-icon-refresh-1<br><i class="layui-icon layui-icon-refresh-1"></i></td>
<td>旗帜 <br>layui-icon-flag<br><i class="layui-icon layui-icon-flag"></i></td>
<td>主题 <br>layui-icon-theme<br><i class="layui-icon layui-icon-theme"></i></td>
<td>消息-通知 <br>layui-icon-notice<br><i class="layui-icon layui-icon-notice"></i></td>
</tr>
<tr>
<td>网站 <br>layui-icon-website<br><i class="layui-icon layui-icon-website"></i></td>
<td>控制台 <br>layui-icon-console<br><i class="layui-icon layui-icon-console"></i></td>
<td>表情-惊讶 <br>layui-icon-face-surprised<br><i class="layui-icon layui-icon-face-surprised"></i></td>
<td>设置-空心 <br>layui-icon-set<br><i class="layui-icon layui-icon-set"></i></td>
</tr>
<tr>
<td>模板 <br>layui-icon-template-1<br><i class="layui-icon layui-icon-template-1"></i></td>
<td>应用 <br>layui-icon-app<br><i class="layui-icon layui-icon-app"></i></td>
<td>模板 <br>layui-icon-template<br><i class="layui-icon layui-icon-template"></i></td>
<td>赞 <br>layui-icon-praise<br><i class="layui-icon layui-icon-praise"></i></td>
</tr>
<tr>
<td>踩 <br>layui-icon-tread<br><i class="layui-icon layui-icon-tread"></i></td>
<td>男 <br>layui-icon-male<br><i class="layui-icon layui-icon-male"></i></td>
<td>女 <br>layui-icon-female<br><i class="layui-icon layui-icon-female"></i></td>
<td>相机-空心 <br>layui-icon-camera<br><i class="layui-icon layui-icon-camera"></i></td>
</tr>
<tr>
<td>相机-实心 <br>layui-icon-camera-fill<br><i class="layui-icon layui-icon-camera-fill"></i></td>
<td>菜单-水平  <br>layui-icon-more<br><i class="layui-icon layui-icon-more"></i></td>
<td>菜单-垂直 <br>layui-icon-more-vertical<br><i class="layui-icon layui-icon-more-vertical"></i></td>
<td>金额-人民币 <br>layui-icon-rmb<br><i class="layui-icon layui-icon-rmb"></i></td>
</tr>
<tr>
<td>金额-美元 <br>layui-icon-dollar<br><i class="layui-icon layui-icon-dollar"></i></td>
<td>钻石-等级 <br>layui-icon-diamond<br><i class="layui-icon layui-icon-diamond"></i></td>
<td>火 <br>layui-icon-fire<br><i class="layui-icon layui-icon-fire"></i></td>
<td>返回 <br>layui-icon-return<br><i class="layui-icon layui-icon-return"></i></td>
</tr>
<tr>
<td>位置-地图 <br>layui-icon-location<br><i class="layui-icon layui-icon-location"></i></td>
<td>办公-阅读 <br>layui-icon-read<br><i class="layui-icon layui-icon-read"></i></td>
<td>调查 <br>layui-icon-survey<br><i class="layui-icon layui-icon-survey"></i></td>
<td>表情-微笑 <br>layui-icon-face-smile<br><i class="layui-icon layui-icon-face-smile"></i></td>
</tr>
<tr>
<td>表情-哭泣 <br>layui-icon-face-cry<br><i class="layui-icon layui-icon-face-cry"></i></td>
<td>购物车 <br>layui-icon-cart-simple<br><i class="layui-icon layui-icon-cart-simple"></i></td>
<td>购物车 <br>layui-icon-cart<br><i class="layui-icon layui-icon-cart"></i></td>
<td>下一页 <br>layui-icon-next<br><i class="layui-icon layui-icon-next"></i></td>
</tr>
<tr>
<td>上一页 <br>layui-icon-prev<br><i class="layui-icon layui-icon-prev"></i></td>
<td>上传-空心-拖拽 <br>layui-icon-upload-drag<br><i class="layui-icon layui-icon-upload-drag"></i></td>
<td>上传-实心 <br>layui-icon-upload<br><i class="layui-icon layui-icon-upload"></i></td>
<td>下载-圆圈 <br>layui-icon-download-circle<br><i class="layui-icon layui-icon-download-circle"></i></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>layui</tag>
        <tag>icon</tag>
        <tag>图标库</tag>
        <tag>icon大全</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net 404页面设置，设置错误页面自动跳转</title>
    <url>/archives/7198a9db.html</url>
    <content><![CDATA[<h2 id="什么是404错误"><a href="#什么是404错误" class="headerlink" title="什么是404错误"></a>什么是404错误</h2><p>HTTP 404 错误意味着链接指向的网页不存在，即原始网页的URL失效，这种情况经常会发生，很难避免，比如说：网页URL生成规则改变、网页文件更名或移动位置、导入链接拼写错误等，导致原来的URL地址无法访问;当Web 服务器接到类似请求时，会返回一个404 状态码，告诉浏览器要请求的资源并不存在。但是，Web服务器默认的404错误页面，无论Apache还是IIS，均十分简陋、呆板且对用户不友好，无法给用户提供必要的信息以获取更多线索，无疑这会造成用户的流失。</p>
<h2 id="404页面的作用"><a href="#404页面的作用" class="headerlink" title="404页面的作用"></a>404页面的作用</h2><p>搜索引擎通过HTTP状态码来识别网页的状态。当搜索引擎获得了一个错误链接时，网站应该返回404状态码，告诉搜索引擎放弃对该链接的索引。而如果返回200或302状态码，搜索引擎就会为该链接建立索引，这导致大量不同的链接指向了相同的网页内容。结果是，搜索引擎对该网站的信任度大幅降低。</p>
<h2 id="如何检查自定义404页面能够返回“404”状态码"><a href="#如何检查自定义404页面能够返回“404”状态码" class="headerlink" title="如何检查自定义404页面能够返回“404”状态码"></a>如何检查自定义404页面能够返回“404”状态码</h2><p>在自定义404错误页面设置完毕后，一定要检查一下其是不是能够正确地返回“404”状态码。检查的方法也相当简单，输入一个网站内不存在网页的url，查看一下HTTP Header的返回情况，确信其返回的是“404”状态码。</p>
<h2 id="404页面的正确做法"><a href="#404页面的正确做法" class="headerlink" title="404页面的正确做法"></a>404页面的正确做法</h2><p>1、Apache服务器404页面的设置方法</p>
<p>在<code>.htaccess</code> 文件中加入代码：<code>ErrorDocument 404 /Error.html</code></p>
<p>建立一个简单的html404页面命名 Error.html</p>
<p>把 Error.html放置在网站根目录即可。</p>
<p>2、IIS&#x2F;ASP.net下设置404错误页面</p>
<p>首先，修改应用程序根目录的设置，打开 “<code>web.config</code>” 文件编辑，在其中加入如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">customErrors</span> <span class="attr">mode</span>=<span class="string">”On”</span> <span class="attr">defaultRedirect</span>=<span class="string">”error.asp”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error</span> <span class="attr">statusCode</span>=<span class="string">”404″</span> <span class="attr">redirect</span>=<span class="string">”notfound.asp”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">customErrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此例中“error.asp”为系统默认的404页面，“notfound.asp”为自定义的404页面，使用时请修改相应文件名。</p>
<p>然后，在自定义的404页面“notfound.asp”中加入：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Response.Status = “<span class="number">404</span> Not Found”</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>这样，便可以保证IIS能够正确地返回“404”状态码</p>
<blockquote>
<p>友情提醒</p>
</blockquote>
<p>1、一定不要将404错误直接转向到网站首页，这将可能导致你的网站首页不被收录;</p>
<p>2、&#x2F;Error.html 前面请不要带主域名(错误的写法：codeobservatory.cn&#x2F;error.html，正确的写法：&#x2F;error.html)，否者返回的状态码是302或200状态码。</p>
<p>从网上搜索asp.net网站如何自定义404错误页面时，大多数文章都是告诉你在web.config中，找到system.web，配置以下内容即可。</p>
<p>代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;customErrors mode=<span class="string">&quot;On&quot;</span> error statusCode=<span class="string">&quot;404&quot;</span> redirect=<span class="string">&quot;/404.htm&quot;</span> &gt;</span><br><span class="line">&lt;/customErrors&gt;</span><br></pre></td></tr></table></figure>

<p>实际上这样做之后，根本就得不到404未找到网页的网页头信息，得到的是302临时重定向的网页头信息。大家可以用 Check Headers Tool 工具查看 HTTP Status Codes就知道了。</p>
<blockquote>
<p>那么如何正确配置asp.net网站的自定义404错误网页呢？</p>
</blockquote>
<p>首先制作一个404.aspx页面，然后在web.config文件下的customeErrors中如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">customErrors redirectMode=&quot;ResponseRewrite&quot;</span><br><span class="line">error statusCode=&quot;404&quot; redirect=&quot;~/404.aspx&quot;/</span><br><span class="line">/customErrors</span><br></pre></td></tr></table></figure>

<p><strong><code>RedirectMode</code>有两种属性</strong>。</p>
<ul>
<li>ResponseRedirect是指将用户重定向到该错误页面，并且原始 URL 更改为该错误页面的 URL。</li>
<li>ResponseRewrite是指将用户定向到错误页面，并且不更改浏览器中的原始 URL。</li>
</ul>
<p>然后再在404.aspx.cs文件中，为Page_Load事件中加入以下代码：</p>
<p>代码如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Response.Status = <span class="string">&quot;404 Not Found&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过这样设置之后，HTTP Status Code 才会是 404 Not Found。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>.net</tag>
        <tag>404页面</tag>
      </tags>
  </entry>
  <entry>
    <title>c# .net PayPal支付配置验证(附代码)</title>
    <url>/archives/fb8e2ad0.html</url>
    <content><![CDATA[<h2 id="一、添加web窗体接收通知"><a href="#一、添加web窗体接收通知" class="headerlink" title="一、添加web窗体接收通知"></a>一、添加web窗体接收通知</h2><p>用于接收第三方支付回调通知，请求链接例如：<a href="https://codeobservatory.cn/Paypal/PaypalNotifyPage.aspx">https://codeobservatory.cn/Paypal/PaypalNotifyPage.aspx</a></p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/657759fc65631e8f10.png" alt="c# .net PayPal支付配置验证"></p>
<h2 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h2><h3 id="1-引入bll"><a href="#1-引入bll" class="headerlink" title="1.引入bll"></a>1.引入bll</h3><p>代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> PayPal.Api; </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System; </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Net; </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br></pre></td></tr></table></figure>
<h3 id="2-config配置文件"><a href="#2-config配置文件" class="headerlink" title="2.config配置文件"></a>2.config配置文件</h3><p>代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">paypal</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 将模式替换为“ security-test-sandbox”以测试您的服务器是否支持TLSv1.2。 有关更多信息，请遵循README说明。--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;connectionTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;360000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;requestRetries&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;mode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sandbox&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;clientId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ASx_gEpY2EynTh_SfDGIWzo7fSVJlrb8YDxr_X1YLz_SXU5Q5eTwC9_0r3d0rTrhyKPEe2lgwlAzb2Tc&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;clientSecret&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EGKDuKiVXK0TX3996cuHBba8UmEA29q9W3yoCfB_TAHS5KypxfirBvHrqUc-8u7CPy-lzFY4VaWF6L04&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 正式 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--&lt;add name=&quot;mode&quot; value=&quot;live&quot; /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;add name=&quot;clientId&quot; value=&quot;&quot; /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;add name=&quot;clientSecret&quot; value=&quot;&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">paypal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>该处用于获取config 和accessToken的值。</li>
<li>clientId和clientSecret获取方式：</li>
</ol>
<ul>
<li>a、登录： PayPal Developer</li>
<li>b、选择Sandbox，创建app</li>
</ul>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/e2c72597654bcf3e11.png" alt="c# .net PayPal支付配置验证"></p>
<ul>
<li>c、点击进去就能看到 clientId和clientSecret 值</li>
</ul>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/c5bd3ba9c620e71412.png" alt="c# .net PayPal支付配置验证"></p>
<h3 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h3><p>代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Page page &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PaypalService</span>(<span class="params">Page page</span>)</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.page = page;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PaypalPayNotify</span>()</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> strRequest = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                page.Response.Write(<span class="string">&quot;200 OK&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> param = page.Request.BinaryRead(page.Request.ContentLength);</span><br><span class="line"></span><br><span class="line">                strRequest = Encoding.ASCII.GetString(param);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (VerificationResponse(page.Request, strRequest).Equals(<span class="string">&quot;SUCCESS&quot;</span>))</span><br><span class="line"></span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    WriteLog(<span class="string">&quot;执行业务操作VERIFIED&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    JObject obj = JObject.Parse(strRequest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">string</span> AmountTotal = obj[<span class="string">&quot;resource&quot;</span>][<span class="string">&quot;amount&quot;</span>][<span class="string">&quot;value&quot;</span>].ToString();<span class="comment">//金额</span></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">string</span> OrderNumber = obj[<span class="string">&quot;resource&quot;</span>][<span class="string">&quot;invoice_id&quot;</span>].ToString();<span class="comment">//订单号</span></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">string</span> PayID = obj[<span class="string">&quot;resource&quot;</span>][<span class="string">&quot;id&quot;</span>].ToString();<span class="comment">//Paypal支付订单号</span></span><br><span class="line"></span><br><span class="line">                    <span class="built_in">string</span> PaymentStatus = obj[<span class="string">&quot;resource&quot;</span>][<span class="string">&quot;status&quot;</span>].ToString();<span class="comment">//交易状态</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (PaymentStatus == <span class="string">&quot;COMPLETED&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//更新业务</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                    &#123;</span><br><span class="line"></span><br><span class="line">                       <span class="comment">//打印日志输出错误</span></span><br><span class="line"></span><br><span class="line">                       <span class="comment">// &quot; Paypal更新支付出错，交易状态不正确！PaymentStatus：&quot; + PaymentStatus</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//捕获异常，打印日志输出错误</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            page.Response.End();</span><br><span class="line"></span><br><span class="line">            page.Response.Close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Webhooks回调响应验证</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ipnRequest&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strRequest&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">VerificationResponse</span>(<span class="params">HttpRequest ipnRequest, <span class="built_in">string</span> strRequest</span>)</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理HttpWebRequest访问https有安全证书的问题（ 请求被中止: 未能创建 SSL/TLS 安全通道。）</span></span><br><span class="line"></span><br><span class="line">                ServicePointManager.ServerCertificateValidationCallback += (s, cert, chain, sslPolicyErrors) =&gt; <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;</span><br><span class="line"></span><br><span class="line">                System.Net.ServicePointManager.Expect100Continue = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> url = <span class="string">&quot;https://api-m.sandbox.paypal.com/v1/notifications/verify-webhook-signature&quot;</span>;<span class="comment">//沙盒webhook回调通知</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> transmissionId = ipnRequest.Headers[<span class="string">&quot;PAYPAL-TRANSMISSION-ID&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> transmissionTime = ipnRequest.Headers[<span class="string">&quot;PAYPAL-TRANSMISSION-TIME&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> certUrl = ipnRequest.Headers[<span class="string">&quot;PAYPAL-CERT-URL&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> signatureAlgorithm = ipnRequest.Headers[<span class="string">&quot;PAYPAL-AUTH-ALGO&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> transmissionSig = ipnRequest.Headers[<span class="string">&quot;PAYPAL-TRANSMISSION-SIG&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> webhookId = <span class="string">&quot;9XY05847MO097611P&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> dataStr = <span class="string">&quot;&#123;\&quot;transmission_id\&quot;:\&quot;&quot;</span> + transmissionId + <span class="string">&quot;\&quot;,\&quot;transmission_time\&quot;:\&quot;&quot;</span> + transmissionTime + <span class="string">&quot;\&quot;,\&quot;cert_url\&quot;:\&quot;&quot;</span> + certUrl + <span class="string">&quot;\&quot;,\&quot;auth_algo\&quot;:\&quot;&quot;</span> + signatureAlgorithm + <span class="string">&quot;\&quot;&quot;</span> +</span><br><span class="line"></span><br><span class="line">                        <span class="string">&quot;,\&quot;transmission_sig\&quot;:\&quot;&quot;</span> + transmissionSig + <span class="string">&quot;\&quot;,\&quot;webhook_id\&quot;:\&quot;&quot;</span> + webhookId + <span class="string">&quot;\&quot;,\&quot;webhook_event\&quot;:&quot;</span> + strRequest + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">               </span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> config = ConfigManager.Instance.GetProperties();<span class="comment">//读取配置文件</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> accessToken = <span class="keyword">new</span> OAuthTokenCredential(config).GetAccessToken();</span><br><span class="line"></span><br><span class="line">                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</span><br><span class="line"></span><br><span class="line">                request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">                request.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">                request.Headers.Add(<span class="string">&quot;Authorization&quot;</span>, accessToken);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//将有效负载附加到验证请求</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> streamOut = <span class="keyword">new</span> StreamWriter(request.GetRequestStream(), Encoding.ASCII);</span><br><span class="line"></span><br><span class="line">                streamOut.Write(dataStr);</span><br><span class="line"></span><br><span class="line">                streamOut.Close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                HttpWebResponse response = (HttpWebResponse)request.GetResponse();</span><br><span class="line"></span><br><span class="line">                Stream myResponseStream = response.GetResponseStream();</span><br><span class="line"></span><br><span class="line">                StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line"></span><br><span class="line">                myStreamReader.Close();</span><br><span class="line"></span><br><span class="line">                myResponseStream.Close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                JObject obj = JObject.Parse(retString);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> VerificationStatus = obj[<span class="string">&quot;verification_status&quot;</span>].ToString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> VerificationStatus;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//捕获异常，打印日志输出错误</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>1、该处用于支付Webhooks回调验证。</p>
<p>2、官方文档： 如何使用网络钩子模拟器；验证 webhook 签名api：&#x2F;v1&#x2F;notifications&#x2F;verify-webhook-signature；</p>
<p>3、添加网络钩子步骤：</p>
<p>a、点击打开新建的app，添加Webhooks</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/94a35fa8153607bd13.png" alt="c# .net PayPal支付配置验证"><br><img src="https://images.codeobservatory.cn/hexo/202507/22/f24cf25d4682048314.png" alt="c# .net PayPal支付配置验证"><br><img src="https://images.codeobservatory.cn/hexo/202507/22/2e10d6ce241a8a3615.png" alt="c# .net PayPal支付配置验证"></p>
<p>b、保存后就可以获取到WebhookId了</p>
<p>4、也可以模拟Webhooks回调请求</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/ebf4a4db365fc85e16.png" alt="c# .net PayPal支付配置验证"></p>
<p>本文到这就结束了，希望对您有所帮助。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>.net</tag>
        <tag>PayPal</tag>
        <tag>在线支付</tag>
      </tags>
  </entry>
  <entry>
    <title>asp.net web开发框架_Web前端开发必不可少的9个开源框架</title>
    <url>/archives/2355d2b3.html</url>
    <content><![CDATA[<p>大多数人想到Web开发时，通常会想到HTML或JavaScript，往往忽略了CSS，根据Wikipedia的说法，CSS既是网页中最重要也是最常被遗忘的部分之一，尽管它是万维网的三大基础技术之一。 今天就和大家分享9个流行的、强大的前端开源框架，帮助你轻松构建漂亮的网站前端。 </p>
<h2 id="1、Bootstrap"><a href="#1、Bootstrap" class="headerlink" title="1、Bootstrap"></a>1、Bootstrap</h2><p>Bootstrap无疑是最流行的CSS框架，它是最早的Web前端框架，由Twitter开发。 Bootstrap还提供了许多示例来帮助你入门。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/e93d00f5e4881e7618.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>使用Bootstrap，你可以将不同的组件和布局组合在一起，从而创建有趣的页面设计。它还提供了大量详细的文档。目前在Github上已经有1100多个贡献者，19000多个提交。(Github地址： <a href="https://github.com/twbs/bootstrap">https://github.com/twbs/bootstrap</a> ) </p>
<h2 id="2、PatternFly"><a href="#2、PatternFly" class="headerlink" title="2、PatternFly"></a>2、PatternFly</h2><p>PatternFly是Red Hat的开源CSS框架，和Bootstrap不同的是，Bootstrap是为那些想要创建漂亮网站的人而设计的，而PatternFly主要专注于企业应用程序开发人员，提供诸如条形图、图表、导航之类的组件，实际上Red Hat就是使用它创建了OpenShift。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/75264446ad1b31c019.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>除了静态HTML，PatternFly还支持ReactJS框架，这是Facebook开发的流行JavaScript框架。PatternFly具有许多适用于企业级应用程序的高级组件，如条形图，图表，模式和布局。 PatternFly在GitHub上一共有1,050多个提交和44个贡献者。(Github地址： <a href="https://github.com/patternfly/patternfly">https://github.com/patternfly/patternfly</a> ) </p>
<h2 id="3、Material-Components-for-the-web"><a href="#3、Material-Components-for-the-web" class="headerlink" title="3、Material Components for the web"></a>3、Material Components for the web</h2><p>Material Components for the web(MDC Web)，是谷歌专为Web设计的全新前端框架。MDC Web可帮助开发人员执行Material Design，组件由谷歌的核心工程师团队和UX设计人员开发。这些组件可以建立可靠的开发工作流程，以构建美观且功能强大的Web项目。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/5589b3170563d4c20.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>MDC Web在Github上共有5700多个提交和349个贡献者。(Github地址： <a href="https://github.com/material-components/material-components-web">https://github.com/material-components/material-components-web</a> ) </p>
<h2 id="4、Pure"><a href="#4、Pure" class="headerlink" title="4、Pure"></a>4、Pure</h2><p>Bootstrap，Patternfly和MDC Web是功能非常强大的CSS框架，但它们可能非常繁琐和复杂。如果你想要一个轻量级的CSS框架，可以尝试Pure.css，它本身更接近于CSS编程，但又可以帮助你构建一个不错的网页。Pure是具有最小占用空间的轻量级CSS框架，它由Yahoo开发，根据BSD许可是开源的。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/8a923a9e3878164521.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>Pure在Github上共有565多个提交和59个贡献者。(Github地址： <a href="https://github.com/pure-css/pure">https://github.com/pure-css/pure</a> ) </p>
<h2 id="5、Foundation"><a href="#5、Foundation" class="headerlink" title="5、Foundation"></a>5、Foundation</h2><p>Foundation声称是世界上最先进的响应式前端框架。它提供了用于构建专业网站的高级功能和教程。许多公司，组织都使用该框架，并且该框架具有大量可用的文档。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/8b5ee34e0dc1be6d22.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>Foundation在Github上有将近17000个提交和1000个贡献者。(Github地址： <a href="https://github.com/foundation/foundation-sites">https://github.com/foundation/foundation-sites</a> ) </p>
<h2 id="6、Bulma"><a href="#6、Bulma" class="headerlink" title="6、Bulma"></a>6、Bulma</h2><p>Bulma是一个基于Flexbox的开源框架，可根据MIT许可证开源。Bulma是一个非常轻量级的框架，因为它只需要一个CSS文件。Bulma拥有简洁明了的文档，可轻松选择你想要的主题。它还具有许多Web组件，你可以在设计中使用它们。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/d8d75962cd3279ae23.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>Bulma在Github上有1400多个提交和300个贡献者。(Github地址： <a href="https://github.com/jgthms/bulma">https://github.com/jgthms/bulma</a> ) </p>
<h2 id="7、Skeleton"><a href="#7、Skeleton" class="headerlink" title="7、Skeleton"></a>7、Skeleton</h2><p>如果说还有什么框架比Pure更加轻量级，那一定是Skeleton。Skeleton库只有大约400行，并且该框架仅提供一些基本的CSS框架组件。尽管如此，Skeleton还是提供了详细的文档来帮助你快速上手。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/648d1c33e2c02e1c24.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>Skeleton在Github上共有167个提交和22个贡献者，但它不是最活跃的项目，它最新一次的更新是在2014年。(Github地址： <a href="https://github.com/dhg/Skeleton">https://github.com/dhg/Skeleton</a> ) </p>
<h2 id="8、Materialize"><a href="#8、Materialize" class="headerlink" title="8、Materialize"></a>8、Materialize</h2><p>Materialize 是一个基于 Material Design风格的一个现代化的响应式前端框架，解决了最繁重的工作，结合你的自定义组件，为你提供默认的样式。Materialize的文档页面非常全面，并且很容易遵循。其组件页面包括按钮，卡片，导航等。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/4ff052824198b2ad25.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>Materialize在Github上共有3800多个提交和250个贡献者。(Github地址： <a href="https://github.com/Dogfalo/materialize">https://github.com/Dogfalo/materialize</a> ) </p>
<h2 id="9、Bootflat"><a href="#9、Bootflat" class="headerlink" title="9、Bootflat"></a>9、Bootflat</h2><p>Bootflat是从Twitter的Bootstrap派生的开源CSS框架。与Bootstrap相比，Bootflat更简单，并且更加轻量级。Bootflat的文档似乎几乎受到了IKEA的启发，大部分都是图像，没有太多的文字。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/789d8bf43ed0d6d326.png" alt="asp.net web开发框架_Web前端开发必不可少的9个开源框架"></p>
<p>Bootflat是在MIT许可证下开源的，在Github上有159个提交和8个贡献者。(Github地址： <a href="https://github.com/bootflat/bootflat.github.io">https://github.com/bootflat/bootflat.github.io</a> )</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>asp.net</tag>
        <tag>web开发</tag>
        <tag>开发框架</tag>
        <tag>开源框架</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中怎么找父级标签和子级标签</title>
    <url>/archives/fe9c6897.html</url>
    <content><![CDATA[<h2 id="一、JS中查找父标签的方法："><a href="#一、JS中查找父标签的方法：" class="headerlink" title="一、JS中查找父标签的方法："></a>一、JS中查找父标签的方法：</h2><p>1、利用parentNode属性，语法“子元素对象.parentNode”；</p>
<p>2、借助Jquery中的parent()或parents()方法，语法“子元素对象.parent()”或“子元素对象.parents()”。</p>
<p><img src="https://images.codeobservatory.cn/hexo/202507/22/d68cae22a57819b517.jpg" alt="javascript中怎么找父级标签和子级标签"></p>
<p>找父元素节点的方法有：</p>
<p>1、原生方法–parentNode属性</p>
<p>parentNode 属性可返回某节点的父节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.<span class="property">parentNode</span> <span class="comment">//返回元素的第一个父节点</span></span><br></pre></td></tr></table></figure>

<p>2、Jquery方法(记得导包)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.<span class="title function_">parent</span>() 返回元素的第一个父节点</span><br><span class="line">元素.<span class="title function_">parents</span>() 返回一个包含元素所有父节点的数组</span><br></pre></td></tr></table></figure>

<p>下面有个例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//原生的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;a&#x27;</span>).<span class="property">parentNode</span> <span class="comment">//得到&lt;span&gt;节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//也可以这么玩</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;a&#x27;</span>).<span class="property">parentNode</span>.<span class="property">parentNode</span> <span class="comment">//得到&lt;div&gt;节点</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Jquery的方法  记得导包哦</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#a&#x27;</span>).<span class="title function_">parent</span>();<span class="comment">//得到&lt;span&gt;节点</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#a&#x27;</span>).<span class="title function_">parent</span>().<span class="title function_">parent</span>();<span class="comment">//得到&lt;div&gt;节点</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#a&#x27;</span>).<span class="title function_">parents</span>();<span class="comment">//得到所有父级节点   &lt;span&gt; ,&lt;div&gt; ,&lt;body&gt; ,&lt;html&gt;</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#a&#x27;</span>).<span class="title function_">parents</span>(<span class="string">&#x27;body&#x27;</span>);<span class="comment">//得到&lt;body&gt;节点</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、找子元素节点的方法有："><a href="#二、找子元素节点的方法有：" class="headerlink" title="二、找子元素节点的方法有："></a>二、找子元素节点的方法有：</h2><p>1、原生方法–childNodes属性</p>
<p>childNodes 属性可返回某节点的子节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.<span class="property">childNodes</span> <span class="comment">//返回元素的第一个子节点</span></span><br></pre></td></tr></table></figure>

<p>2、Jquery方法(记得导包)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">元素.<span class="title function_">child</span>() 返回元素的第一个子节点</span><br><span class="line">元素.<span class="title function_">children</span>() 返回一个包含元素所有父节点的数组</span><br></pre></td></tr></table></figure>

<p>下面有个例子:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//原生的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>).<span class="property">childNodes</span>   <span class="comment">//得到&lt;span&gt;节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//也可以这么玩</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>).<span class="property">childNodes</span>.<span class="property">childNodes</span> <span class="comment">//得到&lt;a&gt;节点</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//Jquery的方法  同样记得导包哦</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#div&#x27;</span>).<span class="title function_">child</span>();<span class="comment">//得到&lt;span&gt;节点</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#div&#x27;</span>).<span class="title function_">child</span>().<span class="title function_">child</span>();<span class="comment">//得到&lt;a&gt;节点</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#div&#x27;</span>).<span class="title function_">children</span>();<span class="comment">//得到所有父级节点   &lt;span&gt; ,&lt;a&gt;</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#div&#x27;</span>).<span class="title function_">children</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//得到&lt;a&gt;节点</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>以上是javascript中怎么找父级标签和子级标签全部内容，希望文章能够帮你解决javascript中怎么找父级标签和子级标签所遇到的程序开发问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET开发中3秒判断该用 IEnumerable 还是 IQueryable</title>
    <url>/archives/eb830df6.html</url>
    <content><![CDATA[<p>在.NET开发中，IEnumerable和IQueryable是处理数据集合时最常用的两个接口。很多开发者对它们的选择感到困惑，但其实只需要掌握几个关键点就能快速做出正确决策。</p>
<p>##核心区别：执行位置</p>
<p>IEnumerable：在内存中执行查询操作<br>IQueryable：在数据源端执行查询操作</p>
<p>###选择 IEnumerable 当：</p>
<p>1、数据已在内存中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 数据来自内存集合</span><br><span class="line">List&lt;User&gt; users = GetUsersFromMemory();</span><br><span class="line">var result = users.Where(u =&gt; u.Age &gt; 18); // 使用 IEnumerable</span><br></pre></td></tr></table></figure>
<p>2、需要立即执行查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var users = dbContext.Users.ToList() // 立即执行</span><br><span class="line">                   .Where(u =&gt; u.Age &gt; 18); // 在内存中过滤</span><br></pre></td></tr></table></figure>
<p>3、使用LINQ to Objects功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用.NET方法而非SQL可翻译的方法</span><br><span class="line">var result = users.Where(u =&gt; u.Name.Contains(&quot;John&quot;))</span><br><span class="line">                  .AsEnumerable() // 切换到内存操作</span><br><span class="line">                  .Select(u =&gt; new &#123; u.Name, Initial = u.Name[0] &#125;);</span><br></pre></td></tr></table></figure>
<p>###选择 IQueryable 当：</p>
<p>1、需要数据库端过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查询被转换为SQL并在数据库执行</span><br><span class="line">var result = dbContext.Users</span><br><span class="line">                     .Where(u =&gt; u.Age &gt; 18) // 生成 SQL: WHERE Age &gt; 18</span><br><span class="line">                     .OrderBy(u =&gt; u.Name);</span><br></pre></td></tr></table></figure>

<p>2、需要分页或聚合操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 只在数据库获取需要的记录</span><br><span class="line">var pagedResult = dbContext.Users</span><br><span class="line">                          .Where(u =&gt; u.IsActive)</span><br><span class="line">                          .Skip(20).Take(10) // 生成分页SQL</span><br><span class="line">                          .ToList();</span><br></pre></td></tr></table></figure>
<p>3、构建动态查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IQueryable&lt;User&gt; query = dbContext.Users;</span><br><span class="line"></span><br><span class="line">if (!string.IsNullOrEmpty(searchName))</span><br><span class="line">    query = query.Where(u =&gt; u.Name.Contains(searchName));</span><br><span class="line"></span><br><span class="line">if (minAge.HasValue)</span><br><span class="line">    query = query.Where(u =&gt; u.Age &gt;= minAge.Value);</span><br><span class="line"></span><br><span class="line">var finalResult = query.ToList(); // 单一SQL查询</span><br></pre></td></tr></table></figure>
<p>##性能提示💡</p>
<p>错误用法：❌</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这将加载整个表到内存！</span><br><span class="line">var users = dbContext.Users.ToList()</span><br><span class="line">                  .Where(u =&gt; u.Age &gt; 18); </span><br></pre></td></tr></table></figure>
<p>正确用法：✅</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 只在数据库查询需要的记录</span><br><span class="line">var users = dbContext.Users</span><br><span class="line">                    .Where(u =&gt; u.Age &gt; 18)</span><br><span class="line">                    .ToList();</span><br></pre></td></tr></table></figure>
<p>##总结</p>
<p>记住这个简单的规则：**IQueryable用于推迟查询执行到数据源端，IEnumerable用于内存中的操作。**根据你的数据源位置和查询需求，遵循上述指南就能在3秒内做出正确选择，从而优化应用程序性能。</p>
]]></content>
  </entry>
</search>
